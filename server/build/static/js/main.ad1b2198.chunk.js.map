{"version":3,"sources":["firebase.js","contexts/AuthContext.js","components/auth/PrivateRoute.js","components/Dashboard.js","components/game/SquareGrid.js","components/game/help.js","contexts/socket.js","components/game/Grid.js","components/game/Game.js","components/Page.js","components/auth/UpdateProfile.js","components/auth/Signup.js","components/auth/Login.js","components/auth/ForgotPassword.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","appId","auth","window","location","hostname","REACT_APP_TEST","database","useEmulator","disableWarnings","base","Rebase","createClass","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","PrivateRoute","Component","component","rest","render","props","to","Dashboard","toggleGameModeCb","updateProfile","userName","played","won","history","useHistory","error","setError","a","push","Card","className","Body","id","Alert","variant","Button","onClick","SquareGrid","colIdx","handleMove","data-testid","getGrid","rows","cols","grid","i","Array","fill","initialGrid","numOfCol","length","maxRowIdx","rowChart","getRowChart","checkResult","row","col","rMins","rPlus","cMins","cPlus","up_down","left_right","upLeft_downRight","upRight_downLeft","up","down","left","right","upLeft","downRight","upRight","downLeft","some","count","includes","alphabeta","numOfCols","depth","isMaximizingPlayer","result","undefined","console","log","bestMove","bestDepth","Infinity","bestScore","c","r","depthAndScore","moveDepth","moveScore","SocketContext","socket","socketio","connect","reconnection","forceNew","Grid","forwardRef","ref","game","handleResultCb","opponentName","thisPlayerNum","gameOver","initialRowChart","setGrid","setRowChart","ready","setReady","thisPlayerColor","useMemo","opponentPlayerColor","client","useImperativeHandle","resetGrid","setTimeout","handleAiMove","huGrid","huRowChart","newGrid","map","slice","newRowChart","bestMoves","Math","floor","random","findAiMove","aiMoveRowIdx","aiMoveColIdx","rowValue","newRowsAvailable","rowIdx","emit","playerNum","on","off","rowIndex","style","color","Game","incrementData","player1Name","setPlayer1Name","player2Name","setPlayer2Name","round","setRound","score1","setScore1","score2","setScore2","setGameOver","resultMsg","setResultMsg","info","setInfo","disableReplayBtn","setDisableReplayBtn","setThisPlayerNum","thisPlayerName","setThisPlayerName","setResult","whoTrigger","setWhoTrigger","replay","setReplay","useRef","useCallback","replayCb","player1","player2","alert","playerName","score","isBlankGrid","JSON","stringify","current","PreRound","background","disabled","Page","useLocation","data","setData","loadGame","uid","state","displayName","syncState","context","setState","defaultValue","then","onFailure","removeBinding","mode","key1","key2","updatedData","post","err","UpdateProfile","usernameRef","emailRef","passwordRef","passwordConfirmRef","Form","onSubmit","e","preventDefault","promises","Promise","all","catch","Group","Label","Control","type","required","placeholder","Signup","cred","Login","ForgotPassword","message","setMessage","App","Container","minHeight","maxWidth","minWidth","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad1b2198.chunk.js","sourcesContent":["import Rebase from \"re-base\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n});\n\nlet auth = app.auth();\n\n// USE EMULATORS IN TEST ENVIRONMENT\nif (window.location.hostname === \"localhost\" && process.env.REACT_APP_TEST) {\n  app.database().useEmulator(\"localhost\", 9000);\n  app.auth().useEmulator(\"http://localhost:9099\", { disableWarnings: false });\n}\n\nconst base = Rebase.createClass(app.database());\nexport { app, auth };\nexport default base;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { auth } from \"../firebase\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  function signup(email, password) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email);\n  }\n\n  function updateEmail(email) {\n    return currentUser.updateEmail(email);\n  }\n\n  function updatePassword(password) {\n    return currentUser.updatePassword(password);\n  }\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword,\n  };\n\n  return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n  const { currentUser } = useAuth();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />;\n      }}\n    ></Route>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Card, Button, Alert } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Dashboard({\n  toggleGameModeCb,\n  logout,\n  updateProfile,\n  userName,\n  played,\n  won,\n}) {\n  const history = useHistory();\n  const [error, setError] = useState(\"\");\n\n  async function handleLogout() {\n    setError(\"\");\n    try {\n      await logout();\n      history.push(\"/\");\n    } catch {\n      setError(\"Failed to log out\");\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"box\">\n        <Card.Body>\n          <h2 id=\"userName\" className=\"text-center mb-4\">\n            Hello, {userName}!\n          </h2>\n          <div className=\"row\">\n            <h4 id=\"played\" className=\"col-6 text-center\">\n              🎮 ✖️ {played}\n            </h4>\n            <h4 id=\"won\" className=\"col-6 text-center\">\n              🏆 ✖️ {won}\n            </h4>\n          </div>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n\n          <Button\n            id=\"single\"\n            onClick={() => {\n              toggleGameModeCb(\"single\");\n            }}\n            className=\"btn btn-warning w-100 mt-3\"\n          >\n            Challenge Peanutbot\n          </Button>\n          <Button\n            id=\"multi\"\n            onClick={() => {\n              toggleGameModeCb(\"multi\");\n            }}\n            className=\"btn btn-warning w-100 mt-3\"\n          >\n            Play With A Friend\n          </Button>\n          <Button id=\"updateProfile\" className=\"btn btn-warning w-100 mt-3\" onClick={updateProfile}>\n            Update Profile\n          </Button>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        <Button\n          id=\"logoutBtn\"\n          variant=\"link\"\n          className=\"text-decoration-none\"\n          onClick={handleLogout}\n        >\n          Log Out\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function SquareGrid({ value, colIdx, handleMove }) {\n  return (\n    <div className=\"square bg-primary\" onClick={() => handleMove(colIdx)}>\n      <div\n        id={colIdx === 0 ? \"testCol0\" : colIdx === 2 ? \"testCol2\" : \"\"}\n        data-testid=\"square\"\n        className={`circle ${value ? \"p\" + value : \"\"}`}\n      ></div>\n    </div>\n  );\n}\n","// const times = [];    // for checking runtime in development\nconst DEFAULT_ROWS = 6;\nconst DEFAULT_COLS = 7;\nconst FULL_COLUMN = 9; // Because the max standard number of rows is 8\n\nconst getGrid = function (rows = DEFAULT_ROWS, cols = DEFAULT_COLS) {\n  const grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(cols).fill(0));\n    i++;\n  }\n  return grid;\n};\n\nexport const initialGrid = getGrid();\n\nfunction getRowChart(grid) {\n  const numOfCol = grid[0].length;\n  const maxRowIdx = grid.length - 1;\n  const rowChart = [];\n  let i = 0;\n  while (i < numOfCol) {\n    rowChart.push(maxRowIdx);\n    i++;\n  }\n  return rowChart;\n}\n\nexport const initialRowChart = getRowChart(getGrid());\n\nexport function checkResult(grid, row, col) {\n  const value = grid[row][col];\n  // INDEXES\n  let rMins = row - 1;\n  let rPlus = row + 1;\n  let cMins = col - 1;\n  let cPlus = col + 1;\n\n  // COUNTS\n  let up_down = 1;\n  let left_right = 1;\n  let upLeft_downRight = 1;\n  let upRight_downLeft = 1;\n\n  // FLAGS FOR COUNT INCREMENT\n  let up = true;\n  let down = true;\n  let left = true;\n  let right = true;\n  let upLeft = true;\n  let downRight = true;\n  let upRight = true;\n  let downLeft = true;\n\n  while (up || down || left || right || upLeft || downRight || upRight || downLeft) {\n    const counts = [up_down, left_right, upLeft_downRight, upRight_downLeft];\n    if (counts.some((count) => count >= 4)) return value;\n\n    if (up) {\n      grid[rMins]?.[col] === value ? up_down++ : (up = false);\n    }\n\n    if (down) {\n      grid[rPlus]?.[col] === value ? up_down++ : (down = false);\n    }\n\n    if (left) {\n      grid[row][cMins] === value ? left_right++ : (left = false);\n    }\n\n    if (right) {\n      grid[row][cPlus] === value ? left_right++ : (right = false);\n    }\n\n    if (upLeft) {\n      grid[rMins]?.[cMins] === value ? upLeft_downRight++ : (upLeft = false);\n    }\n\n    if (downRight) {\n      grid[rPlus]?.[cPlus] === value ? upLeft_downRight++ : (downRight = false);\n    }\n\n    if (upRight) {\n      grid[rMins]?.[cPlus] === value ? upRight_downLeft++ : (upRight = false);\n    }\n\n    if (downLeft) {\n      grid[rPlus]?.[cMins] === value ? upRight_downLeft++ : (downLeft = false);\n    }\n    rMins--;\n    rPlus++;\n    cMins--;\n    cPlus++;\n  }\n\n  const counts = [up_down, left_right, upLeft_downRight, upRight_downLeft];\n  if (counts.some((count) => count >= 4)) return value;\n  if (row === 0 && !grid[0].includes(0)) return \"Draw\";\n}\n\nexport function findAiMove(grid, rowChart) {\n  // const t0 = performance.now();\n  const maxDepth = 7;\n  const numOfCols = grid[0].length;\n  let bestMoves = [];\n  let bestDepth;\n  let bestScore = Infinity;\n\n  for (let c = 0; c < numOfCols; c++) {\n    if (rowChart[c] === FULL_COLUMN) continue;\n    let r = rowChart[c];\n    grid[r][c] = 2; // BOT'S MOVE\n    let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, maxDepth, true); // GET HUMAN'S MOVE\n    rowChart[c] = r;\n    grid[r][c] = 0;\n    let [moveDepth, moveScore] = depthAndScore;\n    if (\n      moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n      (moveScore === bestScore && moveDepth < bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n      (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n    ) {\n      bestMoves = [];\n      bestDepth = moveDepth;\n      bestScore = moveScore;\n      bestMoves.push([r, c]);\n    } else if (moveScore === bestScore && moveDepth === bestDepth) {\n      bestMoves.push([r, c]);\n    }\n  }\n  let randomMove = Math.floor(Math.random() * bestMoves.length);\n\n  // TO GET AVERAGE RUNTIME\n  // const t1 = performance.now();\n  // console.log(`It took ${t1 - t0} milliseconds.`);\n  // const time = t1 - t0;\n  // times.push(time);\n  // const total = times.reduce((acc, time) => {\n  //   return acc + time;\n  // }, 0);\n  // const average = total / times.length;\n  // console.log({ average });\n\n  return bestMoves[randomMove];\n}\n\nfunction alphabeta(row, col, grid, numOfCols, rowChart, depth, isMaximizingPlayer) {\n  let result = checkResult(grid, row, col);\n  switch (result) {\n    case 1:\n      return [depth, 10];\n    case 2:\n      return [depth, -10];\n    case \"Draw\":\n      return [depth, 0];\n    case undefined:\n      if (depth === 0) return [depth, 0];\n      rowChart[col] = row === 0 ? 9 : row - 1;\n      break;\n    default:\n      console.log(\"uncaught result\", result);\n  }\n\n  if (isMaximizingPlayer) {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = -Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 1; // HUMAN'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, false); // GET BOT'S MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore > bestScore || // LOOK FOR HIGHEST SCORE (10)\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for max depth to speed up human's win\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for min depth to delay bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  } else {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 2; // BOT'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, true); // GET HUMAN's MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  }\n}\n","import socketio from \"socket.io-client\";\nimport React from \"react\";\nexport const SocketContext = React.createContext();\n// export const socket = socketio.connect(\"/\", { forceNew: true });\nexport const socket = socketio.connect(\"/\", {\n  reconnection: false,\n  forceNew: true,\n});\n","import React, {\n  useState,\n  useImperativeHandle,\n  forwardRef,\n  useEffect,\n  useContext,\n  useMemo,\n} from \"react\";\nimport SquareGrid from \"./SquareGrid\";\nimport { checkResult, findAiMove, initialGrid, initialRowChart } from \"./help\";\nimport { SocketContext } from \"../../contexts/socket\";\nimport \"./game.css\";\n\nexport const Grid = forwardRef(\n  ({ game, handleResultCb, opponentName, thisPlayerNum, gameOver }, ref) => {\n    const initialGrid = [\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [2, 2, 2, 0, 0, 0, 0],\n      [1, 1, 1, 0, 0, 0, 0],\n    ];\n    const initialRowChart = [3, 3, 3, 5, 5, 5, 5];\n\n    const [grid, setGrid] = useState(initialGrid);\n    const [rowChart, setRowChart] = useState(initialRowChart);\n    const [ready, setReady] = useState(game === \"single\" ? true : false);\n\n    const thisPlayerColor = useMemo(\n      () => (thisPlayerNum === 1 ? \"#f012be\" : \"#2ecc40\"),\n      [thisPlayerNum]\n    );\n\n    const opponentPlayerColor = useMemo(\n      () => (thisPlayerNum === 1 ? \"#2ecc40\" : \"#f012be\"),\n      [thisPlayerNum]\n    );\n\n    const client = useContext(SocketContext);\n    useImperativeHandle(ref, () => ({\n      grid,\n      resetGrid,\n    }));\n\n    const resetGrid = () => {\n      setGrid(initialGrid);\n      setRowChart(initialRowChart);\n      if (game === \"single\" && !ready) {\n        setTimeout(() => {\n          handleAiMove(initialGrid, initialRowChart);\n        }, 100);\n      }\n    };\n\n    const handleAiMove = (huGrid, huRowChart) => {\n      const newGrid = huGrid.map((a) => a.slice());\n      const newRowChart = huRowChart.slice();\n      const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid, newRowChart);\n      newGrid[aiMoveRowIdx][aiMoveColIdx] = 2;\n      setGrid(newGrid);\n      const result = checkResult(newGrid, aiMoveRowIdx, aiMoveColIdx);\n      if (result) {\n        handleResultCb(result);\n      } else {\n        const rowValue = aiMoveRowIdx === 0 ? 9 : aiMoveRowIdx - 1;\n        newRowChart[aiMoveColIdx] = rowValue;\n        setRowChart(newRowChart);\n        setReady(true);\n      }\n    };\n\n    const handleMove = (colIdx) => {\n      if (!gameOver && ready) {\n        if (rowChart[colIdx] === 9) return; // 9 means full column\n        let newRowsAvailable;\n        const newGrid = grid.map((a) => a.slice());\n        const rowIdx = rowChart[colIdx];\n        newGrid[rowIdx][colIdx] = thisPlayerNum;\n        setGrid(newGrid);\n        const result = checkResult(newGrid, rowIdx, colIdx);\n        if (result) {\n          console.log(\"Emit handle-result\");\n          client.emit(\"result\", { result, playerNum: thisPlayerNum });\n          handleResultCb(result, thisPlayerNum);\n        } else {\n          setReady(false);\n          newRowsAvailable = rowChart.slice();\n          const rowValue = rowIdx === 0 ? 9 : rowIdx - 1;\n          newRowsAvailable[colIdx] = rowValue;\n          setRowChart(newRowsAvailable);\n          if (game === \"single\") {\n            setTimeout(() => {\n              handleAiMove(newGrid, newRowsAvailable);\n            }, 100);\n          }\n        }\n        game === \"multi\" &&\n          client.emit(\"update-grid\", { grid: newGrid, rowChart: newRowsAvailable, result });\n      }\n    };\n\n    useEffect(() => {\n      if (game === \"multi\") {\n        client.emit(\"go-first\");\n\n        client.on(\"go-first\", () => {\n          setReady(true);\n          setGrid(initialGrid);\n          setRowChart(initialRowChart);\n        });\n      }\n\n      client.on(\"update-grid\", ({ grid, rowChart, result }) => {\n        if (!result) setReady(true);\n        setGrid(grid);\n        setRowChart(rowChart);\n      });\n      return () => {\n        client.off(\"go-first\");\n        client.off(\"update-grid\");\n      };\n    }, [client, game]);\n\n    return (\n      <>\n        {/* Grid */}\n        <div id=\"boarder\">\n          <div id=\"grid\" className=\"grid\">\n            {grid.map((row, rowIndex) => (\n              <div className=\"row\" key={rowIndex}>\n                {row.map((value, colIdx) => (\n                  <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* WHO's TURN */}\n        <h4\n          data-testid=\"turn\"\n          className=\"text-center mt-4\"\n          style={{ color: ready ? thisPlayerColor : opponentPlayerColor }}\n        >\n          {!opponentName && \"Waiting for a player to join...\"}\n          {gameOver ? \"\" : ready ? \"Your turn\" : `Waiting for ${opponentName}...`}\n        </h4>\n      </>\n    );\n  }\n);\n","import React, { useState, useEffect, useRef, useCallback, useContext, useMemo } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Grid } from \"./Grid\";\nimport { initialGrid } from \"../game/help\";\nimport { SocketContext } from \"../../contexts/socket\";\nimport \"./game.css\";\n\nexport default function Game({ userName, game, incrementData, toggleGameModeCb }) {\n  const [player1Name, setPlayer1Name] = useState(\"\");\n  const [player2Name, setPlayer2Name] = useState(\"\");\n  const [round, setRound] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [resultMsg, setResultMsg] = useState(\"\");\n  const [info, setInfo] = useState(\"\");\n  const [disableReplayBtn, setDisableReplayBtn] = useState(true);\n  const [thisPlayerNum, setThisPlayerNum] = useState(1);\n  const [thisPlayerName, setThisPlayerName] = useState(\"\");\n\n  const [result, setResult] = useState(0);\n  const [whoTrigger, setWhoTrigger] = useState(0);\n  const [replay, setReplay] = useState(false);\n\n  const opponentName = useMemo(\n    () => (thisPlayerNum === 1 ? player2Name : player1Name),\n    [player1Name, player2Name, thisPlayerNum]\n  );\n  const client = useContext(SocketContext);\n  const ref = useRef();\n\n  const handleResultCb = useCallback((result, playerNum) => {\n    setResult(result);\n    setWhoTrigger(playerNum);\n  }, []);\n\n  const replayCb = useCallback((playerNum) => {\n    setReplay(true);\n    setWhoTrigger(playerNum);\n  }, []);\n\n  const quit = () => {\n    const isBlankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n    if (!info && !isBlankGrid) incrementData(\"played\");\n    if (game === \"multi\") client.emit(\"player-disconnected\", { playerNum: thisPlayerNum });\n    toggleGameModeCb(\"\");\n  };\n\n  useEffect(() => {\n    if (game === \"single\") {\n      setGameOver(false);\n      setDisableReplayBtn(false);\n      setPlayer1Name(userName);\n      setPlayer2Name(\"Peanutbot\");\n    }\n\n    if (game === \"multi\") {\n      client.emit(\"player-connecting\", { userName });\n      client.on(\"player-has-joined\", ({ player1, player2 }) => {\n        console.log(\"SOCKET ID\", client.id);\n        player1 && setPlayer1Name(player1);\n        player2 && setPlayer2Name(player2);\n        if (player1 && player2) {\n          setScore1(0);\n          setScore2(0);\n          setInfo(\"\");\n          setRound(1);\n          setGameOver(false);\n          setDisableReplayBtn(false);\n        }\n      });\n\n      client.on(\"full-server\", () => {\n        toggleGameModeCb(\"\");\n        alert(\"Sorry, server is full.\");\n      });\n\n      client.on(\"player-1-connected\", () => {\n        console.log(\"on player 1 connected\");\n        setThisPlayerName(userName);\n      });\n\n      client.on(\"player-2-connected\", () => {\n        setThisPlayerNum(2);\n        console.log(\"on player 2 connected\");\n        setThisPlayerName(userName);\n      });\n\n      client.on(\"player-disconnected\", ({ playerName, playerNum }) => {\n        playerNum === 1 ? setPlayer1Name(\"\") : setPlayer2Name(\"\");\n        setInfo(`${playerName} left💨`);\n        setResultMsg(\"\");\n        setGameOver(true);\n        setDisableReplayBtn(true);\n      });\n\n      return () => {\n        client.off(\"player-has-joined\");\n        client.off(\"full-server\", toggleGameModeCb);\n        client.off(\"player-1-connected\");\n        client.off(\"player-2-connected\");\n        client.off(\"player-disconnected\");\n      };\n    }\n  }, [client, game, userName, toggleGameModeCb]);\n\n  useEffect(() => {\n    if (game === \"multi\") {\n      client.on(\"result\", ({ result, playerNum }) => {\n        // console.log(\"on handle-RESULT\");\n        handleResultCb(result, playerNum);\n      });\n\n      client.on(\"replay\", ({ playerNum }) => {\n        // console.log(\"on handle-REPLAY\");\n        replayCb(playerNum);\n      });\n    }\n\n    return () => {\n      client.off(\"result\", handleResultCb);\n      client.off(\"replay\", replayCb);\n    };\n  }, [client, game, handleResultCb, replayCb]);\n\n  useEffect(() => {\n    if (result) {\n      if (result === thisPlayerNum) {\n        setResultMsg(\"🥂 YOU WIN! 🎉\");\n        incrementData(\"won\");\n      } else if (result === \"Draw\") {\n        setResultMsg(result + \"! 🤝\");\n      } else {\n        console.log(\"trig lost\");\n        setResultMsg(\"😱 YOU LOST! 💩\");\n      }\n\n      if (whoTrigger === thisPlayerNum || game === \"single\") {\n        console.log({ whoTrigger });\n        console.log({ thisPlayerNum });\n        setInfo(\"Click Replay ⬇️\");\n      }\n      if (game === \"multi\" && whoTrigger !== thisPlayerNum) {\n        setInfo(`Waiting for ${thisPlayerName} to restart the game...`);\n        setDisableReplayBtn(true);\n      }\n      result === thisPlayerNum ? incrementData(\"played\", \"won\") : incrementData(\"played\");\n      result === 1 && setScore1((score) => score + 1);\n      result === 2 && setScore2((score) => score + 1);\n      setGameOver(true);\n      setResult(0);\n      setWhoTrigger(0);\n    }\n  }, [result, game, incrementData, whoTrigger, thisPlayerName, thisPlayerNum]);\n\n  useEffect(() => {\n    if (replay) {\n      const isBlankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n      if (!gameOver && !isBlankGrid && whoTrigger === thisPlayerNum) incrementData(\"played\"); //replay in the middle of the game\n      ref.current.resetGrid();\n      setGameOver(false);\n      setRound((PreRound) => PreRound + 1);\n      setResultMsg(\"\");\n      setInfo(\"\");\n      setDisableReplayBtn(false);\n      setReplay(false);\n      setWhoTrigger(0);\n    }\n  }, [gameOver, incrementData, whoTrigger, replay, thisPlayerNum]);\n\n  return (\n    <div className=\"box\">\n      <div className=\"row\">\n        {/* SCORE DSIPLAY */}\n        <div className=\"col\">\n          <h6 data-testid=\"round\" className=\"text-primary\">\n            Round: {round}\n          </h6>\n          <h4>\n            <span data-testid=\"score1\" style={{ color: \"#f012be\" }}>\n              {score1}\n            </span>\n            <span className=\"text-primary\"> vs </span>\n            <span data-testid=\"score2\" className=\"text-success\">\n              {score2}\n            </span>\n          </h4>\n        </div>\n        {/* PLAYERS LEGEND */}\n        <div className=\"col align-self-end\">\n          <h6 data-testid=\"p1Name\" className=\"player row justify-content-end\">\n            {player1Name ? player1Name : \"Waiting...\"}\n            <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n          </h6>\n          <h6 data-testid=\"p2Name\" className=\"player row justify-content-end\">\n            {player2Name ? player2Name : \"Waiting...\"}\n            <div className=\"bg-success indicator rounded ml-2\" />\n          </h6>\n        </div>\n      </div>\n\n      <Grid\n        ref={ref}\n        game={game}\n        handleResultCb={handleResultCb}\n        opponentName={opponentName}\n        thisPlayerNum={thisPlayerNum}\n        gameOver={gameOver}\n        // client={client}\n      />\n\n      {/* RESULT */}\n      <h4 data-testid=\"resultMsg\" className=\"text-center text-warning mt-4\">\n        {resultMsg}\n      </h4>\n\n      {/* INFO */}\n      <h5 data-testid=\"info\" className=\"text-center text-warning mt-4\">\n        {info}\n      </h5>\n\n      <Button\n        disabled={disableReplayBtn}\n        id=\"replay\"\n        data-testid=\"replay\"\n        className=\"btn-warning w-100 mt-4\"\n        onClick={() => {\n          client.emit(\"replay\", { playerNum: thisPlayerNum });\n          replayCb(thisPlayerNum);\n        }}\n      >\n        Replay\n      </Button>\n      <Button id=\"quitBtn\" data-testid=\"quit\" className=\"btn btn-warning w-100 mt-3 \" onClick={quit}>\n        Quit\n      </Button>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport Dashboard from \"./Dashboard\";\nimport Game from \"./game/Game\";\nimport { SocketContext, socket } from \"../contexts/socket\";\nimport base from \"./../firebase\";\nimport { useLocation, useHistory } from \"react-router-dom\";\n\nexport default function Page() {\n  const history = useHistory();\n  const location = useLocation();\n  const { currentUser, logout } = useAuth();\n\n  const [data, setData] = useState({});\n  const [game, loadGame] = useState();\n  const [id] = useState(currentUser.uid);\n  const [userName] = useState(location.state?.userName || currentUser.displayName);\n\n  useEffect(() => {\n    const ref = base.syncState(id, {\n      context: {\n        setState: (data) => setData(data[\"data\"]),\n      },\n      state: \"data\",\n      defaultValue: { played: 0, won: 0 },\n      then: () => console.log(\"data synced\"),\n      onFailure: () => console.log(\"access denied\"),\n    });\n\n    return () => {\n      base.removeBinding(ref);\n    };\n  }, [id]);\n\n  const toggleGameModeCb = useCallback((mode) => {\n    loadGame(mode);\n  }, []);\n\n  function updateProfile() {\n    history.push(\"/update-profile\");\n  }\n\n  const incrementData = useCallback(\n    (key1, key2) => {\n      let updatedData = { ...data, [key1]: data[key1] + 1 };\n      if (key2) updatedData = { ...updatedData, [key2]: data[key2] + 1 };\n      base.post(id, {\n        data: updatedData,\n        then(err) {\n          if (err) console.log(err);\n        },\n      });\n    },\n    [data, id]\n  );\n\n  // function incrementData(key1, key2) {\n\n  // }\n\n  return (\n    <>\n      {game ? (\n        <SocketContext.Provider value={socket}>\n          <Game\n            userName={userName}\n            game={game}\n            incrementData={incrementData}\n            toggleGameModeCb={toggleGameModeCb}\n          />\n        </SocketContext.Provider>\n      ) : (\n        <Dashboard\n          toggleGameModeCb={toggleGameModeCb}\n          logout={logout}\n          updateProfile={updateProfile}\n          userName={userName}\n          played={data.played}\n          won={data.won}\n        />\n      )}\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function UpdateProfile() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { currentUser, updatePassword, updateEmail } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    const promises = [];\n    setLoading(true);\n    setError(\"\");\n\n    if (usernameRef.current.value !== currentUser.displayName) {\n      promises.push(currentUser.updateProfile({ displayName: usernameRef.current.value }));\n    }\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    Promise.all(promises)\n      .then(() => {\n        history.push(\"/\");\n      })\n      .catch(() => {\n        setError(\"Failed to update account\");\n        setLoading(false);\n      });\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Update Profile</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                id=\"usernameInput\"\n                type=\"text\"\n                ref={usernameRef}\n                required\n                defaultValue={currentUser.displayName}\n              />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required defaultValue={currentUser.email} />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordConfirmRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Button id=\"updateBtn\" disabled={loading} className=\"w-100\" type=\"submit\">\n              Update\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        <Link id=\"cancelLink\" to=\"/\">\n          Cancel\n        </Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function Signup() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { signup } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await signup(emailRef.current.value, passwordRef.current.value).then((cred) => {\n        cred.user.updateProfile({\n          displayName: usernameRef.current.value,\n        });\n      });\n      history.push(\"/\", { userName: usernameRef.current.value });\n    } catch {\n      setError(\"Failed to create an account\");\n      setLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Sign Up</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control id=\"nameInput\" type=\"text\" ref={usernameRef} required />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control id=\"emailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                id=\"passwordInput\"\n                type=\"password\"\n                placeholder=\"Minimum 6 characters\"\n                ref={passwordRef}\n                required\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                id=\"confirmPasswordInput\"\n                type=\"password\"\n                ref={passwordConfirmRef}\n                required\n              />\n            </Form.Group>\n            <Button id=\"signupBtn\" disabled={loading} className=\"w-100\" type=\"submit\">\n              Sign Up\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Already have an account?{\" \"}\n        <Link className=\"text-decoration-none\" to=\"/login\">\n          Log In\n        </Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const { login } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await login(emailRef.current.value, passwordRef.current.value);\n      history.push(\"/\");\n    } catch {\n      setLoading(false);\n      setError(\"Failed to log in\");\n    }\n  }\n\n  return (\n    <>\n      <h1 data-testid=\"title\" className=\"title text-center text-primary\">\n        Connect Four\n      </h1>\n      <Card className=\"box\">\n        <Card.Body>\n          {error && (\n            <Alert id=\"error\" variant=\"danger\">\n              {error}\n            </Alert>\n          )}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control id=\"emailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control id=\"passwordInput\" type=\"password\" ref={passwordRef} required />\n            </Form.Group>\n            <Button id=\"loginBtn\" disabled={loading} className=\"btn-warning w-100\" type=\"submit\">\n              Log In\n            </Button>\n          </Form>\n          <div className=\"w-100 text-center mt-3\">\n            <Link className=\"text-decoration-none\" to=\"/forgot-password\">\n              Forgot Password?\n            </Link>\n          </div>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Need an account?{\" \"}\n        <Link id=\"signupLink\" className=\"text-decoration-none\" to=\"/signup\">\n          Sign Up\n        </Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link } from \"react-router-dom\";\n\nexport default function ForgotPassword() {\n  const emailRef = useRef();\n  const { resetPassword } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setMessage(\"\");\n      setError(\"\");\n      setLoading(true);\n      await resetPassword(emailRef.current.value);\n      setMessage(\"Check your inbox for further instructions\");\n    } catch {\n      setError(\"Failed to reset password\");\n    }\n\n    setLoading(false);\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Password Reset</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          {message && <Alert variant=\"success\">{message}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\n              Reset Password\n            </Button>\n          </Form>\n          <div className=\"w-100 text-center mt-3\">\n            <Link to=\"/login\">Login</Link>\n          </div>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Need an account? <Link to=\"/signup\">Sign Up</Link>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PrivateRoute from \"./components/auth/PrivateRoute\";\nimport Page from \"./components/Page\";\nimport UpdateProfile from \"./components/auth/UpdateProfile\";\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\nimport ForgotPassword from \"./components/auth/ForgotPassword\";\nimport \"./app.css\";\n\nexport default function App() {\n  return (\n    <Container\n      className=\"d-flex align-items-center justify-content-center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <div className=\"w-100\" style={{ maxWidth: \"400px\", minWidth: \"400px\" }}>\n        <Router>\n          <AuthProvider>\n            <Switch>\n              <PrivateRoute exact path=\"/\" component={Page} />\n              <PrivateRoute path=\"/update-profile\" component={UpdateProfile} />\n              <Route path=\"/signup\" component={Signup} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/forgot-password\" component={ForgotPassword} />\n            </Switch>\n          </AuthProvider>\n        </Router>\n      </div>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"firebase/auth\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}