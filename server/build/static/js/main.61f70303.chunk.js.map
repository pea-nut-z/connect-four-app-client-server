{"version":3,"sources":["firebase.js","contexts/AuthContext.js","components/auth/PrivateRoute.js","components/Dashboard.js","components/game/SquareGrid.js","components/game/help.js","contexts/socket.js","components/game/Grid.js","components/game/Game.js","components/Page.js","components/auth/UpdateProfile.js","components/auth/Signup.js","components/auth/Login.js","components/auth/ForgotPassword.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","appId","auth","window","location","hostname","REACT_APP_TEST","database","useEmulator","disableWarnings","base","Rebase","createClass","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","PrivateRoute","Component","component","rest","render","props","to","Dashboard","toggleGameMode","updateProfile","userName","played","won","history","useHistory","error","setError","a","push","Card","className","Body","id","Alert","variant","Button","onClick","SquareGrid","colIdx","handleMove","data-testid","getRowChart","grid","numOfCol","length","maxRowIdx","rowChart","i","checkResult","row","col","rMins","rPlus","cMins","cPlus","up_down","left_right","upLeft_downRight","upRight_downLeft","up","down","left","right","upLeft","downRight","upRight","downLeft","some","count","includes","alphabeta","numOfCols","depth","isMaximizingPlayer","result","undefined","console","log","bestMove","bestDepth","Infinity","bestScore","c","r","depthAndScore","moveDepth","moveScore","SocketContext","socket","socketio","connect","forceNew","Grid","forwardRef","ref","game","initialGrid","handleResult","opponent","currentPlayerNum","blankGrid","JSON","parse","stringify","setGrid","setRowChart","gameOver","setGameOver","ready","toggleReady","thisTurn","endThisTurn","currentPlayerColor","opponentPlayerColor","client","useImperativeHandle","resetGrid","toggleGameOver","boolean","newGrid","slice","newRowChart","setTimeout","bestMoves","randomMove","Math","floor","random","performance","now","findAiMove","aiMoveRowIdx","aiMoveColIdx","rowValue","emit","on","rowIdx","map","rowIndex","style","color","Game","incrementData","player1Name","assignPlayer1Name","player2Name","assignPlayer2Name","setCurrentPlayerNum","currentPlayerName","setCurrentPlayerName","numOfRounds","setNumOfRounds","score1","setScore1","score2","setScore2","saveResult","resultMsg","displayResultMsg","info","displayInfo","replayButton","disableReplayButton","useRef","alert","player2","player1","playerIndex","name","num","disconnect","current","background","disabled","reload","Page","useLocation","uid","profileName","displayName","state","rows","cols","Array","fill","getGrid","localStorage","getItem","data","setData","loadGame","mode","syncState","context","setState","existingData","Object","keys","post","removeBinding","setItem","key1","key2","updatedData","UpdateProfile","usernameRef","emailRef","passwordRef","passwordConfirmRef","Form","onSubmit","e","preventDefault","promises","Promise","all","then","catch","Group","Label","Control","type","required","defaultValue","placeholder","Signup","cred","Login","ForgotPassword","message","setMessage","App","Container","minHeight","maxWidth","minWidth","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61f70303.chunk.js","sourcesContent":["import Rebase from \"re-base\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n});\n\nlet auth = app.auth();\n\n// USE EMULATORS IN TEST ENVIRONMENT\nif (window.location.hostname === \"localhost\" && process.env.REACT_APP_TEST) {\n  app.database().useEmulator(\"localhost\", 9000);\n  app.auth().useEmulator(\"http://localhost:9099\", { disableWarnings: false });\n}\n\nconst base = Rebase.createClass(app.database());\nexport { app, auth };\nexport default base;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { auth } from \"../firebase\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  function signup(email, password) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email);\n  }\n\n  function updateEmail(email) {\n    return currentUser.updateEmail(email);\n  }\n\n  function updatePassword(password) {\n    return currentUser.updatePassword(password);\n  }\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword,\n  };\n\n  return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n  const { currentUser } = useAuth();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />;\n      }}\n    ></Route>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Card, Button, Alert } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Dashboard({ toggleGameMode, logout, updateProfile, userName, played, won }) {\n  const history = useHistory();\n  const [error, setError] = useState(\"\");\n\n  async function handleLogout() {\n    setError(\"\");\n    try {\n      await logout();\n      history.push(\"/login\");\n    } catch {\n      setError(\"Failed to log out\");\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"box\">\n        <Card.Body>\n          <h2 id=\"userName\" className=\"text-center mb-4\">\n            Hello, {userName}!\n          </h2>\n          <div className=\"row\">\n            <h4 id=\"played\" className=\"col-6 text-center\">\n              🎮 ✖️ {played}\n            </h4>\n            <h4 id=\"won\" className=\"col-6 text-center\">\n              🏆 ✖️ {won}\n            </h4>\n          </div>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n\n          <Button\n            id=\"single\"\n            onClick={() => {\n              toggleGameMode(\"single\");\n            }}\n            className=\"btn btn-warning w-100 mt-3\"\n          >\n            Challenge Peanutbot\n          </Button>\n          <Button\n            id=\"multi\"\n            onClick={() => {\n              toggleGameMode(\"multi\");\n            }}\n            className=\"btn btn-warning w-100 mt-3\"\n          >\n            Play With A Friend\n          </Button>\n          <Button id=\"updateProfile\" className=\"btn btn-warning w-100 mt-3\" onClick={updateProfile}>\n            Update Profile\n          </Button>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        <Button\n          id=\"logoutBtn\"\n          variant=\"link\"\n          className=\"text-decoration-none\"\n          onClick={handleLogout}\n        >\n          Log Out\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function SquareGrid({ value, colIdx, handleMove }) {\n  return (\n    <div className=\"square bg-primary\" onClick={() => handleMove(colIdx)}>\n      <div\n        id={colIdx === 0 ? \"testCol0\" : colIdx === 2 ? \"testCol2\" : \"\"}\n        data-testid=\"square\"\n        className={`circle ${value ? \"p\" + value : \"\"}`}\n      ></div>\n    </div>\n  );\n}\n","// const times = [];    // for checking runtime in development\nconst DEFAULT_ROWS = 6;\nconst DEFAULT_COLS = 7;\nconst FULL_COLUMN = 9; // 9 represents a column is full because the max standard number of rows is 8\n\nexport const getGrid = function (rows = DEFAULT_ROWS, cols = DEFAULT_COLS) {\n  const grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(cols).fill(0));\n    i++;\n  }\n  return grid;\n};\n\nexport function getRowChart(grid) {\n  const numOfCol = grid[0].length;\n  const maxRowIdx = grid.length - 1;\n  const rowChart = [];\n  let i = 0;\n  while (i < numOfCol) {\n    rowChart.push(maxRowIdx);\n    i++;\n  }\n  return rowChart;\n}\n\nexport function checkResult(grid, row, col) {\n  const value = grid[row][col];\n  // INDEXES\n  let rMins = row - 1;\n  let rPlus = row + 1;\n  let cMins = col - 1;\n  let cPlus = col + 1;\n\n  // COUNTS\n  let up_down = 1;\n  let left_right = 1;\n  let upLeft_downRight = 1;\n  let upRight_downLeft = 1;\n\n  // FLAGS FOR COUNT INCREMENT\n  let up = true;\n  let down = true;\n  let left = true;\n  let right = true;\n  let upLeft = true;\n  let downRight = true;\n  let upRight = true;\n  let downLeft = true;\n\n  while (up || down || left || right || upLeft || downRight || upRight || downLeft) {\n    const counts = [up_down, left_right, upLeft_downRight, upRight_downLeft];\n    if (counts.some((count) => count >= 4)) return value;\n\n    if (up) {\n      grid[rMins]?.[col] === value ? up_down++ : (up = false);\n    }\n\n    if (down) {\n      grid[rPlus]?.[col] === value ? up_down++ : (down = false);\n    }\n\n    if (left) {\n      grid[row][cMins] === value ? left_right++ : (left = false);\n    }\n\n    if (right) {\n      grid[row][cPlus] === value ? left_right++ : (right = false);\n    }\n\n    if (upLeft) {\n      grid[rMins]?.[cMins] === value ? upLeft_downRight++ : (upLeft = false);\n    }\n\n    if (downRight) {\n      grid[rPlus]?.[cPlus] === value ? upLeft_downRight++ : (downRight = false);\n    }\n\n    if (upRight) {\n      grid[rMins]?.[cPlus] === value ? upRight_downLeft++ : (upRight = false);\n    }\n\n    if (downLeft) {\n      grid[rPlus]?.[cMins] === value ? upRight_downLeft++ : (downLeft = false);\n    }\n    rMins--;\n    rPlus++;\n    cMins--;\n    cPlus++;\n  }\n\n  const counts = [up_down, left_right, upLeft_downRight, upRight_downLeft];\n  if (counts.some((count) => count >= 4)) return value;\n  if (row === 0 && !grid[0].includes(0)) return \"Draw\";\n}\n\nexport function findAiMove(grid, rowChart) {\n  // const t0 = performance.now();\n  const maxDepth = 7;\n  const numOfCols = grid[0].length;\n  let bestMoves = [];\n  let bestDepth;\n  let bestScore = Infinity;\n\n  for (let c = 0; c < numOfCols; c++) {\n    if (rowChart[c] === FULL_COLUMN) continue;\n    let r = rowChart[c];\n    grid[r][c] = 2; // BOT'S MOVE\n    let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, maxDepth, true); // GET HUMAN'S MOVE\n    rowChart[c] = r;\n    grid[r][c] = 0;\n    let [moveDepth, moveScore] = depthAndScore;\n    if (\n      moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n      (moveScore === bestScore && moveDepth < bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n      (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n    ) {\n      bestMoves = [];\n      bestDepth = moveDepth;\n      bestScore = moveScore;\n      bestMoves.push([r, c]);\n    } else if (moveScore === bestScore && moveDepth === bestDepth) {\n      bestMoves.push([r, c]);\n    }\n  }\n  let randomMove = Math.floor(Math.random() * bestMoves.length);\n  const t1 = performance.now();\n\n  // TO GET AVERAGE RUNTIME\n  // console.log(`It took ${t1 - t0} milliseconds.`);\n  // const time = t1 - t0;\n  // times.push(time);\n  // const total = times.reduce((acc, time) => {\n  //   return acc + time;\n  // }, 0);\n  // const average = total / times.length;\n  // console.log({ average });\n\n  return bestMoves[randomMove];\n}\n\nfunction alphabeta(row, col, grid, numOfCols, rowChart, depth, isMaximizingPlayer) {\n  let result = checkResult(grid, row, col);\n  switch (result) {\n    case 1:\n      return [depth, 10];\n    case 2:\n      return [depth, -10];\n    case \"Draw\":\n      return [depth, 0];\n    case undefined:\n      if (depth === 0) return [depth, 0];\n      rowChart[col] = row === 0 ? 9 : row - 1;\n      break;\n    default:\n      console.log(\"uncaught result\", result);\n  }\n\n  if (isMaximizingPlayer) {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = -Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 1; // HUMAN'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, false); // GET BOT'S MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore > bestScore || // LOOK FOR HIGHEST SCORE (10)\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for max depth to speed up human's win\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for min depth to delay bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  } else {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 2; // BOT'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, true); // GET HUMAN's MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  }\n}\n","import socketio from \"socket.io-client\";\nimport React from \"react\";\nexport const SocketContext = React.createContext();\nexport const socket = socketio.connect(\"/\", { forceNew: true });\n","import React, { useState, useImperativeHandle, forwardRef, useEffect, useContext } from \"react\";\nimport SquareGrid from \"./SquareGrid\";\nimport { getRowChart, checkResult, findAiMove } from \"./help\";\nimport { SocketContext } from \"../../contexts/socket\";\nimport \"./game.css\";\n\nexport const Grid = forwardRef(\n  ({ game, initialGrid, handleResult, opponent, currentPlayerNum }, ref) => {\n    const blankGrid = JSON.parse(JSON.stringify(initialGrid));\n    const [grid, setGrid] = useState(blankGrid);\n    const [rowChart, setRowChart] = useState(getRowChart(initialGrid));\n    const [gameOver, setGameOver] = useState(true);\n    const [ready, toggleReady] = useState(true);\n    const [thisTurn, endThisTurn] = useState();\n    const currentPlayerColor = currentPlayerNum === 1 ? \"#f012be\" : \"#2ecc40\";\n    const opponentPlayerColor = currentPlayerNum === 1 ? \"#2ecc40\" : \"#f012be\";\n    const client = useContext(SocketContext);\n    useImperativeHandle(ref, () => ({\n      grid,\n      resetGrid,\n      toggleGameOver,\n    }));\n\n    const resetGrid = (result) => {\n      if (game === \"single\" && result === 1) {\n        toggleReady(true);\n      }\n      setGrid(blankGrid);\n      setRowChart(getRowChart(initialGrid));\n      setGameOver(false);\n      endThisTurn(!thisTurn);\n    };\n\n    const toggleGameOver = (boolean) => {\n      setGameOver(boolean);\n    };\n\n    useEffect(() => {\n      if (!gameOver && game === \"single\" && !ready) {\n        const newGrid = grid.slice();\n        const newRowChart = rowChart.slice();\n        setTimeout(() => {\n          const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid, newRowChart);\n          newGrid[aiMoveRowIdx][aiMoveColIdx] = 2;\n          setGrid(newGrid);\n          const result = checkResult(newGrid, aiMoveRowIdx, aiMoveColIdx);\n          if (result) {\n            setGameOver(true);\n            handleResult(result);\n          } else {\n            const rowValue = aiMoveRowIdx === 0 ? 9 : aiMoveRowIdx - 1;\n            newRowChart[aiMoveColIdx] = rowValue;\n            setRowChart(newRowChart);\n            toggleReady(!ready);\n          }\n        }, 500);\n      }\n\n      // to all clients except sender\n      if (game === \"multi\") {\n        toggleReady(!ready);\n        client.emit(\"update-grid\", { grid, rowChart, ready });\n        client.on(\"update-grid\", ({ grid, rowChart, ready }) => {\n          setGrid(grid);\n          toggleReady(ready);\n          setRowChart(rowChart);\n        });\n      }\n    }, [thisTurn]);\n\n    const handleMove = (colIdx) => {\n      if (!gameOver && ready) {\n        if (rowChart[colIdx] === 9) return; // 9 means full column; Max standard number of rows is 8\n        const newGrid = grid.slice();\n        const rowIdx = rowChart[colIdx];\n        newGrid[rowIdx][colIdx] = currentPlayerNum;\n        setGrid(newGrid);\n        const result = checkResult(newGrid, rowIdx, colIdx);\n        if (result) {\n          setGameOver(true);\n          handleResult(result);\n        } else {\n          const newRowChart = rowChart.slice();\n          const rowValue = rowIdx === 0 ? 9 : rowIdx - 1;\n          newRowChart[colIdx] = rowValue;\n          setRowChart(newRowChart);\n        }\n\n        game === \"single\" && toggleReady(false);\n        endThisTurn(!thisTurn);\n      }\n    };\n\n    return (\n      <>\n        {/* Grid */}\n        <div id=\"boarder\">\n          <div id=\"grid\" className=\"grid\">\n            {grid.map((row, rowIndex) => (\n              <div className=\"row\" key={rowIndex}>\n                {row.map((value, colIdx) => (\n                  <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* WHO's TURN */}\n        <h4\n          data-testid=\"turn\"\n          className=\"text-center mt-4\"\n          style={{ color: ready ? currentPlayerColor : opponentPlayerColor }}\n        >\n          {!opponent && \"Waiting for a player to join...\"}\n          {gameOver ? \"\" : ready ? \"Your turn\" : `Waiting for ${opponent}...`}\n        </h4>\n      </>\n    );\n  }\n);\n","import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\nimport { Grid } from \"./Grid\";\nimport { SocketContext } from \"../../contexts/socket\";\nimport \"./game.css\";\n\nexport default function Game({ userName, game, initialGrid, incrementData, toggleGameMode }) {\n  const [player1Name, assignPlayer1Name] = useState(\"\");\n  const [player2Name, assignPlayer2Name] = useState(\"\");\n  const [currentPlayerNum, setCurrentPlayerNum] = useState(1);\n  const [currentPlayerName, setCurrentPlayerName] = useState(\"\");\n  const [numOfRounds, setNumOfRounds] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [result, saveResult] = useState(\"\");\n  const [resultMsg, displayResultMsg] = useState(\"\");\n  const [info, displayInfo] = useState(\"\");\n  const [replayButton, disableReplayButton] = useState(false);\n\n  const opponent = currentPlayerNum === 1 ? player2Name : player1Name;\n  const client = useContext(SocketContext);\n  const ref = useRef();\n\n  useEffect(() => {\n    if (game === \"single\") {\n      assignPlayer1Name(userName);\n      assignPlayer2Name(\"Peanutbot\");\n    }\n\n    if (game === \"multi\") {\n      client.on(\"full-server\", () => {\n        toggleGameMode(\"\");\n        alert(\"Sorry, server is full.\");\n      });\n\n      client.emit(\"player-connecting\", { userName });\n\n      client.on(\"player-1-connected\", (player2) => {\n        assignPlayer1Name(userName);\n        setCurrentPlayerName(userName);\n        player2 && assignPlayer2Name(player2);\n      });\n\n      client.on(\"player-2-connected\", (player1) => {\n        assignPlayer2Name(userName);\n        setCurrentPlayerName(userName);\n        setCurrentPlayerNum(2);\n        assignPlayer1Name(player1);\n      });\n\n      client.on(\"player-has-joined\", ({ userName, playerIndex }) => {\n        playerIndex === 0 ? assignPlayer1Name(userName) : assignPlayer2Name(userName);\n        setScore1(0);\n        setScore2(0);\n      });\n\n      //   handle disconnect\n      client.on(\"player-disconnected\", ({ name, num }) => {\n        num === 0 ? assignPlayer1Name(\"\") : assignPlayer2Name(\"\");\n        displayInfo(`${name} left💨`);\n      });\n      return () => client.disconnect(currentPlayerName);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (game === \"multi\") {\n      // to all clients except sender\n      client.emit(\"update-result-display-and-rounds\", {\n        result,\n        currentPlayerName,\n        numOfRounds,\n      });\n      client.on(\"update-result-display-and-rounds\", ({ result, currentPlayerName, numOfRounds }) => {\n        setNumOfRounds(numOfRounds);\n        if (result) {\n          result === \"Draw\"\n            ? displayResultMsg(result + \"! 🤝\")\n            : displayResultMsg(\"😱 YOU LOST! 💩\");\n          ref.current.toggleGameOver(true);\n          displayInfo(`Waiting for ${currentPlayerName} to restart the game...`);\n          disableReplayButton(true);\n        } else {\n          displayResultMsg(\"\");\n          displayInfo(\"\");\n          disableReplayButton(false);\n          ref.current.toggleGameOver(false);\n        }\n      });\n\n      // to all clients\n      client.emit(\"update-score\", { result });\n      client.on(\"update-score\", ({ result }) => {\n        result && incrementData(\"played\");\n        result === 1 && setScore1(score1 + 1);\n        result === 2 && setScore2(score2 + 1);\n      });\n    }\n  }, [result, numOfRounds]);\n\n  useEffect(() => {\n    if (player1Name && player2Name) {\n      ref.current.toggleGameOver(false);\n    } else {\n      ref.current.toggleGameOver(true);\n    }\n  }, [player1Name, player2Name]);\n\n  function handleResult(result) {\n    if (game === \"multi\") {\n      if (result === \"Draw\") {\n        displayResultMsg(result + \"! 🤝\");\n      } else {\n        displayResultMsg(\"🥂 YOU WIN! 🎉\");\n        incrementData(\"won\");\n      }\n    } else {\n      if (result === 1) {\n        displayResultMsg(\"🥂 YOU WIN! 🎉\");\n        setScore1(score1 + 1);\n        incrementData(\"won\", \"played\");\n      }\n      if (result === 2) {\n        displayResultMsg(\"😱 YOU LOST! 💩\");\n        setScore2(score2 + 1);\n        incrementData(\"played\");\n      }\n      if (result === \"Draw\") {\n        displayResultMsg(result + \"! 🤝\");\n        incrementData(\"played\");\n      }\n    }\n    displayInfo(\"Click Replay ⬇️\");\n    saveResult(result);\n  }\n\n  function handleReplay() {\n    !result && incrementData(\"played\");\n    ref.current.resetGrid(result);\n    setNumOfRounds(numOfRounds + 1);\n    displayResultMsg(\"\");\n    displayInfo(\"\");\n    saveResult(\"\");\n  }\n\n  const handleQuit = () => {\n    const blankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n    if (!info && !result && !blankGrid) {\n      incrementData(\"played\");\n    }\n    if (game === \"multi\") window.location.reload(false); // when quit restart socket.\n    toggleGameMode(\"\");\n  };\n\n  return (\n    <div className=\"box\">\n      <div className=\"row\">\n        {/* SCORE DSIPLAY */}\n        <div className=\"col\">\n          <h6 data-testid=\"numOfRounds\" className=\"text-primary\">\n            Round: {numOfRounds}\n          </h6>\n          <h4>\n            <span data-testid=\"score1\" style={{ color: \"#f012be\" }}>\n              {score1}\n            </span>\n            <span className=\"text-primary\"> vs </span>\n            <span data-testid=\"score2\" className=\"text-success\">\n              {score2}\n            </span>\n          </h4>\n        </div>\n        {/* PLAYERS LEGEND */}\n        <div className=\"col align-self-end\">\n          <h6 data-testid=\"p1Name\" className=\"player row justify-content-end\">\n            {player1Name ? player1Name : \"Waiting...\"}\n            <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n          </h6>\n          <h6 data-testid=\"p2Name\" className=\"player row justify-content-end\">\n            {player2Name ? player2Name : \"Waiting...\"}\n            <div className=\"bg-success indicator rounded ml-2\" />\n          </h6>\n        </div>\n      </div>\n\n      <Grid\n        ref={ref}\n        game={game}\n        initialGrid={initialGrid}\n        handleResult={handleResult}\n        opponent={opponent}\n        currentPlayerNum={currentPlayerNum}\n      />\n\n      {/* RESULT */}\n      <h4 data-testid=\"resultMsg\" className=\"text-center text-warning mt-4\">\n        {resultMsg}\n      </h4>\n\n      {/* INFO */}\n      <h5 data-testid=\"info\" className=\"text-center text-warning mt-4\">\n        {info}\n      </h5>\n\n      <Button\n        disabled={replayButton}\n        id=\"replay\"\n        data-testid=\"replay\"\n        className=\"btn-warning w-100 mt-4\"\n        onClick={handleReplay}\n      >\n        Replay\n      </Button>\n      <Button\n        id=\"quitBtn\"\n        data-testid=\"quit\"\n        className=\"btn btn-warning w-100 mt-3 \"\n        onClick={handleQuit}\n      >\n        Quit\n      </Button>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport Dashboard from \"./Dashboard\";\nimport Game from \"./game/Game\";\nimport { getGrid } from \"./game/help\";\nimport { SocketContext, socket } from \"../contexts/socket\";\nimport base from \"./../firebase\";\nimport { useLocation, useHistory } from \"react-router-dom\";\n\nexport default function Page() {\n  const history = useHistory();\n  const location = useLocation();\n\n  // USER INFO\n  const { currentUser, logout } = useAuth();\n  const id = currentUser.uid;\n  const profileName = currentUser.displayName;\n  const userName = location.state?.userName || profileName;\n  const initialGrid = getGrid();\n  const [data, setData] = useState(JSON.parse(localStorage.getItem(id)) || {});\n  const [game, loadGame] = useState();\n\n  useEffect(() => {\n    const ref = base.syncState(id, {\n      context: {\n        setState: ({ data }) => setData({ ...data }),\n        state: { data },\n      },\n      state: \"data\",\n    });\n\n    const existingData = ref[\"context\"][\"state\"][\"data\"];\n    if (Object.keys(existingData).length === 0) {\n      base.post(id, {\n        data: { played: 0, won: 0 },\n      });\n      setData({ played: 0, won: 0 });\n    }\n\n    return () => {\n      base.removeBinding(ref);\n    };\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(id, JSON.stringify(data));\n  }, [data]);\n\n  function updateProfile() {\n    history.push(\"/update-profile\");\n  }\n\n  function toggleGameMode(mode) {\n    loadGame(mode);\n  }\n\n  function incrementData(key1, key2) {\n    let updatedData = { ...data, [key1]: data[key1] + 1 };\n    if (key2) updatedData = { ...updatedData, [key2]: data[key2] + 1 };\n    setData(updatedData);\n    base.post(id, {\n      data: updatedData,\n    });\n  }\n\n  return (\n    <>\n      {game ? (\n        <SocketContext.Provider value={socket}>\n          <Game\n            userName={userName}\n            game={game}\n            initialGrid={initialGrid}\n            incrementData={incrementData}\n            toggleGameMode={toggleGameMode}\n          />\n        </SocketContext.Provider>\n      ) : (\n        <Dashboard\n          toggleGameMode={toggleGameMode}\n          logout={logout}\n          updateProfile={updateProfile}\n          userName={userName}\n          played={data.played}\n          won={data.won}\n        />\n      )}\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function UpdateProfile() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { currentUser, updatePassword, updateEmail } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    const promises = [];\n    setLoading(true);\n    setError(\"\");\n\n    if (usernameRef.current.value !== currentUser.displayName) {\n      promises.push(currentUser.updateProfile({ displayName: usernameRef.current.value }));\n    }\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    Promise.all(promises)\n      .then(() => {\n        history.push(\"/\");\n      })\n      .catch(() => {\n        setError(\"Failed to update account\");\n        setLoading(false);\n      });\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Update Profile</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                id=\"usernameInput\"\n                type=\"text\"\n                ref={usernameRef}\n                required\n                defaultValue={currentUser.displayName}\n              />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required defaultValue={currentUser.email} />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordConfirmRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Button id=\"updateBtn\" disabled={loading} className=\"w-100\" type=\"submit\">\n              Update\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        <Link id=\"cancelLink\" to=\"/\">\n          Cancel\n        </Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function Signup() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { signup } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await signup(emailRef.current.value, passwordRef.current.value).then((cred) => {\n        cred.user.updateProfile({\n          displayName: usernameRef.current.value,\n        });\n      });\n      history.push(\"/\", { userName: usernameRef.current.value });\n    } catch {\n      setError(\"Failed to create an account\");\n      setLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Sign Up</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control id=\"nameInput\" type=\"text\" ref={usernameRef} required />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control id=\"emailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                id=\"passwordInput\"\n                type=\"password\"\n                placeholder=\"Minimum 6 characters\"\n                ref={passwordRef}\n                required\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                id=\"confirmPasswordInput\"\n                type=\"password\"\n                ref={passwordConfirmRef}\n                required\n              />\n            </Form.Group>\n            <Button id=\"signupBtn\" disabled={loading} className=\"w-100\" type=\"submit\">\n              Sign Up\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Already have an account?{\" \"}\n        <Link className=\"text-decoration-none\" to=\"/login\">\n          Log In\n        </Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const { login } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await login(emailRef.current.value, passwordRef.current.value);\n      history.push(\"/\");\n    } catch {\n      setLoading(false);\n      setError(\"Failed to log in\");\n    }\n  }\n\n  return (\n    <>\n      <h1 data-testid=\"title\" className=\"title text-center text-primary\">\n        Connect Four\n      </h1>\n      <Card className=\"box\">\n        <Card.Body>\n          {error && (\n            <Alert id=\"error\" variant=\"danger\">\n              {error}\n            </Alert>\n          )}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control id=\"emailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control id=\"passwordInput\" type=\"password\" ref={passwordRef} required />\n            </Form.Group>\n            <Button id=\"loginBtn\" disabled={loading} className=\"btn-warning w-100\" type=\"submit\">\n              Log In\n            </Button>\n          </Form>\n          <div className=\"w-100 text-center mt-3\">\n            <Link className=\"text-decoration-none\" to=\"/forgot-password\">\n              Forgot Password?\n            </Link>\n          </div>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Need an account?{\" \"}\n        <Link id=\"signupLink\" className=\"text-decoration-none\" to=\"/signup\">\n          Sign Up\n        </Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link } from \"react-router-dom\";\n\nexport default function ForgotPassword() {\n  const emailRef = useRef();\n  const { resetPassword } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setMessage(\"\");\n      setError(\"\");\n      setLoading(true);\n      await resetPassword(emailRef.current.value);\n      setMessage(\"Check your inbox for further instructions\");\n    } catch {\n      setError(\"Failed to reset password\");\n    }\n\n    setLoading(false);\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Password Reset</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          {message && <Alert variant=\"success\">{message}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\n              Reset Password\n            </Button>\n          </Form>\n          <div className=\"w-100 text-center mt-3\">\n            <Link to=\"/login\">Login</Link>\n          </div>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Need an account? <Link to=\"/signup\">Sign Up</Link>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PrivateRoute from \"./components/auth/PrivateRoute\";\nimport Page from \"./components/Page\";\nimport UpdateProfile from \"./components/auth/UpdateProfile\";\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\nimport ForgotPassword from \"./components/auth/ForgotPassword\";\nimport \"./app.css\";\n\nexport default function App() {\n  return (\n    <Container\n      className=\"d-flex align-items-center justify-content-center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <div className=\"w-100\" style={{ maxWidth: \"400px\", minWidth: \"400px\" }}>\n        <Router>\n          <AuthProvider>\n            <Switch>\n              <PrivateRoute exact path=\"/\" component={Page} />\n              <PrivateRoute path=\"/update-profile\" component={UpdateProfile} />\n              <Route path=\"/signup\" component={Signup} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/forgot-password\" component={ForgotPassword} />\n            </Switch>\n          </AuthProvider>\n        </Router>\n      </div>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}