{"version":3,"sources":["firebase.js","contexts/AuthContext.js","components/auth/PrivateRoute.js","contexts/socket.js","components/game/SquareGrid.js","components/game/help.js","components/game/Grid.js","components/game/Game.js","components/Dashboard.js","components/auth/UpdateProfile.js","components/auth/Signup.js","components/auth/Login.js","components/auth/ForgotPassword.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","appId","auth","window","location","hostname","REACT_APP_TEST","database","useEmulator","disableWarnings","Rebase","createClass","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","PrivateRoute","Component","component","rest","render","props","to","SocketContext","socket","socketio","connect","reconnection","forceNew","SquareGrid","colIdx","handleMove","className","onClick","id","data-testid","getGrid","rows","cols","grid","i","push","Array","fill","initialGrid","initialRowChart","numOfCol","length","maxRowIdx","rowChart","getRowChart","checkResult","row","col","rMins","rPlus","cMins","cPlus","up_down","left_right","upLeft_downRight","upRight_downLeft","up","down","left","right","upLeft","downRight","upRight","downLeft","some","count","includes","alphabeta","numOfCols","depth","isMaximizingPlayer","result","undefined","console","log","bestMove","bestDepth","Infinity","bestScore","c","r","depthAndScore","moveDepth","moveScore","Grid","forwardRef","ref","game","handleResultCb","opponentName","thisPlayerNum","gameOver","setGrid","setRowChart","ready","setReady","thisPlayerColor","useMemo","opponentPlayerColor","client","useImperativeHandle","resetGrid","setTimeout","handleAiMove","huGrid","huRowChart","newGrid","map","a","slice","newRowChart","bestMoves","Math","floor","random","findAiMove","aiMoveRowIdx","aiMoveColIdx","rowValue","newRowsAvailable","rowIdx","emit","playerNum","on","off","rowIndex","style","color","Game","userName","incrementData","toggleGameModeCb","player1Name","setPlayer1Name","player2Name","setPlayer2Name","round","setRound","score1","setScore1","score2","setScore2","setGameOver","resultMsg","setResultMsg","info","setInfo","disableReplayBtn","setDisableReplayBtn","setThisPlayerNum","thisPlayerName","setThisPlayerName","setResult","triggeredBy","setTriggeredBy","replay","setReplay","useRef","useCallback","replayCb","player1","player2","alert","playerName","score","isBlankGrid","JSON","stringify","current","PreRound","background","Button","disabled","Dashboard","history","useHistory","useLocation","data","setData","setGame","uid","state","displayName","error","setError","newData","snapshot","val","played","won","handleLogout","mode","key1","key2","updatedData","update","Card","Body","Alert","variant","UpdateProfile","usernameRef","emailRef","passwordRef","passwordConfirmRef","Form","onSubmit","e","preventDefault","promises","updateProfile","Promise","all","then","catch","Group","Label","Control","type","required","defaultValue","placeholder","Signup","cred","Login","ForgotPassword","message","setMessage","App","Container","minHeight","maxWidth","minWidth","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac98a451.chunk.js","sourcesContent":["import Rebase from \"re-base\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n});\n\nlet auth = app.auth();\n\n// USE EMULATORS IN TEST ENVIRONMENT\nif (window.location.hostname === \"localhost\" && process.env.REACT_APP_TEST) {\n  app.database().useEmulator(\"localhost\", 9000);\n  app.auth().useEmulator(\"http://localhost:9099\", { disableWarnings: false });\n}\n\nconst base = Rebase.createClass(app.database());\nexport { app, auth };\nexport default base;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { auth } from \"../firebase\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  function signup(email, password) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  }\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email);\n  }\n\n  function updateEmail(email) {\n    return currentUser.updateEmail(email);\n  }\n\n  function updatePassword(password) {\n    return currentUser.updatePassword(password);\n  }\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword,\n  };\n\n  return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n  const { currentUser } = useAuth();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />;\n      }}\n    ></Route>\n  );\n}\n","import socketio from \"socket.io-client\";\nimport React from \"react\";\nexport const SocketContext = React.createContext();\n// export const socket = socketio.connect(\"/\", { forceNew: true });\nexport const socket = socketio.connect(\"/\", {\n  reconnection: false,\n  forceNew: true,\n});\n","import React from \"react\";\n\nexport default function SquareGrid({ value, colIdx, handleMove }) {\n  return (\n    <div className=\"square bg-primary\" onClick={() => handleMove(colIdx)}>\n      <div\n        id={colIdx === 0 ? \"testCol0\" : colIdx === 2 ? \"testCol2\" : \"\"}\n        data-testid=\"square\"\n        className={`circle ${value ? \"p\" + value : \"\"}`}\n      ></div>\n    </div>\n  );\n}\n","// const times = [];    // for checking runtime in development\nconst DEFAULT_ROWS = 6;\nconst DEFAULT_COLS = 7;\nconst FULL_COLUMN = 9; // Because the max standard number of rows is 8\n\nconst getGrid = function (rows = DEFAULT_ROWS, cols = DEFAULT_COLS) {\n  const grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(cols).fill(0));\n    i++;\n  }\n  return grid;\n};\n\nexport const initialGrid = getGrid();\n\nfunction getRowChart(grid) {\n  const numOfCol = grid[0].length;\n  const maxRowIdx = grid.length - 1;\n  const rowChart = [];\n  let i = 0;\n  while (i < numOfCol) {\n    rowChart.push(maxRowIdx);\n    i++;\n  }\n  return rowChart;\n}\n\nexport const initialRowChart = getRowChart(getGrid());\n\nexport function checkResult(grid, row, col) {\n  const value = grid[row][col];\n  // INDEXES\n  let rMins = row - 1;\n  let rPlus = row + 1;\n  let cMins = col - 1;\n  let cPlus = col + 1;\n\n  // COUNTS\n  let up_down = 1;\n  let left_right = 1;\n  let upLeft_downRight = 1;\n  let upRight_downLeft = 1;\n\n  // FLAGS FOR COUNT INCREMENT\n  let up = true;\n  let down = true;\n  let left = true;\n  let right = true;\n  let upLeft = true;\n  let downRight = true;\n  let upRight = true;\n  let downLeft = true;\n\n  while (up || down || left || right || upLeft || downRight || upRight || downLeft) {\n    const counts = [up_down, left_right, upLeft_downRight, upRight_downLeft];\n    if (counts.some((count) => count >= 4)) return value;\n\n    if (up) {\n      grid[rMins]?.[col] === value ? up_down++ : (up = false);\n    }\n\n    if (down) {\n      grid[rPlus]?.[col] === value ? up_down++ : (down = false);\n    }\n\n    if (left) {\n      grid[row][cMins] === value ? left_right++ : (left = false);\n    }\n\n    if (right) {\n      grid[row][cPlus] === value ? left_right++ : (right = false);\n    }\n\n    if (upLeft) {\n      grid[rMins]?.[cMins] === value ? upLeft_downRight++ : (upLeft = false);\n    }\n\n    if (downRight) {\n      grid[rPlus]?.[cPlus] === value ? upLeft_downRight++ : (downRight = false);\n    }\n\n    if (upRight) {\n      grid[rMins]?.[cPlus] === value ? upRight_downLeft++ : (upRight = false);\n    }\n\n    if (downLeft) {\n      grid[rPlus]?.[cMins] === value ? upRight_downLeft++ : (downLeft = false);\n    }\n    rMins--;\n    rPlus++;\n    cMins--;\n    cPlus++;\n  }\n\n  const counts = [up_down, left_right, upLeft_downRight, upRight_downLeft];\n  if (counts.some((count) => count >= 4)) return value;\n  if (row === 0 && !grid[0].includes(0)) return \"Draw\";\n}\n\nexport function findAiMove(grid, rowChart) {\n  // const t0 = performance.now();\n  const maxDepth = 7;\n  const numOfCols = grid[0].length;\n  let bestMoves = [];\n  let bestDepth;\n  let bestScore = Infinity;\n\n  for (let c = 0; c < numOfCols; c++) {\n    if (rowChart[c] === FULL_COLUMN) continue;\n    let r = rowChart[c];\n    grid[r][c] = 2; // BOT'S MOVE\n    let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, maxDepth, true); // GET HUMAN'S MOVE\n    rowChart[c] = r;\n    grid[r][c] = 0;\n    let [moveDepth, moveScore] = depthAndScore;\n    if (\n      moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n      (moveScore === bestScore && moveDepth < bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n      (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n    ) {\n      bestMoves = [];\n      bestDepth = moveDepth;\n      bestScore = moveScore;\n      bestMoves.push([r, c]);\n    } else if (moveScore === bestScore && moveDepth === bestDepth) {\n      bestMoves.push([r, c]);\n    }\n  }\n  let randomMove = Math.floor(Math.random() * bestMoves.length);\n\n  // TO GET AVERAGE RUNTIME\n  // const t1 = performance.now();\n  // console.log(`It took ${t1 - t0} milliseconds.`);\n  // const time = t1 - t0;\n  // times.push(time);\n  // const total = times.reduce((acc, time) => {\n  //   return acc + time;\n  // }, 0);\n  // const average = total / times.length;\n  // console.log({ average });\n\n  return bestMoves[randomMove];\n}\n\nfunction alphabeta(row, col, grid, numOfCols, rowChart, depth, isMaximizingPlayer) {\n  let result = checkResult(grid, row, col);\n  switch (result) {\n    case 1:\n      return [depth, 10];\n    case 2:\n      return [depth, -10];\n    case \"Draw\":\n      return [depth, 0];\n    case undefined:\n      if (depth === 0) return [depth, 0];\n      rowChart[col] = row === 0 ? 9 : row - 1;\n      break;\n    default:\n      console.log(\"uncaught result\", result);\n  }\n\n  if (isMaximizingPlayer) {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = -Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 1; // HUMAN'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, false); // GET BOT'S MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore > bestScore || // LOOK FOR HIGHEST SCORE (10)\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for max depth to speed up human's win\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for min depth to delay bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  } else {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 2; // BOT'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, true); // GET HUMAN's MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  }\n}\n","import React, {\n  useState,\n  useImperativeHandle,\n  forwardRef,\n  useEffect,\n  useContext,\n  useMemo,\n} from \"react\";\nimport SquareGrid from \"./SquareGrid\";\nimport { checkResult, findAiMove, initialGrid, initialRowChart } from \"./help\";\nimport { SocketContext } from \"../../contexts/socket\";\nimport \"./game.css\";\n\nexport const Grid = forwardRef(\n  ({ game, handleResultCb, opponentName, thisPlayerNum, gameOver }, ref) => {\n    // const initialGrid = [\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [2, 2, 2, 0, 0, 0, 0],\n    //   [1, 1, 1, 0, 0, 0, 0],\n    // ];\n    // const initialRowChart = [3, 3, 3, 5, 5, 5, 5];\n\n    const [grid, setGrid] = useState(initialGrid);\n    const [rowChart, setRowChart] = useState(initialRowChart);\n    const [ready, setReady] = useState(game === \"single\" ? true : false);\n\n    const thisPlayerColor = useMemo(\n      () => (thisPlayerNum === 1 ? \"#f012be\" : \"#2ecc40\"),\n      [thisPlayerNum]\n    );\n\n    const opponentPlayerColor = useMemo(\n      () => (thisPlayerNum === 1 ? \"#2ecc40\" : \"#f012be\"),\n      [thisPlayerNum]\n    );\n\n    const client = useContext(SocketContext);\n    useImperativeHandle(ref, () => ({\n      grid,\n      resetGrid,\n    }));\n\n    const resetGrid = () => {\n      setGrid(initialGrid);\n      setRowChart(initialRowChart);\n      if (game === \"single\" && !ready) {\n        setTimeout(() => {\n          handleAiMove(initialGrid, initialRowChart);\n        }, 100);\n      }\n    };\n\n    const handleAiMove = (huGrid, huRowChart) => {\n      const newGrid = huGrid.map((a) => a.slice());\n      const newRowChart = huRowChart.slice();\n      const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid, newRowChart);\n      newGrid[aiMoveRowIdx][aiMoveColIdx] = 2;\n      setGrid(newGrid);\n      const result = checkResult(newGrid, aiMoveRowIdx, aiMoveColIdx);\n      if (result) {\n        handleResultCb(result);\n      } else {\n        const rowValue = aiMoveRowIdx === 0 ? 9 : aiMoveRowIdx - 1;\n        newRowChart[aiMoveColIdx] = rowValue;\n        setRowChart(newRowChart);\n        setReady(true);\n      }\n    };\n\n    const handleMove = (colIdx) => {\n      if (!gameOver && ready) {\n        if (rowChart[colIdx] === 9) return; // 9 means full column\n        let newRowsAvailable;\n        const newGrid = grid.map((a) => a.slice());\n        const rowIdx = rowChart[colIdx];\n        newGrid[rowIdx][colIdx] = thisPlayerNum;\n        setGrid(newGrid);\n        const result = checkResult(newGrid, rowIdx, colIdx);\n        if (result) {\n          client.emit(\"result\", { result, playerNum: thisPlayerNum });\n          handleResultCb(result, thisPlayerNum);\n        } else {\n          setReady(false);\n          newRowsAvailable = rowChart.slice();\n          const rowValue = rowIdx === 0 ? 9 : rowIdx - 1;\n          newRowsAvailable[colIdx] = rowValue;\n          setRowChart(newRowsAvailable);\n          if (game === \"single\") {\n            setTimeout(() => {\n              handleAiMove(newGrid, newRowsAvailable);\n            }, 100);\n          }\n        }\n        game === \"multi\" &&\n          client.emit(\"update-grid\", { grid: newGrid, rowChart: newRowsAvailable, result });\n      }\n    };\n\n    useEffect(() => {\n      if (game === \"multi\") {\n        client.emit(\"go-first\");\n\n        client.on(\"go-first\", () => {\n          setReady(true);\n          setGrid(initialGrid);\n          setRowChart(initialRowChart);\n        });\n      }\n\n      client.on(\"update-grid\", ({ grid, rowChart, result }) => {\n        if (!result) setReady(true);\n        setGrid(grid);\n        setRowChart(rowChart);\n      });\n      return () => {\n        client.off(\"go-first\");\n        client.off(\"update-grid\");\n      };\n    }, [client, game]);\n\n    return (\n      <>\n        {/* Grid */}\n        <div id=\"boarder\">\n          <div id=\"grid\" className=\"grid\">\n            {grid.map((row, rowIndex) => (\n              <div className=\"row\" key={rowIndex}>\n                {row.map((value, colIdx) => (\n                  <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* WHO's TURN */}\n        <h4\n          data-testid=\"turn\"\n          className=\"text-center mt-4\"\n          style={{ color: ready ? thisPlayerColor : opponentPlayerColor }}\n        >\n          {!opponentName && \"Waiting for a player to join...\"}\n          {gameOver ? \"\" : ready ? \"Your turn\" : `Waiting for ${opponentName}...`}\n        </h4>\n      </>\n    );\n  }\n);\n","import React, { useState, useEffect, useRef, useCallback, useContext, useMemo } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Grid } from \"./Grid\";\nimport { initialGrid } from \"../game/help\";\nimport { SocketContext } from \"../../contexts/socket\";\nimport \"./game.css\";\n\nexport default function Game({ userName, game, incrementData, toggleGameModeCb }) {\n  const [player1Name, setPlayer1Name] = useState(\"\");\n  const [player2Name, setPlayer2Name] = useState(\"\");\n  const [round, setRound] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [resultMsg, setResultMsg] = useState(\"\");\n  const [info, setInfo] = useState(\"\");\n  const [disableReplayBtn, setDisableReplayBtn] = useState(true);\n  const [thisPlayerNum, setThisPlayerNum] = useState(1);\n  const [thisPlayerName, setThisPlayerName] = useState(\"\");\n\n  const [result, setResult] = useState(0);\n  const [triggeredBy, setTriggeredBy] = useState(0);\n  const [replay, setReplay] = useState(false);\n\n  const opponentName = useMemo(\n    () => (thisPlayerNum === 1 ? player2Name : player1Name),\n    [player1Name, player2Name, thisPlayerNum]\n  );\n  const client = useContext(SocketContext);\n  const ref = useRef();\n\n  const handleResultCb = useCallback((result, playerNum) => {\n    setResult(result);\n    setTriggeredBy(playerNum);\n  }, []);\n\n  const replayCb = useCallback((playerNum) => {\n    setReplay(true);\n    setTriggeredBy(playerNum);\n  }, []);\n\n  const quit = () => {\n    const isBlankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n    if (!info && !isBlankGrid) incrementData(\"played\");\n    if (game === \"multi\") {\n      client.emit(\"player-disconnected\", { playerNum: thisPlayerNum });\n    }\n    // if (game === \"multi\" && !opponentName) {\n    //   client.disconnect();\n    // }\n    toggleGameModeCb(\"\");\n  };\n\n  useEffect(() => {\n    if (game === \"single\") {\n      setGameOver(false);\n      setDisableReplayBtn(false);\n      setPlayer1Name(userName);\n      setPlayer2Name(\"Peanutbot\");\n    }\n\n    if (game === \"multi\") {\n      client.emit(\"player-connecting\", { userName });\n      client.on(\"player-has-joined\", ({ player1, player2 }) => {\n        player1 && setPlayer1Name(player1);\n        player2 && setPlayer2Name(player2);\n        if (player1 && player2) {\n          setScore1(0);\n          setScore2(0);\n          setInfo(\"\");\n          setRound(1);\n          setGameOver(false);\n          setDisableReplayBtn(false);\n        }\n      });\n\n      client.on(\"full-server\", () => {\n        toggleGameModeCb(\"\");\n        alert(\"Sorry, server is full.\");\n      });\n\n      client.on(\"player-1-connected\", () => {\n        setThisPlayerName(userName);\n      });\n\n      client.on(\"player-2-connected\", () => {\n        setThisPlayerNum(2);\n        setThisPlayerName(userName);\n      });\n\n      client.on(\"player-disconnected\", ({ playerName, playerNum }) => {\n        playerNum === 1 ? setPlayer1Name(\"\") : setPlayer2Name(\"\");\n        setInfo(`${playerName} left💨`);\n        setResultMsg(\"\");\n        setGameOver(true);\n        setDisableReplayBtn(true);\n      });\n\n      return () => {\n        client.off(\"player-has-joined\");\n        client.off(\"full-server\", toggleGameModeCb);\n        client.off(\"player-1-connected\");\n        client.off(\"player-2-connected\");\n        client.off(\"player-disconnected\");\n      };\n    }\n  }, [client, game, userName, toggleGameModeCb]);\n\n  useEffect(() => {\n    if (game === \"multi\") {\n      client.on(\"result\", ({ result, playerNum }) => {\n        handleResultCb(result, playerNum);\n      });\n\n      client.on(\"replay\", ({ playerNum }) => {\n        replayCb(playerNum);\n      });\n    }\n\n    return () => {\n      client.off(\"result\", handleResultCb);\n      client.off(\"replay\", replayCb);\n    };\n  }, [client, game, handleResultCb, replayCb]);\n\n  useEffect(() => {\n    if (result) {\n      if (result === thisPlayerNum) {\n        setResultMsg(\"🥂 YOU WIN! 🎉\");\n        incrementData(\"won\");\n      } else if (result === \"Draw\") {\n        setResultMsg(result + \"! 🤝\");\n      } else {\n        setResultMsg(\"😱 YOU LOST! 💩\");\n      }\n\n      if (triggeredBy === thisPlayerNum || game === \"single\") {\n        setInfo(\"Click Replay ⬇️\");\n      }\n      if (game === \"multi\" && triggeredBy !== thisPlayerNum) {\n        setInfo(`Waiting for ${thisPlayerName} to restart the game...`);\n        setDisableReplayBtn(true);\n      }\n      result === thisPlayerNum ? incrementData(\"played\", \"won\") : incrementData(\"played\");\n      result === 1 && setScore1((score) => score + 1);\n      result === 2 && setScore2((score) => score + 1);\n      setGameOver(true);\n      setResult(0);\n      setTriggeredBy(0);\n    }\n  }, [result, game, incrementData, triggeredBy, thisPlayerName, thisPlayerNum]);\n\n  useEffect(() => {\n    if (replay) {\n      const isBlankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n      if (!gameOver && !isBlankGrid && triggeredBy === thisPlayerNum) incrementData(\"played\"); //replay in the middle of the game\n      ref.current.resetGrid();\n      setGameOver(false);\n      setRound((PreRound) => PreRound + 1);\n      setResultMsg(\"\");\n      setInfo(\"\");\n      setDisableReplayBtn(false);\n      setReplay(false);\n      setTriggeredBy(0);\n    }\n  }, [gameOver, incrementData, triggeredBy, replay, thisPlayerNum]);\n\n  return (\n    <div className=\"box\">\n      <div className=\"row\">\n        {/* SCORE DSIPLAY */}\n        <div className=\"col\">\n          <h6 data-testid=\"round\" className=\"text-primary\">\n            Round: {round}\n          </h6>\n          <h4>\n            <span data-testid=\"score1\" style={{ color: \"#f012be\" }}>\n              {score1}\n            </span>\n            <span className=\"text-primary\"> vs </span>\n            <span data-testid=\"score2\" className=\"text-success\">\n              {score2}\n            </span>\n          </h4>\n        </div>\n        {/* PLAYERS LEGEND */}\n        <div className=\"col align-self-end\">\n          <h6 data-testid=\"p1Name\" className=\"player row justify-content-end\">\n            {player1Name ? player1Name : \"Waiting...\"}\n            <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n          </h6>\n          <h6 data-testid=\"p2Name\" className=\"player row justify-content-end\">\n            {player2Name ? player2Name : \"Waiting...\"}\n            <div className=\"bg-success indicator rounded ml-2\" />\n          </h6>\n        </div>\n      </div>\n\n      <Grid\n        ref={ref}\n        game={game}\n        handleResultCb={handleResultCb}\n        opponentName={opponentName}\n        thisPlayerNum={thisPlayerNum}\n        gameOver={gameOver}\n        // client={client}\n      />\n\n      {/* RESULT */}\n      <h4 data-testid=\"resultMsg\" className=\"text-center text-warning mt-4\">\n        {resultMsg}\n      </h4>\n\n      {/* INFO */}\n      <h5 data-testid=\"info\" className=\"text-center text-warning mt-4\">\n        {info}\n      </h5>\n\n      <Button\n        disabled={disableReplayBtn}\n        id=\"replay\"\n        data-testid=\"replay\"\n        className=\"btn-warning w-100 mt-4\"\n        onClick={() => {\n          client.emit(\"replay\", { playerNum: thisPlayerNum });\n          replayCb(thisPlayerNum);\n        }}\n      >\n        Replay\n      </Button>\n      <Button id=\"quitBtn\" data-testid=\"quit\" className=\"btn btn-warning w-100 mt-3 \" onClick={quit}>\n        Quit\n      </Button>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Card, Button, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { SocketContext, socket } from \"../contexts/socket\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Game from \"./game/Game\";\nimport { app } from \"../firebase\";\n\nexport default function Dashboard() {\n  const history = useHistory();\n  const location = useLocation();\n  const { currentUser, logout } = useAuth();\n\n  const [data, setData] = useState();\n  const [game, setGame] = useState();\n  const [id] = useState(currentUser.uid);\n  const [userName] = useState(location.state?.userName || currentUser.displayName);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const ref = app.database().ref(id);\n    const newData = ref.on(\"value\", (snapshot) => {\n      snapshot.val() ? setData(snapshot.val()) : setData({ played: 0, won: 0 });\n    });\n    return () => {\n      ref.off(\"value\", newData);\n    };\n  }, [id]);\n\n  const handleLogout = async () => {\n    setError(\"\");\n    try {\n      await logout();\n      history.push(\"/\");\n    } catch {\n      setError(\"Failed to log out\");\n    }\n  };\n\n  const toggleGameModeCb = useCallback((mode) => {\n    setGame(mode);\n  }, []);\n\n  function updateProfile() {\n    history.push(\"/update-profile\");\n  }\n\n  const incrementData = useCallback(\n    (key1, key2) => {\n      let updatedData = { ...data, [key1]: data[key1] + 1 };\n      if (key2) updatedData = { ...updatedData, [key2]: data[key2] + 1 };\n      const ref = app.database().ref(id);\n      ref.update({ ...updatedData });\n    },\n    [data, id]\n  );\n\n  return (\n    <div>\n      {game ? (\n        <SocketContext.Provider value={socket}>\n          <Game\n            userName={userName}\n            game={game}\n            incrementData={incrementData}\n            toggleGameModeCb={toggleGameModeCb}\n          />\n        </SocketContext.Provider>\n      ) : (\n        <div>\n          <Card className=\"box\">\n            <Card.Body>\n              <h2 id=\"userName\" className=\"text-center mb-4\">\n                Hello, {userName}!\n              </h2>\n              <div className=\"row\">\n                <h4 id=\"played\" className=\"col-6 text-center\">\n                  🎮 ✖️ {data?.played !== undefined ? data.played : \"Loading...\"}\n                </h4>\n                <h4 id=\"won\" className=\"col-6 text-center\">\n                  🏆 ✖️ {data?.won !== undefined ? data.won : \"Loading...\"}\n                </h4>\n              </div>\n              {error && <Alert variant=\"danger\">{error}</Alert>}\n\n              <Button\n                id=\"single\"\n                onClick={() => {\n                  toggleGameModeCb(\"single\");\n                }}\n                className=\"btn btn-warning w-100 mt-3\"\n              >\n                Challenge Peanutbot\n              </Button>\n              <Button\n                id=\"multi\"\n                onClick={() => {\n                  toggleGameModeCb(\"multi\");\n                }}\n                className=\"btn btn-warning w-100 mt-3\"\n              >\n                Play With A Friend\n              </Button>\n              <Button\n                id=\"updateProfile\"\n                className=\"btn btn-warning w-100 mt-3\"\n                onClick={updateProfile}\n              >\n                Update Profile\n              </Button>\n            </Card.Body>\n          </Card>\n          <div className=\"w-100 text-center mt-2\">\n            <Button\n              id=\"logoutBtn\"\n              variant=\"link\"\n              className=\"text-decoration-none\"\n              onClick={handleLogout}\n            >\n              Log Out\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function UpdateProfile() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { currentUser, updatePassword, updateEmail } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    const promises = [];\n    setLoading(true);\n    setError(\"\");\n\n    if (usernameRef.current.value !== currentUser.displayName) {\n      promises.push(currentUser.updateProfile({ displayName: usernameRef.current.value }));\n    }\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    Promise.all(promises)\n      .then(() => {\n        history.push(\"/\");\n      })\n      .catch(() => {\n        setError(\"Failed to update account\");\n        setLoading(false);\n      });\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Update Profile</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                id=\"usernameInput\"\n                type=\"text\"\n                ref={usernameRef}\n                required\n                defaultValue={currentUser.displayName}\n              />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required defaultValue={currentUser.email} />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordConfirmRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Button id=\"updateBtn\" disabled={loading} className=\"w-100\" type=\"submit\">\n              Update\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        <Link id=\"cancelLink\" to=\"/\">\n          Cancel\n        </Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function Signup() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { signup } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await signup(emailRef.current.value, passwordRef.current.value).then((cred) => {\n        cred.user.updateProfile({\n          displayName: usernameRef.current.value,\n        });\n      });\n      history.push(\"/\", { userName: usernameRef.current.value });\n    } catch {\n      setError(\"Failed to create an account\");\n      setLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Sign Up</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control id=\"nameInput\" type=\"text\" ref={usernameRef} required />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control id=\"emailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                id=\"passwordInput\"\n                type=\"password\"\n                placeholder=\"Minimum 6 characters\"\n                ref={passwordRef}\n                required\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                id=\"confirmPasswordInput\"\n                type=\"password\"\n                ref={passwordConfirmRef}\n                required\n              />\n            </Form.Group>\n            <Button id=\"signupBtn\" disabled={loading} className=\"w-100\" type=\"submit\">\n              Sign Up\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Already have an account?{\" \"}\n        <Link className=\"text-decoration-none\" to=\"/login\">\n          Log In\n        </Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const { login } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await login(emailRef.current.value, passwordRef.current.value);\n      history.push(\"/\");\n    } catch {\n      setLoading(false);\n      setError(\"Failed to log in\");\n    }\n  }\n\n  return (\n    <>\n      <h1 data-testid=\"title\" className=\"title text-center text-primary\">\n        Connect Four\n      </h1>\n      <Card className=\"box\">\n        <Card.Body>\n          {error && (\n            <Alert id=\"error\" variant=\"danger\">\n              {error}\n            </Alert>\n          )}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control id=\"emailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control id=\"passwordInput\" type=\"password\" ref={passwordRef} required />\n            </Form.Group>\n            <Button id=\"loginBtn\" disabled={loading} className=\"btn-warning w-100\" type=\"submit\">\n              Log In\n            </Button>\n          </Form>\n          <div className=\"w-100 text-center mt-3\">\n            <Link className=\"text-decoration-none\" to=\"/forgot-password\">\n              Forgot Password?\n            </Link>\n          </div>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Need an account?{\" \"}\n        <Link id=\"signupLink\" className=\"text-decoration-none\" to=\"/signup\">\n          Sign Up\n        </Link>\n      </div>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { Link } from \"react-router-dom\";\n\nexport default function ForgotPassword() {\n  const emailRef = useRef();\n  const { resetPassword } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setMessage(\"\");\n      setError(\"\");\n      setLoading(true);\n      await resetPassword(emailRef.current.value);\n      setMessage(\"Check your inbox for further instructions\");\n    } catch {\n      setError(\"Failed to reset password\");\n    }\n\n    setLoading(false);\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Password Reset</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          {message && <Alert variant=\"success\">{message}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\n              Reset Password\n            </Button>\n          </Form>\n          <div className=\"w-100 text-center mt-3\">\n            <Link to=\"/login\">Login</Link>\n          </div>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        Need an account? <Link to=\"/signup\">Sign Up</Link>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PrivateRoute from \"./components/auth/PrivateRoute\";\nimport Dashboard from \"./components/Dashboard\";\nimport UpdateProfile from \"./components/auth/UpdateProfile\";\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\nimport ForgotPassword from \"./components/auth/ForgotPassword\";\nimport \"./app.css\";\n\nexport default function App() {\n  return (\n    <Container\n      className=\"d-flex align-items-center justify-content-center\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <div className=\"w-100\" style={{ maxWidth: \"400px\", minWidth: \"400px\" }}>\n        <Router>\n          <AuthProvider>\n            <Switch>\n              <PrivateRoute exact path=\"/\" component={Dashboard} />\n              <PrivateRoute path=\"/update-profile\" component={UpdateProfile} />\n              <Route path=\"/signup\" component={Signup} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/forgot-password\" component={ForgotPassword} />\n            </Switch>\n          </AuthProvider>\n        </Router>\n      </div>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"firebase/auth\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}