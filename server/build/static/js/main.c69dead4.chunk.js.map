{"version":3,"sources":["firebase.js","contexts/AuthContext.js","auth/PrivateRoute.js","UI/CustomButton.js","contexts/socket.js","UI/Square.js","helper.js","screen/Grid.js","screen/Game.js","screen/Dashboard.js","UI/CustomLink.js","UI/SubHeader.js","auth/UpdateProfile.js","auth/Signup.js","auth/Login.js","auth/ForgotPassword.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","appId","auth","window","location","hostname","database","useEmulator","disableWarnings","Rebase","createClass","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","PrivateRoute","Component","component","rest","id","setId","data","setData","incrementData","useCallback","key1","key2","updatedData","ref","update","newData","uid","on","snapshot","val","played","won","error","console","off","render","props","to","CustomButton","testid","link","text","disabled","type","func","funcArgu","Button","className","data-testid","variant","onClick","SocketContext","socket","socketio","connect","reconnection","forceNew","Square","colIdx","handleMove","getGrid","rows","cols","grid","i","push","Array","fill","initialGrid","initialRowIndex","numOfCol","length","maxRowIdx","rowChart","getRowIndex","checkResult","row","col","rMins","rPlus","cMins","cPlus","up_down","left_right","upLeft_downRight","upRight_downLeft","up","down","left","right","upLeft","downRight","upRight","downLeft","some","count","includes","alphabeta","numOfCols","depth","isMaximizingPlayer","undefined","bestMove","bestDepth","Infinity","bestScore","c","r","depthAndScore","moveDepth","moveScore","Grid","forwardRef","game","handleResultCb","opponentName","thisPlayerNum","gameOver","setGrid","setRowChart","ready","setReady","thisPlayerColor","useMemo","opponentPlayerColor","client","useImperativeHandle","resetGrid","setTimeout","handleAiMove","huGrid","huRowChart","newGrid","map","a","slice","newRowChart","bestMoves","Math","floor","random","findAiMove","aiMoveRowIdx","aiMoveColIdx","result","rowValue","newRowsAvailable","rowIdx","emit","playerNum","rowIndex","style","color","Game","userName","toggleGameModeCb","player1Name","setPlayer1Name","player2Name","setPlayer2Name","round","setRound","score1","setScore1","score2","setScore2","setGameOver","resultMsg","setResultMsg","info","setInfo","disableReplayBtn","setDisableReplayBtn","setThisPlayerNum","thisPlayerName","setThisPlayerName","setResult","triggeredBy","setTriggeredBy","replay","setReplay","useRef","replayCb","player1","player2","alert","playerName","score","isBlankGrid","JSON","stringify","current","PreRound","Dashboard","history","useHistory","useLocation","setGame","state","displayName","setError","handleLogout","mode","Card","Body","Alert","CustomLink","moreText","SubHeader","UpdateProfile","usernameRef","emailRef","passwordRef","passwordConfirmRef","Form","onSubmit","e","preventDefault","promises","updateProfile","Promise","all","then","catch","Group","Label","Control","required","defaultValue","placeholder","Signup","cred","Login","ForgotPassword","message","setMessage","App","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c69dead4.chunk.js","sourcesContent":["import Rebase from \"re-base\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n});\n\nlet auth = app.auth();\n\n// USE EMULATORS IN TEST ENVIRONMENT\nif (window.location.hostname === \"localhost\" && process.env.REACT_APP_TEST) {\n  app.database().useEmulator(\"localhost\", 9000);\n  app.auth().useEmulator(\"http://localhost:9099\", { disableWarnings: false });\n}\n\nconst base = Rebase.createClass(app.database());\nexport { app, auth };\nexport default base;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { auth } from \"../firebase\";\n\nexport const AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const signup = (email, password) => auth.createUserWithEmailAndPassword(email, password);\n  const login = (email, password) => auth.signInWithEmailAndPassword(email, password);\n  const logout = () => auth.signOut();\n  const resetPassword = (email) => auth.sendPasswordResetEmail(email);\n  const updateEmail = (email) => currentUser.updateEmail(email);\n  const updatePassword = (password) => currentUser.updatePassword(password);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword,\n  };\n  return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { app } from \"../firebase\";\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n  const { currentUser, logout } = useAuth();\n  const [id, setId] = useState();\n  const [data, setData] = useState();\n\n  const incrementData = useCallback(\n    (key1, key2) => {\n      let updatedData = { ...data, [key1]: data[key1] + 1 };\n      if (key2) updatedData = { ...updatedData, [key2]: data[key2] + 1 };\n      const ref = app.database().ref(id);\n      ref.update({ ...updatedData });\n    },\n    [data, id]\n  );\n\n  useEffect(() => {\n    let ref;\n    let newData;\n    if (currentUser) {\n      const uid = currentUser.uid;\n      setId(uid);\n      ref = app.database().ref(uid);\n      newData = ref.on(\n        \"value\",\n        (snapshot) => {\n          snapshot.val() ? setData(snapshot.val()) : setData({ played: 0, won: 0 });\n        },\n        (error) => {\n          console.error(error);\n        }\n      );\n    }\n    return () => {\n      if (currentUser) {\n        ref.off(\"value\", newData);\n      }\n    };\n  }, [currentUser]);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return currentUser ? (\n          <Component\n            {...props}\n            currentUser={currentUser}\n            data={data}\n            incrementData={incrementData}\n            logout={logout}\n          />\n        ) : (\n          <Redirect to=\"/login\" />\n        );\n      }}\n    ></Route>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nexport default function CustomButton({ testid, link, text, disabled, type, func, funcArgu }) {\n  return (\n    <Button\n      className={`btn w-100 mt-3 text-center ${link ? \"text-decoration-none\" : \"btn btn-warning \"}`}\n      data-testid={testid}\n      variant={link ? \"link\" : \"warning\"}\n      disabled={disabled}\n      type={type}\n      onClick={() => type === \"button\" && func(funcArgu)}\n    >\n      {text}\n    </Button>\n  );\n}\n","import socketio from \"socket.io-client\";\nimport React from \"react\";\nexport const SocketContext = React.createContext();\nexport const socket = socketio.connect(\"/\", {\n  reconnection: false,\n  forceNew: true,\n});\n","import React from \"react\";\n\nexport default function Square({ value, colIdx, handleMove }) {\n  return (\n    <div className=\"square bg-primary\" onClick={() => handleMove(colIdx)}>\n      <div\n        // id={colIdx === 0 ? \"testCol0\" : colIdx === 2 ? \"testCol2\" : \"\"}\n        data-testid={colIdx}\n        className={`circle ${value ? \"p\" + value : \"\"}`}\n      ></div>\n    </div>\n  );\n}\n","// const times = [];    // for checking runtime in development\nconst DEFAULT_ROWS = 6;\nconst DEFAULT_COLS = 7;\nconst FULL_COLUMN = 9; // Because the max standard number of rows is 8\n\nexport const getGrid = (rows = DEFAULT_ROWS, cols = DEFAULT_COLS) => {\n  const grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(cols).fill(0));\n    i++;\n  }\n  return grid;\n};\n\nexport const initialGrid = getGrid();\n\nexport const getRowIndex = (grid) => {\n  const numOfCol = grid[0].length;\n  const maxRowIdx = grid.length - 1;\n  const rowChart = [];\n  let i = 0;\n  while (i < numOfCol) {\n    rowChart.push(maxRowIdx);\n    i++;\n  }\n  return rowChart;\n};\n\nexport const initialRowIndex = getRowIndex(getGrid());\n\nexport const checkResult = (grid, row, col) => {\n  const value = grid[row][col];\n  // INDEXES\n  let rMins = row - 1;\n  let rPlus = row + 1;\n  let cMins = col - 1;\n  let cPlus = col + 1;\n\n  // COUNTS\n  let up_down = 1;\n  let left_right = 1;\n  let upLeft_downRight = 1;\n  let upRight_downLeft = 1;\n\n  // FLAGS FOR COUNT INCREMENT\n  let up = true;\n  let down = true;\n  let left = true;\n  let right = true;\n  let upLeft = true;\n  let downRight = true;\n  let upRight = true;\n  let downLeft = true;\n\n  while (up || down || left || right || upLeft || downRight || upRight || downLeft) {\n    const counts = [up_down, left_right, upLeft_downRight, upRight_downLeft];\n    if (counts.some((count) => count >= 4)) return value;\n    0;\n\n    if (up) {\n      grid[rMins]?.[col] === value ? up_down++ : (up = false);\n    }\n\n    if (down) {\n      grid[rPlus]?.[col] === value ? up_down++ : (down = false);\n    }\n\n    if (left) {\n      grid[row][cMins] === value ? left_right++ : (left = false);\n    }\n\n    if (right) {\n      grid[row][cPlus] === value ? left_right++ : (right = false);\n    }\n\n    if (upLeft) {\n      grid[rMins]?.[cMins] === value ? upLeft_downRight++ : (upLeft = false);\n    }\n\n    if (downRight) {\n      grid[rPlus]?.[cPlus] === value ? upLeft_downRight++ : (downRight = false);\n    }\n\n    if (upRight) {\n      grid[rMins]?.[cPlus] === value ? upRight_downLeft++ : (upRight = false);\n    }\n\n    if (downLeft) {\n      grid[rPlus]?.[cMins] === value ? upRight_downLeft++ : (downLeft = false);\n    }\n    rMins--;\n    rPlus++;\n    cMins--;\n    cPlus++;\n  }\n  if (row === 0 && !grid[0].includes(0)) return \"Draw\";\n};\n\nexport const findAiMove = (grid, rowChart) => {\n  // const t0 = performance.now();\n  const maxDepth = 7;\n  const numOfCols = grid[0].length;\n  let bestMoves = [];\n  let bestDepth;\n  let bestScore = Infinity;\n\n  for (let c = 0; c < numOfCols; c++) {\n    if (rowChart[c] === FULL_COLUMN) continue;\n    let r = rowChart[c];\n    grid[r][c] = 2; // BOT'S MOVE\n    let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, maxDepth, true); // GET HUMAN'S MOVE\n    rowChart[c] = r;\n    grid[r][c] = 0;\n    let [moveDepth, moveScore] = depthAndScore;\n    if (\n      moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n      (bestScore > 0 && moveScore === bestScore && moveDepth < bestDepth) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n      (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n    ) {\n      bestMoves = [];\n      bestDepth = moveDepth;\n      bestScore = moveScore;\n      bestMoves.push([r, c]);\n    } else if (moveScore === bestScore && moveDepth === bestDepth) {\n      bestMoves.push([r, c]);\n    }\n  }\n  let randomMove = Math.floor(Math.random() * bestMoves.length);\n\n  // TO GET AVERAGE RUNTIME\n  // const t1 = performance.now();\n  // console.log(`It took ${t1 - t0} milliseconds.`);\n  // const time = t1 - t0;\n  // times.push(time);\n  // const total = times.reduce((acc, time) => {\n  //   return acc + time;\n  // }, 0);\n  // const average = total / times.length;\n  // console.log({ average });\n  return bestMoves[randomMove];\n};\n\nconst alphabeta = (row, col, grid, numOfCols, rowChart, depth, isMaximizingPlayer) => {\n  let result = checkResult(grid, row, col);\n  switch (result) {\n    case 1:\n      return [depth, 10];\n    case 2:\n      return [depth, -10];\n    case \"Draw\":\n      return [depth, 0];\n    case undefined:\n      if (depth === 0) return [depth, 0];\n      rowChart[col] = row === 0 ? 9 : row - 1;\n      break;\n  }\n\n  if (isMaximizingPlayer) {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = -Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 1; // HUMAN'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, false); // GET BOT'S MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore > bestScore || // LOOK FOR HIGHEST SCORE (10)\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for max depth to speed up human's win\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for min depth to delay bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  } else {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 2; // BOT'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, true); // GET HUMAN's MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  }\n};\n","import React, {\n  useState,\n  useImperativeHandle,\n  forwardRef,\n  useEffect,\n  useContext,\n  useMemo,\n} from \"react\";\nimport Square from \"../UI/Square\";\nimport { checkResult, findAiMove, initialGrid, initialRowIndex } from \"../helper\";\nimport { SocketContext } from \"../contexts/socket\";\n\nexport const Grid = forwardRef(\n  ({ game, handleResultCb, opponentName, thisPlayerNum, gameOver }, ref) => {\n    // const initialGrid = [\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [2, 2, 2, 0, 0, 0, 0],\n    //   [1, 1, 1, 0, 0, 0, 0],\n    // ];\n    // const initialRowIndex = [3, 3, 3, 5, 5, 5, 5];\n\n    const [grid, setGrid] = useState(initialGrid);\n    const [rowChart, setRowChart] = useState(initialRowIndex);\n    const [ready, setReady] = useState(game === \"single\" ? true : false);\n\n    const thisPlayerColor = useMemo(\n      () => (thisPlayerNum === 1 ? \"#f012be\" : \"#2ecc40\"),\n      [thisPlayerNum]\n    );\n\n    const opponentPlayerColor = useMemo(\n      () => (thisPlayerNum === 1 ? \"#2ecc40\" : \"#f012be\"),\n      [thisPlayerNum]\n    );\n\n    const client = useContext(SocketContext);\n    useImperativeHandle(ref, () => ({\n      grid,\n      resetGrid,\n    }));\n\n    const resetGrid = () => {\n      setGrid(initialGrid);\n      setRowChart(initialRowIndex);\n      if (game === \"single\" && !ready) {\n        setTimeout(() => {\n          handleAiMove(initialGrid, initialRowIndex);\n        }, 100);\n      }\n    };\n\n    const handleAiMove = (huGrid, huRowChart) => {\n      const newGrid = huGrid.map((a) => a.slice());\n      const newRowChart = huRowChart.slice();\n      const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid, newRowChart);\n      newGrid[aiMoveRowIdx][aiMoveColIdx] = 2;\n      setGrid(newGrid);\n      const result = checkResult(newGrid, aiMoveRowIdx, aiMoveColIdx);\n      if (result) {\n        handleResultCb(result);\n      } else {\n        const rowValue = aiMoveRowIdx === 0 ? 9 : aiMoveRowIdx - 1;\n        newRowChart[aiMoveColIdx] = rowValue;\n        setRowChart(newRowChart);\n        setReady(true);\n      }\n    };\n\n    const handleMove = (colIdx) => {\n      if (!gameOver && ready) {\n        if (rowChart[colIdx] === 9) return; // 9 means full column\n        let newRowsAvailable;\n        const newGrid = grid.map((a) => a.slice());\n        const rowIdx = rowChart[colIdx];\n        newGrid[rowIdx][colIdx] = thisPlayerNum;\n        setGrid(newGrid);\n        const result = checkResult(newGrid, rowIdx, colIdx);\n        if (result) {\n          game === \"multi\" && client.emit(\"result\", { result, playerNum: thisPlayerNum });\n          handleResultCb(result, thisPlayerNum);\n        } else {\n          setReady(false);\n          newRowsAvailable = rowChart.slice();\n          const rowValue = rowIdx === 0 ? 9 : rowIdx - 1;\n          newRowsAvailable[colIdx] = rowValue;\n          setRowChart(newRowsAvailable);\n          if (game === \"single\") {\n            setTimeout(() => {\n              handleAiMove(newGrid, newRowsAvailable);\n            }, 100);\n          }\n        }\n        game === \"multi\" &&\n          client.emit(\"update-grid\", { grid: newGrid, rowChart: newRowsAvailable, result });\n      }\n    };\n\n    useEffect(() => {\n      if (game === \"multi\") {\n        client.emit(\"go-first\");\n\n        client.on(\"go-first\", () => {\n          setReady(true);\n          setGrid(initialGrid);\n          setRowChart(initialRowIndex);\n        });\n\n        client.on(\"update-grid\", ({ grid, rowChart, result }) => {\n          if (!result) setReady(true);\n          setGrid(grid);\n          setRowChart(rowChart);\n        });\n      }\n\n      return () => {\n        if (game === \"multi\") {\n          client.off(\"go-first\");\n          client.off(\"update-grid\");\n        }\n      };\n    }, [client, game]);\n\n    return (\n      <div>\n        {/* Grid */}\n        <div data-testid=\"grid\" className=\"grid\">\n          {grid.map((row, rowIndex) => (\n            <div className=\"row grid_row\" key={rowIndex}>\n              {row.map((value, colIdx) => (\n                <Square key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n              ))}\n            </div>\n          ))}\n        </div>\n\n        {/* WHO's TURN */}\n        <h4\n          data-testid=\"turn\"\n          className=\"text-center mt-4\"\n          style={{ color: ready ? thisPlayerColor : opponentPlayerColor }}\n        >\n          {!opponentName && \"Waiting for a player to join...\"}\n          {gameOver ? \"\" : ready ? \"Your turn\" : `Waiting for ${opponentName}...`}\n        </h4>\n      </div>\n    );\n  }\n);\n","import React, { useState, useEffect, useRef, useCallback, useContext, useMemo } from \"react\";\nimport CustomButton from \"../UI/CustomButton\";\nimport { Grid } from \"./Grid\";\nimport { initialGrid } from \"../helper\";\nimport { SocketContext } from \"../contexts/socket\";\n\nexport default function Game({ userName, game, incrementData, toggleGameModeCb }) {\n  const [player1Name, setPlayer1Name] = useState(game === \"single\" ? userName : null);\n  const [player2Name, setPlayer2Name] = useState(game === \"single\" ? \"Peanutbot\" : null);\n  const [round, setRound] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [gameOver, setGameOver] = useState(game === \"single\" ? false : true);\n  const [resultMsg, setResultMsg] = useState(\"\");\n  const [info, setInfo] = useState(\"\");\n  const [disableReplayBtn, setDisableReplayBtn] = useState(game === \"single\" ? false : true);\n  const [thisPlayerNum, setThisPlayerNum] = useState(1);\n  const [thisPlayerName, setThisPlayerName] = useState(\"\");\n\n  const [result, setResult] = useState(0);\n  const [triggeredBy, setTriggeredBy] = useState(0);\n  const [replay, setReplay] = useState(false);\n\n  const opponentName = useMemo(\n    () => (thisPlayerNum === 1 ? player2Name : player1Name),\n    [player1Name, player2Name, thisPlayerNum]\n  );\n  const client = useContext(SocketContext);\n  const ref = useRef();\n\n  const handleResultCb = useCallback((result, playerNum) => {\n    setResult(result);\n    setTriggeredBy(playerNum);\n  }, []);\n\n  const replayCb = useCallback((playerNum) => {\n    setReplay(true);\n    setTriggeredBy(playerNum);\n  }, []);\n\n  const quit = () => {\n    const isBlankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n    if (!info && !isBlankGrid) incrementData(\"played\");\n    if (game === \"multi\") {\n      client.emit(\"player-disconnected\", { playerNum: thisPlayerNum });\n    }\n    // if (game === \"multi\" && !opponentName) {\n    //   client.disconnect();\n    // }\n    toggleGameModeCb(\"\");\n  };\n\n  useEffect(() => {\n    if (game === \"multi\") {\n      client.emit(\"player-connecting\", { userName });\n      client.on(\"player-has-joined\", ({ player1, player2 }) => {\n        player1 && setPlayer1Name(player1);\n        player2 && setPlayer2Name(player2);\n        if (player1 && player2) {\n          setScore1(0);\n          setScore2(0);\n          setInfo(\"\");\n          setRound(1);\n          setGameOver(false);\n          setDisableReplayBtn(false);\n        }\n      });\n\n      client.on(\"full-server\", () => {\n        toggleGameModeCb(\"\");\n        alert(\"Sorry, server is full.\");\n      });\n\n      client.on(\"player-1-connected\", () => {\n        setThisPlayerName(userName);\n      });\n\n      client.on(\"player-2-connected\", () => {\n        setThisPlayerNum(2);\n        setThisPlayerName(userName);\n      });\n\n      client.on(\"player-disconnected\", ({ playerName, playerNum }) => {\n        playerNum === 1 ? setPlayer1Name(\"\") : setPlayer2Name(\"\");\n        setInfo(`${playerName} left💨`);\n        setResultMsg(\"\");\n        setGameOver(true);\n        setDisableReplayBtn(true);\n      });\n      return () => {\n        if (game === \"multi\") {\n          client.off(\"player-has-joined\");\n          client.off(\"full-server\", toggleGameModeCb);\n          client.off(\"player-1-connected\");\n          client.off(\"player-2-connected\");\n          client.off(\"player-disconnected\");\n        }\n      };\n    }\n  }, [client, game, userName, toggleGameModeCb]);\n\n  useEffect(() => {\n    if (game === \"multi\") {\n      client.on(\"result\", ({ result, playerNum }) => {\n        handleResultCb(result, playerNum);\n      });\n\n      client.on(\"replay\", ({ playerNum }) => {\n        replayCb(playerNum);\n      });\n    }\n\n    return () => {\n      if (game === \"multi\") {\n        client.off(\"result\", handleResultCb);\n        client.off(\"replay\", replayCb);\n      }\n    };\n  }, [client, game, handleResultCb, replayCb]);\n\n  useEffect(() => {\n    if (result) {\n      if (result === thisPlayerNum) {\n        setResultMsg(\"🥂 YOU WIN! 🎉\");\n        incrementData(\"won\");\n      } else if (result === \"Draw\") {\n        setResultMsg(result + \"! 🤝\");\n      } else {\n        setResultMsg(\"😱 YOU LOSE! 💩\");\n      }\n\n      if (triggeredBy === thisPlayerNum || game === \"single\") {\n        setInfo(\"Click Replay ⬇️\");\n      }\n      if (game === \"multi\" && triggeredBy !== thisPlayerNum) {\n        setInfo(`Waiting for ${opponentName} to restart the game...`);\n        setDisableReplayBtn(true);\n      }\n      result === thisPlayerNum ? incrementData(\"played\", \"won\") : incrementData(\"played\");\n      result === 1 && setScore1((score) => score + 1);\n      result === 2 && setScore2((score) => score + 1);\n      setGameOver(true);\n      setResult(0);\n      setTriggeredBy(0);\n    }\n  }, [result, game, incrementData, triggeredBy, thisPlayerName, thisPlayerNum]);\n\n  useEffect(() => {\n    if (replay) {\n      const isBlankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n      if (!gameOver && !isBlankGrid && triggeredBy === thisPlayerNum) incrementData(\"played\"); //replay in the middle of the game\n      ref.current.resetGrid();\n      setGameOver(false);\n      setRound((PreRound) => PreRound + 1);\n      setResultMsg(\"\");\n      setInfo(\"\");\n      setDisableReplayBtn(false);\n      setReplay(false);\n      setTriggeredBy(0);\n    }\n  }, [gameOver, incrementData, triggeredBy, replay, thisPlayerNum]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        {/* SCORE DSIPLAY */}\n        <div className=\"col\">\n          <h5 data-testid=\"round\" className=\"text-primary\">\n            Round: {round}\n          </h5>\n          <h5>\n            <span data-testid=\"score1\" className=\"pink_font\">\n              {score1}\n            </span>\n            <span className=\"text-primary\"> vs </span>\n            <span data-testid=\"score2\" className=\"text-success\">\n              {score2}\n            </span>\n          </h5>\n        </div>\n        {/* PLAYERS LEGEND */}\n        <div className=\"col align-self-end\">\n          <h5 data-testid=\"p1Name\" className=\"player row justify-content-end\">\n            {player1Name ? player1Name : \"Waiting...\"}\n            <div className=\"pink_background indicator rounded ml-2\" />\n          </h5>\n          <h5 data-testid=\"p2Name\" className=\"player row justify-content-end\">\n            {player2Name ? player2Name : \"Waiting...\"}\n            <div className=\"bg-success indicator rounded ml-2\" />\n          </h5>\n        </div>\n      </div>\n\n      <Grid\n        ref={ref}\n        game={game}\n        handleResultCb={handleResultCb}\n        opponentName={opponentName}\n        thisPlayerNum={thisPlayerNum}\n        gameOver={gameOver}\n      />\n\n      {/* RESULT */}\n      <h4 data-testid=\"resultMsg\" className=\"text-center text-warning mt-2\">\n        {resultMsg}\n      </h4>\n\n      {/* INFO */}\n      <h4 data-testid=\"info\" className=\"text-center text-warning mt-2\">\n        {info}\n      </h4>\n\n      {/* BUTTONS */}\n      <div\n        onClick={() => {\n          game === \"multi\" && client.emit(\"replay\", { playerNum: thisPlayerNum });\n        }}\n      >\n        <CustomButton\n          id=\"replay\"\n          testid=\"replay\"\n          text=\"Replay\"\n          type=\"button\"\n          func={replayCb}\n          funcArgu={thisPlayerNum}\n          disabled={disableReplayBtn}\n        />\n      </div>\n      <CustomButton testid=\"quit\" text=\"Quit\" type=\"button\" func={quit} />\n    </div>\n  );\n}\n","import React, { useState, useCallback } from \"react\";\nimport { Card, Alert } from \"react-bootstrap\";\nimport CustomButton from \"../UI/CustomButton\";\nimport { SocketContext, socket } from \"../contexts/socket\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Game from \"./Game\";\n\nexport default function Dashboard({ currentUser, data, incrementData, logout }) {\n  const history = useHistory();\n  const location = useLocation();\n  const [game, setGame] = useState();\n  const [userName] = useState(location.state?.userName || currentUser.displayName);\n  const [error, setError] = useState(\"\");\n\n  const handleLogout = async () => {\n    setError(\"\");\n    try {\n      await logout();\n      history.push(\"/\");\n    } catch {\n      setError(\"Failed to log out\");\n    }\n  };\n\n  const toggleGameModeCb = useCallback((mode) => {\n    setGame(mode);\n  }, []);\n\n  const updateProfile = () => {\n    history.push(\"/update-profile\");\n  };\n\n  return (\n    <main className=\"container\">\n      {game ? (\n        <SocketContext.Provider value={socket}>\n          <Game\n            userName={userName}\n            game={game}\n            incrementData={incrementData}\n            toggleGameModeCb={toggleGameModeCb}\n          />\n        </SocketContext.Provider>\n      ) : (\n        <div>\n          <Card className=\"box\">\n            <Card.Body>\n              <h2 data-testid=\"userName\" className=\"text-center mb-4\">\n                Hello, {userName}!\n              </h2>\n              <div className=\"row\">\n                <h2 data-testid=\"played\" className=\"col-6 text-center\">\n                  🎮 ✖️ {data?.played !== undefined ? data.played : \"Loading...\"}\n                </h2>\n                <h2 data-testid=\"won\" className=\"col-6 text-center\">\n                  🏆 ✖️ {data?.won !== undefined ? data.won : \"Loading...\"}\n                </h2>\n              </div>\n              {error && (\n                <Alert data-testid=\"error\" variant=\"danger\">\n                  {error}\n                </Alert>\n              )}\n              <CustomButton\n                testid=\"single\"\n                text=\"Challenge Peanutbot\"\n                type=\"button\"\n                func={toggleGameModeCb}\n                funcArgu=\"single\"\n              />\n              <CustomButton\n                testid=\"multi\"\n                text=\"Play With A Friend\"\n                type=\"button\"\n                func={toggleGameModeCb}\n                funcArgu=\"multi\"\n              />\n              <CustomButton\n                testid=\"goToUpdate\"\n                text=\"Update Profile\"\n                type=\"button\"\n                func={updateProfile}\n              />\n            </Card.Body>\n          </Card>\n          <CustomButton\n            testid=\"logout\"\n            link={true}\n            text=\"Log Out\"\n            type=\"button\"\n            func={handleLogout}\n          />\n        </div>\n      )}\n    </main>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function CustomLink({ testid, text, moreText, to }) {\n  return (\n    <p data-testid=\"linkText\" className=\"text-center mt-2\">\n      {moreText}\n      <Link data-testid={testid} className=\"text-decoration-none\" to={to}>\n        {text}\n      </Link>\n    </p>\n  );\n}\n","import React from \"react\";\n\nexport default function SubHeader({ text }) {\n  return <h2 className=\"text-center mb-4\">{text}</h2>;\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Alert } from \"react-bootstrap\";\nimport { SubHeader, CustomButton, CustomLink } from \"../UI\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function UpdateProfile() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { currentUser, updatePassword, updateEmail } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    const promises = [];\n    setLoading(true);\n    setError(\"\");\n\n    if (usernameRef.current.value !== currentUser.displayName) {\n      promises.push(currentUser.updateProfile({ displayName: usernameRef.current.value }));\n    }\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    Promise.all(promises)\n      .then(() => {\n        history.push(\"/\");\n      })\n      .catch(() => {\n        setError(\"Failed to update account\");\n        setLoading(false);\n      });\n  }\n\n  return (\n    <div className=\"container\">\n      <Card>\n        <Card.Body>\n          <SubHeader text=\"Update Profile\" />\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                data-testid=\"updateUsernameInput\"\n                type=\"text\"\n                ref={usernameRef}\n                required\n                defaultValue={currentUser.displayName}\n              />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required defaultValue={currentUser.email} />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordConfirmRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <CustomButton testid=\"update\" text=\"Update\" disabled={loading} type=\"submit\" />\n          </Form>\n        </Card.Body>\n      </Card>\n      <CustomLink testid=\"cancel\" text=\"Cancel\" to=\"/\" />\n    </div>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Alert } from \"react-bootstrap\";\nimport { SubHeader, CustomButton, CustomLink } from \"../UI\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Signup() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { signup } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await signup(emailRef.current.value, passwordRef.current.value).then((cred) => {\n        cred.user.updateProfile({\n          displayName: usernameRef.current.value,\n        });\n      });\n      history.push(\"/\", { userName: usernameRef.current.value });\n    } catch {\n      setError(\"Failed to create an account\");\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <Card>\n        <Card.Body>\n          <SubHeader text=\"Sign Up\" />\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control data-testid=\"nameInput\" type=\"text\" ref={usernameRef} required />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control data-testid=\"emailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                data-testid=\"passwordInput\"\n                type=\"password\"\n                placeholder=\"Minimum 6 characters\"\n                ref={passwordRef}\n                required\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                data-testid=\"confirmPasswordInput\"\n                type=\"password\"\n                ref={passwordConfirmRef}\n                required\n              />\n            </Form.Group>\n            <CustomButton testid=\"signup\" text=\"Sign Up\" disabled={loading} type=\"submit\" />\n          </Form>\n        </Card.Body>\n      </Card>\n      <CustomLink text=\"Log In\" moreText=\"Already have an account? \" to=\"/login\" />\n    </div>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Alert } from \"react-bootstrap\";\nimport { CustomButton, CustomLink } from \"../UI\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const { login } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await login(emailRef.current.value, passwordRef.current.value);\n      history.push(\"/\");\n    } catch {\n      setLoading(false);\n      setError(\"Failed to log in\");\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <header data-testid=\"title\" className=\"title text-primary\">\n        Connect Four\n      </header>\n      <Card>\n        <Card.Body>\n          {error && (\n            <Alert data-testid=\"error\" variant=\"danger\">\n              {error}\n            </Alert>\n          )}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control data-testid=\"loginEmailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                data-testid=\"loginPasswordInput\"\n                type=\"password\"\n                ref={passwordRef}\n                required\n              />\n            </Form.Group>\n            <CustomButton testid=\"login\" text=\"Log In\" disabled={loading} type=\"submit\" />\n          </Form>\n          <CustomLink testid=\"forgotPassword\" text=\"Forgot Password?\" to=\"/forgot-password\" />\n        </Card.Body>\n      </Card>\n      <CustomLink testid=\"goToSignup\" text=\"Sign Up\" moreText=\"Need an account? \" to=\"/signup\" />\n    </div>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Alert } from \"react-bootstrap\";\nimport { SubHeader, CustomButton, CustomLink } from \"../UI\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nexport default function ForgotPassword() {\n  const emailRef = useRef();\n  const { resetPassword } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setMessage(\"\");\n      setError(\"\");\n      setLoading(true);\n      await resetPassword(emailRef.current.value);\n      setMessage(\"Check your inbox for further instructions\");\n    } catch {\n      setError(\"Failed to reset password\");\n    }\n\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"container\">\n      <Card>\n        <Card.Body>\n          <SubHeader text=\"Password Reset\" />\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          {message && <Alert variant=\"success\">{message}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <CustomButton text=\"Reset Password\" disabled={loading} type=\"submit\" />\n          </Form>\n          <CustomLink text=\"Login\" to=\"/login\" />\n        </Card.Body>\n      </Card>\n      <CustomLink text=\"Sign Up\" moreText=\"Need an account? \" to=\"/signup\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PrivateRoute from \"./auth/PrivateRoute\";\nimport Dashboard from \"./screen/Dashboard\";\nimport UpdateProfile from \"./auth/UpdateProfile\";\nimport Signup from \"./auth/Signup\";\nimport Login from \"./auth/Login\";\nimport ForgotPassword from \"./auth/ForgotPassword\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./app.css\";\n\nexport default function App() {\n  return (\n    <Router>\n      <AuthProvider>\n        <Switch>\n          <PrivateRoute exact path=\"/\" component={Dashboard} />\n          <PrivateRoute path=\"/update-profile\" component={UpdateProfile} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\n        </Switch>\n      </AuthProvider>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"firebase/auth\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}