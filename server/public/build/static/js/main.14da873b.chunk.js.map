{"version":3,"sources":["firebase.js","contexts/AuthContext.js","auth/PrivateRoute.js","UI/CustomButton.js","contexts/socket.js","game/Square.js","game/help.js","game/Grid.js","game/Game.js","game/Dashboard.js","UI/CustomLink.js","UI/SubHeader.js","auth/UpdateProfile.js","auth/Signup.js","auth/Login.js","auth/ForgotPassword.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","appId","auth","window","location","hostname","REACT_APP_TEST","database","useEmulator","disableWarnings","Rebase","createClass","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","PrivateRoute","Component","component","rest","render","props","to","CustomButton","id","testid","link","text","disabled","type","func","funcArgu","Button","className","data-testid","variant","onClick","SocketContext","socket","socketio","connect","reconnection","forceNew","Square","colIdx","handleMove","getGrid","rows","cols","grid","i","push","Array","fill","initialGrid","initialRowChart","numOfCol","length","maxRowIdx","rowChart","getRowChart","checkResult","row","col","rMins","rPlus","cMins","cPlus","up_down","left_right","upLeft_downRight","upRight_downLeft","up","down","left","right","upLeft","downRight","upRight","downLeft","some","count","includes","alphabeta","numOfCols","depth","isMaximizingPlayer","result","undefined","console","log","bestMove","bestDepth","Infinity","bestScore","c","r","depthAndScore","moveDepth","moveScore","Grid","forwardRef","ref","game","handleResultCb","opponentName","thisPlayerNum","gameOver","setGrid","setRowChart","ready","setReady","thisPlayerColor","useMemo","opponentPlayerColor","client","useImperativeHandle","resetGrid","setTimeout","handleAiMove","huGrid","huRowChart","newGrid","map","a","slice","newRowChart","bestMoves","Math","floor","random","findAiMove","aiMoveRowIdx","aiMoveColIdx","rowValue","newRowsAvailable","rowIdx","emit","playerNum","on","off","rowIndex","style","color","Game","userName","incrementData","toggleGameModeCb","player1Name","setPlayer1Name","player2Name","setPlayer2Name","round","setRound","score1","setScore1","score2","setScore2","setGameOver","resultMsg","setResultMsg","info","setInfo","disableReplayBtn","setDisableReplayBtn","setThisPlayerNum","thisPlayerName","setThisPlayerName","setResult","triggeredBy","setTriggeredBy","replay","setReplay","useRef","useCallback","replayCb","player1","player2","alert","playerName","score","isBlankGrid","JSON","stringify","current","PreRound","background","Dashboard","history","useHistory","useLocation","data","setData","setGame","uid","state","displayName","error","setError","newData","snapshot","val","played","won","handleLogout","mode","key1","key2","updatedData","update","Card","Body","Alert","CustomLink","moreText","SubHeader","UpdateProfile","usernameRef","emailRef","passwordRef","passwordConfirmRef","Form","onSubmit","e","preventDefault","promises","updateProfile","Promise","all","then","catch","Group","Label","Control","required","defaultValue","placeholder","Signup","cred","Login","ForgotPassword","message","setMessage","App","exact","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14da873b.chunk.js","sourcesContent":["import Rebase from \"re-base\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n});\n\nlet auth = app.auth();\n\n// USE EMULATORS IN TEST ENVIRONMENT\nif (window.location.hostname === \"localhost\" && process.env.REACT_APP_TEST) {\n  app.database().useEmulator(\"localhost\", 9000);\n  app.auth().useEmulator(\"http://localhost:9099\", { disableWarnings: false });\n}\n\nconst base = Rebase.createClass(app.database());\nexport { app, auth };\nexport default base;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { auth } from \"../firebase\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true);\n\n  const signup = (email, password) => auth.createUserWithEmailAndPassword(email, password);\n  const login = (email, password) => auth.signInWithEmailAndPassword(email, password);\n  const logout = () => auth.signOut();\n  const resetPassword = (email) => auth.sendPasswordResetEmail(email);\n  const updateEmail = (email) => currentUser.updateEmail(email);\n  const updatePassword = (password) => currentUser.updatePassword(password);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword,\n  };\n\n  return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n  const { currentUser } = useAuth();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />;\n      }}\n    ></Route>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nexport default function CustomButton({ id, testid, link, text, disabled, type, func, funcArgu }) {\n  return (\n    <Button\n      className={`w-100 mt-3 text-center ${link ? \"text-decoration-none\" : \"btn btn-warning \"}`}\n      id={id}\n      data-testid={testid}\n      variant={link ? \"link\" : \"warning\"}\n      disabled={disabled}\n      type={type}\n      onClick={() => type === \"button\" && func(funcArgu)}\n    >\n      {text}\n    </Button>\n  );\n}\n","import socketio from \"socket.io-client\";\nimport React from \"react\";\nexport const SocketContext = React.createContext();\nexport const socket = socketio.connect(\"/\", {\n  reconnection: false,\n  forceNew: true,\n});\n","import React from \"react\";\n\nexport default function Square({ value, colIdx, handleMove }) {\n  return (\n    <div className=\"square bg-primary\" onClick={() => handleMove(colIdx)}>\n      <div\n        id={colIdx === 0 ? \"testCol0\" : colIdx === 2 ? \"testCol2\" : \"\"}\n        data-testid=\"square\"\n        className={`circle ${value ? \"p\" + value : \"\"}`}\n      ></div>\n    </div>\n  );\n}\n","// const times = [];    // for checking runtime in development\nconst DEFAULT_ROWS = 6;\nconst DEFAULT_COLS = 7;\nconst FULL_COLUMN = 9; // Because the max standard number of rows is 8\n\nconst getGrid = function (rows = DEFAULT_ROWS, cols = DEFAULT_COLS) {\n  const grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(cols).fill(0));\n    i++;\n  }\n  return grid;\n};\n\nexport const initialGrid = getGrid();\n\nfunction getRowChart(grid) {\n  const numOfCol = grid[0].length;\n  const maxRowIdx = grid.length - 1;\n  const rowChart = [];\n  let i = 0;\n  while (i < numOfCol) {\n    rowChart.push(maxRowIdx);\n    i++;\n  }\n  return rowChart;\n}\n\nexport const initialRowChart = getRowChart(getGrid());\n\nexport function checkResult(grid, row, col) {\n  const value = grid[row][col];\n  // INDEXES\n  let rMins = row - 1;\n  let rPlus = row + 1;\n  let cMins = col - 1;\n  let cPlus = col + 1;\n\n  // COUNTS\n  let up_down = 1;\n  let left_right = 1;\n  let upLeft_downRight = 1;\n  let upRight_downLeft = 1;\n\n  // FLAGS FOR COUNT INCREMENT\n  let up = true;\n  let down = true;\n  let left = true;\n  let right = true;\n  let upLeft = true;\n  let downRight = true;\n  let upRight = true;\n  let downLeft = true;\n\n  while (up || down || left || right || upLeft || downRight || upRight || downLeft) {\n    const counts = [up_down, left_right, upLeft_downRight, upRight_downLeft];\n    if (counts.some((count) => count >= 4)) return value;\n\n    if (up) {\n      grid[rMins]?.[col] === value ? up_down++ : (up = false);\n    }\n\n    if (down) {\n      grid[rPlus]?.[col] === value ? up_down++ : (down = false);\n    }\n\n    if (left) {\n      grid[row][cMins] === value ? left_right++ : (left = false);\n    }\n\n    if (right) {\n      grid[row][cPlus] === value ? left_right++ : (right = false);\n    }\n\n    if (upLeft) {\n      grid[rMins]?.[cMins] === value ? upLeft_downRight++ : (upLeft = false);\n    }\n\n    if (downRight) {\n      grid[rPlus]?.[cPlus] === value ? upLeft_downRight++ : (downRight = false);\n    }\n\n    if (upRight) {\n      grid[rMins]?.[cPlus] === value ? upRight_downLeft++ : (upRight = false);\n    }\n\n    if (downLeft) {\n      grid[rPlus]?.[cMins] === value ? upRight_downLeft++ : (downLeft = false);\n    }\n    rMins--;\n    rPlus++;\n    cMins--;\n    cPlus++;\n  }\n\n  const counts = [up_down, left_right, upLeft_downRight, upRight_downLeft];\n  if (counts.some((count) => count >= 4)) return value;\n  if (row === 0 && !grid[0].includes(0)) return \"Draw\";\n}\n\nexport function findAiMove(grid, rowChart) {\n  // const t0 = performance.now();\n  const maxDepth = 7;\n  const numOfCols = grid[0].length;\n  let bestMoves = [];\n  let bestDepth;\n  let bestScore = Infinity;\n\n  for (let c = 0; c < numOfCols; c++) {\n    if (rowChart[c] === FULL_COLUMN) continue;\n    let r = rowChart[c];\n    grid[r][c] = 2; // BOT'S MOVE\n    let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, maxDepth, true); // GET HUMAN'S MOVE\n    rowChart[c] = r;\n    grid[r][c] = 0;\n    let [moveDepth, moveScore] = depthAndScore;\n    if (\n      moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n      (moveScore === bestScore && moveDepth < bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n      (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n    ) {\n      bestMoves = [];\n      bestDepth = moveDepth;\n      bestScore = moveScore;\n      bestMoves.push([r, c]);\n    } else if (moveScore === bestScore && moveDepth === bestDepth) {\n      bestMoves.push([r, c]);\n    }\n  }\n  let randomMove = Math.floor(Math.random() * bestMoves.length);\n\n  // TO GET AVERAGE RUNTIME\n  // const t1 = performance.now();\n  // console.log(`It took ${t1 - t0} milliseconds.`);\n  // const time = t1 - t0;\n  // times.push(time);\n  // const total = times.reduce((acc, time) => {\n  //   return acc + time;\n  // }, 0);\n  // const average = total / times.length;\n  // console.log({ average });\n\n  return bestMoves[randomMove];\n}\n\nfunction alphabeta(row, col, grid, numOfCols, rowChart, depth, isMaximizingPlayer) {\n  let result = checkResult(grid, row, col);\n  switch (result) {\n    case 1:\n      return [depth, 10];\n    case 2:\n      return [depth, -10];\n    case \"Draw\":\n      return [depth, 0];\n    case undefined:\n      if (depth === 0) return [depth, 0];\n      rowChart[col] = row === 0 ? 9 : row - 1;\n      break;\n    default:\n      console.log(\"uncaught result\", result);\n  }\n\n  if (isMaximizingPlayer) {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = -Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 1; // HUMAN'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, false); // GET BOT'S MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore > bestScore || // LOOK FOR HIGHEST SCORE (10)\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for max depth to speed up human's win\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for min depth to delay bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  } else {\n    let bestMove = [];\n    let bestDepth = Infinity;\n    let bestScore = Infinity;\n    for (let c = 0; c < numOfCols; c++) {\n      if (rowChart[c] === FULL_COLUMN) continue;\n      let r = rowChart[c];\n      grid[r][c] = 2; // BOT'S MOVE\n      let depthAndScore = alphabeta(r, c, grid, numOfCols, rowChart, depth - 1, true); // GET HUMAN's MOVE\n      rowChart[c] = r;\n      grid[r][c] = 0;\n      let [moveDepth, moveScore] = depthAndScore;\n      if (\n        moveScore < bestScore || // LOOK FOR LOWEST SCORE (-10)\n        (moveScore === bestScore && moveDepth < bestDepth && moveScore >= 0) || // POSITIVE SCORE - human is winning; look for min depth to delay human's win\n        (moveScore === bestScore && moveDepth > bestDepth && moveScore < 0) // NEGATIVE SCORE - bot is winning; look for max depth to speed up bot's win\n      ) {\n        bestDepth = moveDepth;\n        bestScore = moveScore;\n        bestMove = depthAndScore;\n      }\n    }\n    return bestMove;\n  }\n}\n","import React, {\n  useState,\n  useImperativeHandle,\n  forwardRef,\n  useEffect,\n  useContext,\n  useMemo,\n} from \"react\";\nimport Square from \"./Square\";\nimport { checkResult, findAiMove, initialGrid, initialRowChart } from \"./help\";\nimport { SocketContext } from \"../contexts/socket\";\n\nexport const Grid = forwardRef(\n  ({ game, handleResultCb, opponentName, thisPlayerNum, gameOver }, ref) => {\n    // const initialGrid = [\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [0, 0, 0, 0, 0, 0, 0],\n    //   [2, 2, 2, 0, 0, 0, 0],\n    //   [1, 1, 1, 0, 0, 0, 0],\n    // ];\n    // const initialRowChart = [3, 3, 3, 5, 5, 5, 5];\n\n    const [grid, setGrid] = useState(initialGrid);\n    const [rowChart, setRowChart] = useState(initialRowChart);\n    const [ready, setReady] = useState(game === \"single\" ? true : false);\n\n    const thisPlayerColor = useMemo(\n      () => (thisPlayerNum === 1 ? \"#f012be\" : \"#2ecc40\"),\n      [thisPlayerNum]\n    );\n\n    const opponentPlayerColor = useMemo(\n      () => (thisPlayerNum === 1 ? \"#2ecc40\" : \"#f012be\"),\n      [thisPlayerNum]\n    );\n\n    const client = useContext(SocketContext);\n    useImperativeHandle(ref, () => ({\n      grid,\n      resetGrid,\n    }));\n\n    const resetGrid = () => {\n      setGrid(initialGrid);\n      setRowChart(initialRowChart);\n      if (game === \"single\" && !ready) {\n        setTimeout(() => {\n          handleAiMove(initialGrid, initialRowChart);\n        }, 100);\n      }\n    };\n\n    const handleAiMove = (huGrid, huRowChart) => {\n      const newGrid = huGrid.map((a) => a.slice());\n      const newRowChart = huRowChart.slice();\n      const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid, newRowChart);\n      newGrid[aiMoveRowIdx][aiMoveColIdx] = 2;\n      setGrid(newGrid);\n      const result = checkResult(newGrid, aiMoveRowIdx, aiMoveColIdx);\n      if (result) {\n        handleResultCb(result);\n      } else {\n        const rowValue = aiMoveRowIdx === 0 ? 9 : aiMoveRowIdx - 1;\n        newRowChart[aiMoveColIdx] = rowValue;\n        setRowChart(newRowChart);\n        setReady(true);\n      }\n    };\n\n    const handleMove = (colIdx) => {\n      if (!gameOver && ready) {\n        if (rowChart[colIdx] === 9) return; // 9 means full column\n        let newRowsAvailable;\n        const newGrid = grid.map((a) => a.slice());\n        const rowIdx = rowChart[colIdx];\n        newGrid[rowIdx][colIdx] = thisPlayerNum;\n        setGrid(newGrid);\n        const result = checkResult(newGrid, rowIdx, colIdx);\n        if (result) {\n          client.emit(\"result\", { result, playerNum: thisPlayerNum });\n          handleResultCb(result, thisPlayerNum);\n        } else {\n          setReady(false);\n          newRowsAvailable = rowChart.slice();\n          const rowValue = rowIdx === 0 ? 9 : rowIdx - 1;\n          newRowsAvailable[colIdx] = rowValue;\n          setRowChart(newRowsAvailable);\n          if (game === \"single\") {\n            setTimeout(() => {\n              handleAiMove(newGrid, newRowsAvailable);\n            }, 100);\n          }\n        }\n        game === \"multi\" &&\n          client.emit(\"update-grid\", { grid: newGrid, rowChart: newRowsAvailable, result });\n      }\n    };\n\n    useEffect(() => {\n      if (game === \"multi\") {\n        client.emit(\"go-first\");\n\n        client.on(\"go-first\", () => {\n          setReady(true);\n          setGrid(initialGrid);\n          setRowChart(initialRowChart);\n        });\n      }\n\n      client.on(\"update-grid\", ({ grid, rowChart, result }) => {\n        if (!result) setReady(true);\n        setGrid(grid);\n        setRowChart(rowChart);\n      });\n      return () => {\n        client.off(\"go-first\");\n        client.off(\"update-grid\");\n      };\n    }, [client, game]);\n\n    return (\n      <div>\n        {/* Grid */}\n        <div id=\"grid\" className=\"grid\">\n          {grid.map((row, rowIndex) => (\n            <div className=\"row grid_row\" key={rowIndex}>\n              {row.map((value, colIdx) => (\n                <Square key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n              ))}\n            </div>\n          ))}\n        </div>\n\n        {/* WHO's TURN */}\n        <h4\n          data-testid=\"turn\"\n          className=\"text-center mt-4\"\n          style={{ color: ready ? thisPlayerColor : opponentPlayerColor }}\n        >\n          {!opponentName && \"Waiting for a player to join...\"}\n          {gameOver ? \"\" : ready ? \"Your turn\" : `Waiting for ${opponentName}...`}\n        </h4>\n      </div>\n    );\n  }\n);\n","import React, { useState, useEffect, useRef, useCallback, useContext, useMemo } from \"react\";\nimport CustomButton from \"../UI/CustomButton\";\nimport { Grid } from \"./Grid\";\nimport { initialGrid } from \"./help\";\nimport { SocketContext } from \"../contexts/socket\";\n\nexport default function Game({ userName, game, incrementData, toggleGameModeCb }) {\n  const [player1Name, setPlayer1Name] = useState(\"\");\n  const [player2Name, setPlayer2Name] = useState(\"\");\n  const [round, setRound] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [resultMsg, setResultMsg] = useState(\"\");\n  const [info, setInfo] = useState(\"\");\n  const [disableReplayBtn, setDisableReplayBtn] = useState(true);\n  const [thisPlayerNum, setThisPlayerNum] = useState(1);\n  const [thisPlayerName, setThisPlayerName] = useState(\"\");\n\n  const [result, setResult] = useState(0);\n  const [triggeredBy, setTriggeredBy] = useState(0);\n  const [replay, setReplay] = useState(false);\n\n  const opponentName = useMemo(\n    () => (thisPlayerNum === 1 ? player2Name : player1Name),\n    [player1Name, player2Name, thisPlayerNum]\n  );\n  const client = useContext(SocketContext);\n  const ref = useRef();\n\n  const handleResultCb = useCallback((result, playerNum) => {\n    setResult(result);\n    setTriggeredBy(playerNum);\n  }, []);\n\n  const replayCb = useCallback((playerNum) => {\n    setReplay(true);\n    setTriggeredBy(playerNum);\n  }, []);\n\n  const quit = () => {\n    const isBlankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n    if (!info && !isBlankGrid) incrementData(\"played\");\n    if (game === \"multi\") {\n      client.emit(\"player-disconnected\", { playerNum: thisPlayerNum });\n    }\n    // if (game === \"multi\" && !opponentName) {\n    //   client.disconnect();\n    // }\n    toggleGameModeCb(\"\");\n  };\n\n  useEffect(() => {\n    if (game === \"single\") {\n      setGameOver(false);\n      setDisableReplayBtn(false);\n      setPlayer1Name(userName);\n      setPlayer2Name(\"Peanutbot\");\n    }\n\n    if (game === \"multi\") {\n      client.emit(\"player-connecting\", { userName });\n      client.on(\"player-has-joined\", ({ player1, player2 }) => {\n        player1 && setPlayer1Name(player1);\n        player2 && setPlayer2Name(player2);\n        if (player1 && player2) {\n          setScore1(0);\n          setScore2(0);\n          setInfo(\"\");\n          setRound(1);\n          setGameOver(false);\n          setDisableReplayBtn(false);\n        }\n      });\n\n      client.on(\"full-server\", () => {\n        toggleGameModeCb(\"\");\n        alert(\"Sorry, server is full.\");\n      });\n\n      client.on(\"player-1-connected\", () => {\n        setThisPlayerName(userName);\n      });\n\n      client.on(\"player-2-connected\", () => {\n        setThisPlayerNum(2);\n        setThisPlayerName(userName);\n      });\n\n      client.on(\"player-disconnected\", ({ playerName, playerNum }) => {\n        playerNum === 1 ? setPlayer1Name(\"\") : setPlayer2Name(\"\");\n        setInfo(`${playerName} left💨`);\n        setResultMsg(\"\");\n        setGameOver(true);\n        setDisableReplayBtn(true);\n      });\n\n      return () => {\n        client.off(\"player-has-joined\");\n        client.off(\"full-server\", toggleGameModeCb);\n        client.off(\"player-1-connected\");\n        client.off(\"player-2-connected\");\n        client.off(\"player-disconnected\");\n      };\n    }\n  }, [client, game, userName, toggleGameModeCb]);\n\n  useEffect(() => {\n    if (game === \"multi\") {\n      client.on(\"result\", ({ result, playerNum }) => {\n        handleResultCb(result, playerNum);\n      });\n\n      client.on(\"replay\", ({ playerNum }) => {\n        replayCb(playerNum);\n      });\n    }\n\n    return () => {\n      client.off(\"result\", handleResultCb);\n      client.off(\"replay\", replayCb);\n    };\n  }, [client, game, handleResultCb, replayCb]);\n\n  useEffect(() => {\n    if (result) {\n      if (result === thisPlayerNum) {\n        setResultMsg(\"🥂 YOU WIN! 🎉\");\n        incrementData(\"won\");\n      } else if (result === \"Draw\") {\n        setResultMsg(result + \"! 🤝\");\n      } else {\n        setResultMsg(\"😱 YOU LOSE! 💩\");\n      }\n\n      if (triggeredBy === thisPlayerNum || game === \"single\") {\n        setInfo(\"Click Replay ⬇️\");\n      }\n      if (game === \"multi\" && triggeredBy !== thisPlayerNum) {\n        setInfo(`Waiting for ${thisPlayerName} to restart the game...`);\n        setDisableReplayBtn(true);\n      }\n      result === thisPlayerNum ? incrementData(\"played\", \"won\") : incrementData(\"played\");\n      result === 1 && setScore1((score) => score + 1);\n      result === 2 && setScore2((score) => score + 1);\n      setGameOver(true);\n      setResult(0);\n      setTriggeredBy(0);\n    }\n  }, [result, game, incrementData, triggeredBy, thisPlayerName, thisPlayerNum]);\n\n  useEffect(() => {\n    if (replay) {\n      const isBlankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n      if (!gameOver && !isBlankGrid && triggeredBy === thisPlayerNum) incrementData(\"played\"); //replay in the middle of the game\n      ref.current.resetGrid();\n      setGameOver(false);\n      setRound((PreRound) => PreRound + 1);\n      setResultMsg(\"\");\n      setInfo(\"\");\n      setDisableReplayBtn(false);\n      setReplay(false);\n      setTriggeredBy(0);\n    }\n  }, [gameOver, incrementData, triggeredBy, replay, thisPlayerNum]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        {/* SCORE DSIPLAY */}\n        <div className=\"col\">\n          <h6 data-testid=\"round\" className=\"text-primary\">\n            Round: {round}\n          </h6>\n          <h5>\n            <span data-testid=\"score1\" style={{ color: \"#f012be\" }}>\n              {score1}\n            </span>\n            <span className=\"text-primary\"> vs </span>\n            <span data-testid=\"score2\" className=\"text-success\">\n              {score2}\n            </span>\n          </h5>\n        </div>\n        {/* PLAYERS LEGEND */}\n        <div className=\"col align-self-end\">\n          <h6 data-testid=\"p1Name\" className=\"player row justify-content-end\">\n            {player1Name ? player1Name : \"Waiting...\"}\n            <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n          </h6>\n          <h6 data-testid=\"p2Name\" className=\"player row justify-content-end\">\n            {player2Name ? player2Name : \"Waiting...\"}\n            <div className=\"bg-success indicator rounded ml-2\" />\n          </h6>\n        </div>\n      </div>\n\n      <Grid\n        ref={ref}\n        game={game}\n        handleResultCb={handleResultCb}\n        opponentName={opponentName}\n        thisPlayerNum={thisPlayerNum}\n        gameOver={gameOver}\n      />\n\n      {/* RESULT */}\n      <h4 data-testid=\"resultMsg\" className=\"text-center text-warning mt-2\">\n        {resultMsg}\n      </h4>\n\n      {/* INFO */}\n      <h5 data-testid=\"info\" className=\"text-center text-warning mt-2\">\n        {info}\n      </h5>\n\n      {/* BUTTONS */}\n      <div\n        onClick={() => {\n          client.emit(\"replay\", { playerNum: thisPlayerNum });\n        }}\n      >\n        <CustomButton\n          id=\"replay\"\n          testid=\"replay\"\n          text=\"Replay\"\n          type=\"button\"\n          func={replayCb}\n          funcArgu={thisPlayerNum}\n          disabled={disableReplayBtn}\n        />\n      </div>\n      <CustomButton id=\"quitBtn\" testid=\"quit\" text=\"Quit\" type=\"button\" func={quit} />\n    </div>\n  );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Card, Alert } from \"react-bootstrap\";\nimport CustomButton from \"../UI/CustomButton\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { SocketContext, socket } from \"../contexts/socket\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Game from \"./Game\";\nimport { app } from \"../firebase\";\n\nexport default function Dashboard() {\n  const history = useHistory();\n  const location = useLocation();\n  const { currentUser, logout } = useAuth();\n\n  const [data, setData] = useState();\n  const [game, setGame] = useState();\n  const [id] = useState(currentUser.uid);\n  const [userName] = useState(location.state?.userName || currentUser.displayName);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const ref = app.database().ref(id);\n    const newData = ref.on(\"value\", (snapshot) => {\n      snapshot.val() ? setData(snapshot.val()) : setData({ played: 0, won: 0 });\n    });\n    return () => {\n      ref.off(\"value\", newData);\n    };\n  }, [id]);\n\n  const handleLogout = async () => {\n    setError(\"\");\n    try {\n      await logout();\n      history.push(\"/\");\n    } catch {\n      setError(\"Failed to log out\");\n    }\n  };\n\n  const toggleGameModeCb = useCallback((mode) => {\n    setGame(mode);\n  }, []);\n\n  function updateProfile() {\n    history.push(\"/update-profile\");\n  }\n\n  const incrementData = useCallback(\n    (key1, key2) => {\n      let updatedData = { ...data, [key1]: data[key1] + 1 };\n      if (key2) updatedData = { ...updatedData, [key2]: data[key2] + 1 };\n      const ref = app.database().ref(id);\n      ref.update({ ...updatedData });\n    },\n    [data, id]\n  );\n\n  return (\n    <main>\n      {game ? (\n        <SocketContext.Provider value={socket}>\n          <Game\n            userName={userName}\n            game={game}\n            incrementData={incrementData}\n            toggleGameModeCb={toggleGameModeCb}\n          />\n        </SocketContext.Provider>\n      ) : (\n        <div>\n          <Card className=\"box\">\n            <Card.Body>\n              <h2 id=\"userName\" className=\"text-center mb-4\">\n                Hello, {userName}!\n              </h2>\n              <div className=\"row\">\n                <h4 id=\"played\" className=\"col-6 text-center\">\n                  🎮 ✖️ {data?.played !== undefined ? data.played : \"Loading...\"}\n                </h4>\n                <h4 id=\"won\" className=\"col-6 text-center\">\n                  🏆 ✖️ {data?.won !== undefined ? data.won : \"Loading...\"}\n                </h4>\n              </div>\n              {error && <Alert variant=\"danger\">{error}</Alert>}\n              <CustomButton\n                id=\"single\"\n                text=\"Challenge Peanutbot\"\n                type=\"button\"\n                func={toggleGameModeCb}\n                funcArgu=\"single\"\n              />\n              <CustomButton\n                id=\"multi\"\n                text=\"Play With A Friend\"\n                type=\"button\"\n                func={toggleGameModeCb}\n                funcArgu=\"multi\"\n              />\n              <CustomButton\n                id=\"updateProfile\"\n                text=\"Update Profile\"\n                type=\"button\"\n                func={updateProfile}\n              />\n            </Card.Body>\n          </Card>\n          <CustomButton\n            id=\"logoutBtn\"\n            link={true}\n            text=\"Log Out\"\n            type=\"button\"\n            func={handleLogout}\n          />\n        </div>\n      )}\n    </main>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function CustomLink({ text, moreText, id, to }) {\n  return (\n    <p className=\"text-center mt-2\">\n      {moreText}\n      <Link className=\"text-decoration-none\" id={id} to={to}>\n        {text}\n      </Link>\n    </p>\n  );\n}\n","import React from \"react\";\n\nexport default function SubHeader({ text }) {\n  return <h2 className=\"text-center mb-4\">{text}</h2>;\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Alert } from \"react-bootstrap\";\nimport { SubHeader, CustomButton, CustomLink } from \"../UI\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function UpdateProfile() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { currentUser, updatePassword, updateEmail } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    const promises = [];\n    setLoading(true);\n    setError(\"\");\n\n    if (usernameRef.current.value !== currentUser.displayName) {\n      promises.push(currentUser.updateProfile({ displayName: usernameRef.current.value }));\n    }\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    Promise.all(promises)\n      .then(() => {\n        history.push(\"/\");\n      })\n      .catch(() => {\n        setError(\"Failed to update account\");\n        setLoading(false);\n      });\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <SubHeader text=\"Update Profile\" />\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                id=\"usernameInput\"\n                type=\"text\"\n                ref={usernameRef}\n                required\n                defaultValue={currentUser.displayName}\n              />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required defaultValue={currentUser.email} />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordConfirmRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <CustomButton id=\"updateBtn\" text=\"Update\" disabled={loading} type=\"submit\" />\n          </Form>\n        </Card.Body>\n      </Card>\n      <CustomLink text=\"Cancel\" id=\"cancelLink\" to=\"/\" />\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Alert } from \"react-bootstrap\";\nimport { SubHeader, CustomButton, CustomLink } from \"../UI\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Signup() {\n  const usernameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmRef = useRef();\n  const { signup } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\n      return setError(\"Passwords do not match\");\n    }\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await signup(emailRef.current.value, passwordRef.current.value).then((cred) => {\n        cred.user.updateProfile({\n          displayName: usernameRef.current.value,\n        });\n      });\n      history.push(\"/\", { userName: usernameRef.current.value });\n    } catch {\n      setError(\"Failed to create an account\");\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div>\n      <Card>\n        <Card.Body>\n          <SubHeader text=\"Sign Up\" />\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control id=\"nameInput\" type=\"text\" ref={usernameRef} required />\n            </Form.Group>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control id=\"emailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                id=\"passwordInput\"\n                type=\"password\"\n                placeholder=\"Minimum 6 characters\"\n                ref={passwordRef}\n                required\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                id=\"confirmPasswordInput\"\n                type=\"password\"\n                ref={passwordConfirmRef}\n                required\n              />\n            </Form.Group>\n            <CustomButton id=\"signupBtn\" text=\"Sign Up\" disabled={loading} type=\"submit\" />\n          </Form>\n        </Card.Body>\n      </Card>\n      <CustomLink text=\"Log In\" moreText=\"Already have an account? \" to=\"/login\" />\n    </div>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Alert } from \"react-bootstrap\";\nimport { CustomButton, CustomLink } from \"../UI\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Login() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const { login } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setError(\"\");\n      setLoading(true);\n      await login(emailRef.current.value, passwordRef.current.value);\n      history.push(\"/\");\n    } catch {\n      setLoading(false);\n      setError(\"Failed to log in\");\n    }\n  }\n\n  return (\n    <div>\n      <header data-testid=\"title\" className=\"title text-primary\">\n        Connect Four\n      </header>\n      <Card className=\"box\">\n        <Card.Body>\n          {error && (\n            <Alert id=\"error\" variant=\"danger\">\n              {error}\n            </Alert>\n          )}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control id=\"emailInput\" type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control id=\"passwordInput\" type=\"password\" ref={passwordRef} required />\n            </Form.Group>\n            <CustomButton id=\"loginBtn\" text=\"Log In\" disabled={loading} type=\"submit\" />\n          </Form>\n          <CustomLink text=\"Forgot Password?\" to=\"/forgot-password\" />\n        </Card.Body>\n      </Card>\n      <CustomLink id=\"signupLink\" text=\"Sign Up\" moreText=\"Need an account? \" to=\"/signup\" />\n    </div>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport { Form, Card, Alert } from \"react-bootstrap\";\nimport { SubHeader, CustomButton, CustomLink } from \"../UI\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nexport default function ForgotPassword() {\n  const emailRef = useRef();\n  const { resetPassword } = useAuth();\n  const [error, setError] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setMessage(\"\");\n      setError(\"\");\n      setLoading(true);\n      await resetPassword(emailRef.current.value);\n      setMessage(\"Check your inbox for further instructions\");\n    } catch {\n      setError(\"Failed to reset password\");\n    }\n\n    setLoading(false);\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <SubHeader text=\"Password Reset\" />\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          {message && <Alert variant=\"success\">{message}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" ref={emailRef} required />\n            </Form.Group>\n            <CustomButton text=\"Reset Password\" disabled={loading} type=\"submit\" />\n          </Form>\n          <CustomLink text=\"Login\" to=\"/login\" />\n        </Card.Body>\n      </Card>\n      <CustomLink text=\"Sign Up\" moreText=\"Need an account? \" to=\"/signup\" />\n    </>\n  );\n}\n","import React from \"react\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PrivateRoute from \"./auth/PrivateRoute\";\nimport Dashboard from \"./game/Dashboard\";\nimport UpdateProfile from \"./auth/UpdateProfile\";\nimport Signup from \"./auth/Signup\";\nimport Login from \"./auth/Login\";\nimport ForgotPassword from \"./auth/ForgotPassword\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./app.css\";\n\nexport default function App() {\n  return (\n    <Router>\n      <AuthProvider>\n        <Switch>\n          <PrivateRoute exact path=\"/\" component={Dashboard} />\n          <PrivateRoute path=\"/update-profile\" component={UpdateProfile} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\n        </Switch>\n      </AuthProvider>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"firebase/auth\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}