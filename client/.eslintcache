[{"/Users/paulinez/connect-four/client/src/index.js":"1","/Users/paulinez/connect-four/client/src/contexts/AuthContext.js":"2","/Users/paulinez/connect-four/client/src/firebase.js":"3","/Users/paulinez/connect-four/client/src/App.js":"4","/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js":"5","/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js":"6","/Users/paulinez/connect-four/client/src/components/Game/help.js":"7","/Users/paulinez/connect-four/client/src/components/Game/SquareGrid.js":"8","/Users/paulinez/connect-four/client/src/components/auth/Login.js":"9","/Users/paulinez/connect-four/client/src/components/auth/PrivateRoute.js":"10","/Users/paulinez/connect-four/client/src/components/auth/ForgotPassword.js":"11","/Users/paulinez/connect-four/client/src/components/auth/UpdateProfile.js":"12","/Users/paulinez/connect-four/client/src/components/game/SinglePlayer.js":"13","/Users/paulinez/connect-four/client/src/components/game/MultiPlayer.js":"14","/Users/paulinez/connect-four/client/src/components/game/help.js":"15","/Users/paulinez/connect-four/client/src/components/game/SquareGrid.js":"16","/Users/paulinez/connect-four/client/src/components/auth/Signup.js":"17","/Users/paulinez/connect-four/client/src/components/Dashboard.js":"18","/Users/paulinez/connect-four/client/src/components/game/Game.js":"19","/Users/paulinez/connect-four/client/src/components/game/Grid.js":"20","/Users/paulinez/connect-four/client/src/components/Page.js":"21","/Users/paulinez/connect-four/client/src/components/game/socketConfig.js":"22","/Users/paulinez/connect-four/client/src/contexts/socket.js":"23"},{"size":244,"mtime":1610334434438,"results":"24","hashOfConfig":"25"},{"size":1302,"mtime":1610072313649,"results":"26","hashOfConfig":"25"},{"size":689,"mtime":1612810170410,"results":"27","hashOfConfig":"25"},{"size":1281,"mtime":1612834119758,"results":"28","hashOfConfig":"25"},{"size":4305,"mtime":1612683100826,"results":"29","hashOfConfig":"25"},{"size":6882,"mtime":1612689981610,"results":"30","hashOfConfig":"25"},{"size":5783,"mtime":1612763864540,"results":"31","hashOfConfig":"25"},{"size":261,"mtime":1612041743315,"results":"32","hashOfConfig":"25"},{"size":1977,"mtime":1612818269560,"results":"33","hashOfConfig":"25"},{"size":423,"mtime":1612818247461,"results":"34","hashOfConfig":"25"},{"size":1676,"mtime":1612818248352,"results":"35","hashOfConfig":"25"},{"size":3009,"mtime":1612818243075,"results":"36","hashOfConfig":"25"},{"size":4303,"mtime":1612822313909,"results":"37","hashOfConfig":"25"},{"size":6880,"mtime":1612822311724,"results":"38","hashOfConfig":"25"},{"size":5753,"mtime":1612850550685,"results":"39","hashOfConfig":"25"},{"size":261,"mtime":1612850778742,"results":"40","hashOfConfig":"25"},{"size":2557,"mtime":1612818246248,"results":"41","hashOfConfig":"25"},{"size":1644,"mtime":1612818629663,"results":"42","hashOfConfig":"25"},{"size":5574,"mtime":1613005497032,"results":"43","hashOfConfig":"25"},{"size":2912,"mtime":1613001118432,"results":"44","hashOfConfig":"25"},{"size":1317,"mtime":1612926222146,"results":"45","hashOfConfig":"25"},{"size":292,"mtime":1612909860876,"results":"46","hashOfConfig":"25"},{"size":185,"mtime":1612926251433,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1wysr4h",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"79"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/paulinez/connect-four/client/src/index.js",[],["104","105"],"/Users/paulinez/connect-four/client/src/contexts/AuthContext.js",[],"/Users/paulinez/connect-four/client/src/firebase.js",[],"/Users/paulinez/connect-four/client/src/App.js",[],"/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js",["106"],"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport SquareGrid from \"./SquareGrid\";\nimport \"./game.css\";\nimport { checkResult, findAValidMove, findAiMove } from \"./help\";\n\nexport default function SinglePlayer({\n  userName,\n  incrementPlayedData,\n  incrementScoreData,\n  initialGrid,\n  toggleGameMode,\n}) {\n  const [grid, setGrid] = useState(initialGrid);\n  const [result, displayResult] = useState(\"\");\n  const [numOfRounds, setNumOfRounds] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  const [turn, switchTurn] = useState(true);\n\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n\n  useEffect(() => {\n    if (!huPlayerIsNext) {\n      let newGrid = grid.slice();\n      const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid);\n      newGrid[aiMoveRowIdx][aiMoveColIdx] = aiPlayer;\n      setGrid(newGrid);\n      let newResult = checkResult(newGrid);\n      if (newResult) {\n        if (newResult === \"Draw\") displayResult(newResult + \"! 🤝\");\n        if (newResult !== \"Draw\") {\n          displayResult(\"😱 YOU LOST! 💩\");\n          setScore2(score2 + 1);\n        }\n        incrementPlayedData();\n      } else {\n        setHuPlayerIsNext(true);\n      }\n    }\n  }, [turn]);\n\n  const handleMove = (huMoveColIdx) => {\n    if (!result && huPlayerIsNext) {\n      let newGrid = grid.slice();\n      const huMoveRowIdx = findAValidMove(newGrid, huMoveColIdx);\n      newGrid[huMoveRowIdx][huMoveColIdx] = huPlayer;\n      setGrid(newGrid);\n      let newResult = checkResult(newGrid);\n      if (newResult && newResult !== \"Draw\") {\n        displayResult(\"🥂 YOU WIN! 🎉\");\n        setScore1(score1 + 1);\n        incrementScoreData();\n      }\n      if (newResult === \"Draw\") {\n        displayResult(newResult + \"! 🤝\");\n        incrementPlayedData();\n      }\n      if (!newResult) {\n        setHuPlayerIsNext(!huPlayerIsNext);\n        switchTurn(!turn);\n      }\n    }\n  };\n\n  function handleReplay() {\n    if (!result) incrementPlayedData();\n    setNumOfRounds(numOfRounds + 1);\n    setGrid(initialGrid);\n    displayResult(\"\");\n    setHuPlayerIsNext(true);\n  }\n\n  const handleQuit = () => {\n    if (!result) incrementPlayedData();\n    toggleGameMode(\"\");\n  };\n\n  return (\n    <>\n      <div id=\"container\" className=\"container\">\n        <div className=\"row\">\n          {/* SCORE DSIPLAY */}\n          <div id=\"scores\" className=\"col\">\n            <h6 className=\"text-primary\">Round: {numOfRounds}</h6>\n            <h4>\n              <span id=\"score-1\" style={{ color: \"#f012be\" }}>\n                {score1}\n              </span>\n              <span className=\"text-primary\"> vs </span>\n              <span id=\"score-2\" className=\"text-success\">\n                {score2}\n              </span>\n            </h4>\n          </div>\n          {/* PLAYERS LEGEND */}\n          <div id=\"players\" className=\"col\">\n            <h6 className=\"player float-right\">\n              {userName}\n              <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n            </h6>\n            <h6 className=\"player float-right\">\n              Peanutbot\n              <div className=\"bg-success indicator rounded ml-2\" />\n            </h6>\n          </div>\n        </div>\n      </div>\n\n      {/* Grid */}\n      <div id=\"boarder\">\n        <div id=\"grid\">\n          {grid.map((row, rowIndex) => (\n            <div className=\"row\" key={rowIndex}>\n              {row.map((value, colIdx) => (\n                <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* WHO's TURN */}\n      <h4 className=\"text-center mt-4\" style={{ color: huPlayerIsNext ? \"#f012be\" : \"#2ecc40\" }}>\n        {result ? \"\" : huPlayerIsNext ? \"Your turn\" : \"Peanutbot's turn\"}\n      </h4>\n\n      {/* RESULT */}\n      <h4 className=\"text-warning text-center mt-4\">{result}</h4>\n\n      <Button className=\"btn-warning w-100 mt-5\" onClick={handleReplay}>\n        Replay\n      </Button>\n      <Button className=\"btn btn-warning w-100 mt-3\" onClick={handleQuit}>\n        Quit\n      </Button>\n      <div>{JSON.stringify(grid)}</div>\n    </>\n  );\n}\n",["107","108"],"/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js",["109"],"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { checkResult, findAValidMove } from \"./help\";\nimport \"./game.css\";\nimport io from \"socket.io-client\";\n\nexport default function MultiPlayer({\n  userName,\n  incrementPlayedData,\n  incrementScoreData,\n  initialGrid,\n  toggleGameMode,\n}) {\n  const history = useHistory();\n\n  const [grid, setGrid] = useState(initialGrid);\n  const [player1, assignPlayer1] = useState(\"\");\n  const [player2, assignPlayer2] = useState(\"\");\n  const [currentPlayer, setCurrentPlayer] = useState(true);\n  const [numOfRounds, setNumOfRounds] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [result, displayResult] = useState(\"\");\n  const [info, displayInfo] = useState(\"\");\n  const [ready, toggleReady] = useState(false);\n  const [turn, switchTurn] = useState(true);\n  const [thisTurn, endThisTurn] = useState();\n  const [replayButton, disableReplayButton] = useState(false);\n\n  useEffect(() => {\n    const client = io(\"/\");\n\n    // ignore the 3rd player\n    client.on(\"full-server\", () => {\n      alert(\"Sorry, server is full!\");\n      history.push(\"/\");\n    });\n\n    client.on(\"player-1-connecting\", (player2name) => {\n      // console.log(currentUser.uid);\n      // console.log(\"player1\");\n      assignPlayer1(userName);\n      // console.log(\"1\");\n      player2name && assignPlayer2(player2name);\n      switchTurn(false);\n      client.emit(\"player-connected\", userName);\n    });\n\n    client.on(\"player-2-connecting\", (player1name) => {\n      // console.log(currentUser.uid);\n      // console.log(\"2\");\n      assignPlayer1(player1name);\n      assignPlayer2(userName);\n      setCurrentPlayer(false);\n      switchTurn(true);\n      client.emit(\"player-connected\", userName);\n    });\n\n    client.on(\"player-has-joined\", ({ playerIndex, name }) => {\n      if (playerIndex === 0) {\n        // console.log(\"3\");\n        assignPlayer1(name);\n        switchTurn(false);\n      } else {\n        // console.log(\"4\");\n        assignPlayer2(name);\n        switchTurn(true);\n      }\n    });\n\n    // update clients' grid , status and score\n    client.emit(\"update-game\", { grid, result, info, turn });\n    client.on(\"update-game\", ({ grid, result, info, turn }) => {\n      // replay was clicked\n      if (info === \"Replay request is sent!\") {\n        setNumOfRounds(numOfRounds + 1);\n        displayInfo(\"Ready, Go!\");\n      } else {\n        displayInfo(\"\");\n      }\n\n      // There is a win/draw\n      if (result) {\n        result !== \"Draw\" ? (result = \"😱 YOU LOST! 💩\") : (result = \"Draw! 🤝\");\n        displayResult(result);\n        displayInfo(\"Click Replay ⬇️\");\n        turn ? setScore1(score1 + 1) : setScore2(score2 + 1);\n        incrementPlayedData();\n      }\n\n      // no result yet\n      if (!result) {\n        toggleReady(!ready);\n        displayResult(\"\");\n        disableReplayButton(false);\n      }\n      setGrid(grid);\n      switchTurn(turn);\n    });\n\n    // handle disconnect\n    client.on(\"player-disconnected\", ({ name, num }) => {\n      num === 0 ? assignPlayer1(\"\") : assignPlayer2(\"\");\n      displayInfo(`${name} left💨`);\n    });\n    return () => {\n      client.disconnect();\n    };\n  }, [thisTurn]);\n\n  const handleMove = (colIdx) => {\n    if (ready && !result && player1 && player2) {\n      let newGrid = grid.slice();\n      const rowIdx = findAValidMove(newGrid, colIdx);\n      newGrid[rowIdx][colIdx] = currentPlayer ? \"Player-1\" : \"Player-2\";\n      let newResult = checkResult(newGrid);\n      let newInfo = \"\";\n      if (newResult) {\n        if (newResult !== \"Draw\") {\n          currentPlayer ? setScore1(score1 + 1) : setScore2(score2 + 1);\n          newResult = \"🥂 YOU WIN! 🎉\";\n          newInfo = `Waiting for ${currentPlayer ? player2 : player1} to restart the game...`;\n          incrementScoreData();\n        }\n        disableReplayButton(true);\n        incrementPlayedData();\n      }\n      setGrid(newGrid);\n      displayResult(newResult);\n      displayInfo(newInfo);\n      toggleReady(false);\n      endThisTurn(!thisTurn);\n    }\n  };\n\n  const handleReplay = () => {\n    if (!result) incrementPlayedData();\n    displayResult(\"\");\n    displayInfo(\"Replay request is sent!\");\n    setNumOfRounds(numOfRounds + 1);\n    setGrid(initialGrid);\n    toggleReady(false);\n    endThisTurn(!thisTurn);\n  };\n\n  const handleQuit = () => {\n    if (!info && !result && turn !== \"Waiting for a player to join...\") incrementPlayedData();\n    toggleGameMode(\"\");\n  };\n\n  return (\n    <>\n      <div id=\"container\" className=\"container\">\n        <div className=\"row\">\n          {/* SCORE DSIPLAY */}\n          <div id=\"scores\" className=\"col\">\n            <h6 className=\"text-primary\">Round: {numOfRounds}</h6>\n            <h4>\n              <span id=\"score-1\" style={{ color: \"#f012be\" }}>\n                {score1}\n              </span>\n              <span className=\"text-primary\"> vs </span>\n              <span id=\"score-2\" className=\"text-success\">\n                {score2}\n              </span>\n            </h4>\n          </div>\n          {/* PLAYERS LEGEND */}\n          <div id=\"players\" className=\"col\">\n            <h6 className=\"player float-right\">\n              {player1 ? player1 : \"Waiting...\"}\n              <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n            </h6>\n            <h6 className=\"player float-right\">\n              {player2 ? player2 : \"Waiting...\"}\n              <div className=\"bg-success indicator rounded ml-2\" />\n            </h6>\n          </div>\n        </div>\n      </div>\n\n      {/* Grid */}\n      <div id=\"boarder\">\n        <div id=\"grid\">\n          {grid.map((row, rowIdx) => (\n            <div className=\"row\" key={rowIdx}>\n              {row.map((value, colIdx) => (\n                <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* WHO's TURN */}\n      <h4 className=\"text-center mt-4\" style={{ color: turn ? \"#f012be\" : \"#2ecc40\" }}>\n        {result\n          ? \"\"\n          : ready && player1 && player2\n          ? \"Your turn\"\n          : player1 && player2\n          ? `Waiting for ${turn ? player1 : player2}...`\n          : \"Waiting for a player to join...\"}\n      </h4>\n\n      {/* RESULT */}\n      <h4 className=\"text-center text-warning mt-4\">{result}</h4>\n\n      {/* INFO */}\n      <h5 className=\"text-center text-warning mt-4\">{info}</h5>\n\n      <Button disabled={replayButton} className=\"btn-warning w-100 mt-4\" onClick={handleReplay}>\n        Replay\n      </Button>\n      <Button className=\"btn btn-warning w-100 mt-3 \" onClick={handleQuit}>\n        Quit\n      </Button>\n      <div>{JSON.stringify(grid)}</div>\n    </>\n  );\n}\n","/Users/paulinez/connect-four/client/src/components/Game/help.js",[],"/Users/paulinez/connect-four/client/src/components/Game/SquareGrid.js",[],"/Users/paulinez/connect-four/client/src/components/auth/Login.js",[],"/Users/paulinez/connect-four/client/src/components/auth/PrivateRoute.js",[],"/Users/paulinez/connect-four/client/src/components/auth/ForgotPassword.js",[],"/Users/paulinez/connect-four/client/src/components/auth/UpdateProfile.js",[],"/Users/paulinez/connect-four/client/src/components/game/SinglePlayer.js",["110"],"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport SquareGrid from \"./SquareGrid\";\nimport \"./game.css\";\nimport { initialGrid, checkResult, findAValidMove, findAiMove } from \"./help\";\n\nexport default function SinglePlayer({\n  userName,\n  incrementPlayedData,\n  incrementScoreData,\n  toggleGameMode,\n}) {\n  const [grid, setGrid] = useState(initialGrid);\n  const [result, displayResult] = useState(\"\");\n  const [numOfRounds, setNumOfRounds] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  const [turn, switchTurn] = useState(true);\n\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n\n  useEffect(() => {\n    if (!huPlayerIsNext) {\n      let newGrid = grid.slice();\n      const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid);\n      newGrid[aiMoveRowIdx][aiMoveColIdx] = aiPlayer;\n      setGrid(newGrid);\n      let newResult = checkResult(newGrid);\n      if (newResult) {\n        if (newResult === \"Draw\") displayResult(newResult + \"! 🤝\");\n        if (newResult !== \"Draw\") {\n          displayResult(\"😱 YOU LOST! 💩\");\n          setScore2(score2 + 1);\n        }\n        incrementPlayedData();\n      } else {\n        setHuPlayerIsNext(true);\n      }\n    }\n  }, [turn]);\n\n  const handleMove = (huMoveColIdx) => {\n    if (!result && huPlayerIsNext) {\n      let newGrid = grid.slice();\n      const huMoveRowIdx = findAValidMove(newGrid, huMoveColIdx);\n      newGrid[huMoveRowIdx][huMoveColIdx] = huPlayer;\n      setGrid(newGrid);\n      let newResult = checkResult(newGrid);\n      if (newResult && newResult !== \"Draw\") {\n        displayResult(\"🥂 YOU WIN! 🎉\");\n        setScore1(score1 + 1);\n        incrementScoreData();\n      }\n      if (newResult === \"Draw\") {\n        displayResult(newResult + \"! 🤝\");\n        incrementPlayedData();\n      }\n      if (!newResult) {\n        setHuPlayerIsNext(!huPlayerIsNext);\n        switchTurn(!turn);\n      }\n    }\n  };\n\n  function handleReplay() {\n    if (!result) incrementPlayedData();\n    setNumOfRounds(numOfRounds + 1);\n    setGrid(initialGrid);\n    displayResult(\"\");\n    setHuPlayerIsNext(true);\n  }\n\n  const handleQuit = () => {\n    if (!result) incrementPlayedData();\n    toggleGameMode(\"\");\n  };\n\n  return (\n    <>\n      <div id=\"container\" className=\"container\">\n        <div className=\"row\">\n          {/* SCORE DSIPLAY */}\n          <div id=\"scores\" className=\"col\">\n            <h6 className=\"text-primary\">Round: {numOfRounds}</h6>\n            <h4>\n              <span id=\"score-1\" style={{ color: \"#f012be\" }}>\n                {score1}\n              </span>\n              <span className=\"text-primary\"> vs </span>\n              <span id=\"score-2\" className=\"text-success\">\n                {score2}\n              </span>\n            </h4>\n          </div>\n          {/* PLAYERS LEGEND */}\n          <div id=\"players\" className=\"col\">\n            <h6 className=\"player float-right\">\n              {userName}\n              <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n            </h6>\n            <h6 className=\"player float-right\">\n              Peanutbot\n              <div className=\"bg-success indicator rounded ml-2\" />\n            </h6>\n          </div>\n        </div>\n      </div>\n\n      {/* Grid */}\n      <div id=\"boarder\">\n        <div id=\"grid\">\n          {grid.map((row, rowIndex) => (\n            <div className=\"row\" key={rowIndex}>\n              {row.map((value, colIdx) => (\n                <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* WHO's TURN */}\n      <h4 className=\"text-center mt-4\" style={{ color: huPlayerIsNext ? \"#f012be\" : \"#2ecc40\" }}>\n        {result ? \"\" : huPlayerIsNext ? \"Your turn\" : \"Peanutbot's turn\"}\n      </h4>\n\n      {/* RESULT */}\n      <h4 className=\"text-warning text-center mt-4\">{result}</h4>\n\n      <Button className=\"btn-warning w-100 mt-5\" onClick={handleReplay}>\n        Replay\n      </Button>\n      <Button className=\"btn btn-warning w-100 mt-3\" onClick={handleQuit}>\n        Quit\n      </Button>\n      <div>{JSON.stringify(grid)}</div>\n    </>\n  );\n}\n",["111","112"],"/Users/paulinez/connect-four/client/src/components/game/MultiPlayer.js",["113"],"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { initialGrid, checkResult, findAValidMove } from \"./help\";\nimport \"./game.css\";\nimport io from \"socket.io-client\";\n\nexport default function MultiPlayer({\n  userName,\n  incrementPlayedData,\n  incrementScoreData,\n  toggleGameMode,\n}) {\n  const history = useHistory();\n\n  const [grid, setGrid] = useState(initialGrid);\n  const [player1, assignPlayer1] = useState(\"\");\n  const [player2, assignPlayer2] = useState(\"\");\n  const [currentPlayer, setCurrentPlayer] = useState(true);\n  const [numOfRounds, setNumOfRounds] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [result, displayResult] = useState(\"\");\n  const [info, displayInfo] = useState(\"\");\n  const [ready, toggleReady] = useState(false);\n  const [turn, switchTurn] = useState(true);\n  const [thisTurn, endThisTurn] = useState();\n  const [replayButton, disableReplayButton] = useState(false);\n\n  useEffect(() => {\n    const client = io(\"/\");\n\n    // ignore the 3rd player\n    client.on(\"full-server\", () => {\n      alert(\"Sorry, server is full!\");\n      history.push(\"/\");\n    });\n\n    client.on(\"player-1-connecting\", (player2name) => {\n      // console.log(currentUser.uid);\n      // console.log(\"player1\");\n      assignPlayer1(userName);\n      // console.log(\"1\");\n      player2name && assignPlayer2(player2name);\n      switchTurn(false);\n      client.emit(\"player-connected\", userName);\n    });\n\n    client.on(\"player-2-connecting\", (player1name) => {\n      // console.log(currentUser.uid);\n      // console.log(\"2\");\n      assignPlayer1(player1name);\n      assignPlayer2(userName);\n      setCurrentPlayer(false);\n      switchTurn(true);\n      client.emit(\"player-connected\", userName);\n    });\n\n    client.on(\"player-has-joined\", ({ playerIndex, name }) => {\n      if (playerIndex === 0) {\n        // console.log(\"3\");\n        assignPlayer1(name);\n        switchTurn(false);\n      } else {\n        // console.log(\"4\");\n        assignPlayer2(name);\n        switchTurn(true);\n      }\n    });\n\n    // update clients' grid , status and score\n    client.emit(\"update-game\", { grid, result, info, turn });\n    client.on(\"update-game\", ({ grid, result, info, turn }) => {\n      // replay was clicked\n      if (info === \"Replay request is sent!\") {\n        setNumOfRounds(numOfRounds + 1);\n        displayInfo(\"Ready, Go!\");\n      } else {\n        displayInfo(\"\");\n      }\n\n      // There is a win/draw\n      if (result) {\n        result !== \"Draw\" ? (result = \"😱 YOU LOST! 💩\") : (result = \"Draw! 🤝\");\n        displayResult(result);\n        displayInfo(\"Click Replay ⬇️\");\n        turn ? setScore1(score1 + 1) : setScore2(score2 + 1);\n        incrementPlayedData();\n      }\n\n      // no result yet\n      if (!result) {\n        toggleReady(!ready);\n        displayResult(\"\");\n        disableReplayButton(false);\n      }\n      setGrid(grid);\n      switchTurn(turn);\n    });\n\n    // handle disconnect\n    client.on(\"player-disconnected\", ({ name, num }) => {\n      num === 0 ? assignPlayer1(\"\") : assignPlayer2(\"\");\n      displayInfo(`${name} left💨`);\n    });\n    return () => {\n      client.disconnect();\n    };\n  }, [thisTurn]);\n\n  const handleMove = (colIdx) => {\n    if (ready && !result && player1 && player2) {\n      let newGrid = grid.slice();\n      const rowIdx = findAValidMove(newGrid, colIdx);\n      newGrid[rowIdx][colIdx] = currentPlayer ? \"Player-1\" : \"Player-2\";\n      let newResult = checkResult(newGrid);\n      let newInfo = \"\";\n      if (newResult) {\n        if (newResult !== \"Draw\") {\n          currentPlayer ? setScore1(score1 + 1) : setScore2(score2 + 1);\n          newResult = \"🥂 YOU WIN! 🎉\";\n          newInfo = `Waiting for ${currentPlayer ? player2 : player1} to restart the game...`;\n          incrementScoreData();\n        }\n        disableReplayButton(true);\n        incrementPlayedData();\n      }\n      setGrid(newGrid);\n      displayResult(newResult);\n      displayInfo(newInfo);\n      toggleReady(false);\n      endThisTurn(!thisTurn);\n    }\n  };\n\n  const handleReplay = () => {\n    if (!result) incrementPlayedData();\n    displayResult(\"\");\n    displayInfo(\"Replay request is sent!\");\n    setNumOfRounds(numOfRounds + 1);\n    setGrid(initialGrid);\n    toggleReady(false);\n    endThisTurn(!thisTurn);\n  };\n\n  const handleQuit = () => {\n    if (!info && !result && turn !== \"Waiting for a player to join...\") incrementPlayedData();\n    toggleGameMode(\"\");\n  };\n\n  return (\n    <>\n      <div id=\"container\" className=\"container\">\n        <div className=\"row\">\n          {/* SCORE DSIPLAY */}\n          <div id=\"scores\" className=\"col\">\n            <h6 className=\"text-primary\">Round: {numOfRounds}</h6>\n            <h4>\n              <span id=\"score-1\" style={{ color: \"#f012be\" }}>\n                {score1}\n              </span>\n              <span className=\"text-primary\"> vs </span>\n              <span id=\"score-2\" className=\"text-success\">\n                {score2}\n              </span>\n            </h4>\n          </div>\n          {/* PLAYERS LEGEND */}\n          <div id=\"players\" className=\"col\">\n            <h6 className=\"player float-right\">\n              {player1 ? player1 : \"Waiting...\"}\n              <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n            </h6>\n            <h6 className=\"player float-right\">\n              {player2 ? player2 : \"Waiting...\"}\n              <div className=\"bg-success indicator rounded ml-2\" />\n            </h6>\n          </div>\n        </div>\n      </div>\n\n      {/* Grid */}\n      <div id=\"boarder\">\n        <div id=\"grid\">\n          {grid.map((row, rowIdx) => (\n            <div className=\"row\" key={rowIdx}>\n              {row.map((value, colIdx) => (\n                <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* WHO's TURN */}\n      <h4 className=\"text-center mt-4\" style={{ color: turn ? \"#f012be\" : \"#2ecc40\" }}>\n        {result\n          ? \"\"\n          : ready && player1 && player2\n          ? \"Your turn\"\n          : player1 && player2\n          ? `Waiting for ${turn ? player1 : player2}...`\n          : \"Waiting for a player to join...\"}\n      </h4>\n\n      {/* RESULT */}\n      <h4 className=\"text-center text-warning mt-4\">{result}</h4>\n\n      {/* INFO */}\n      <h5 className=\"text-center text-warning mt-4\">{info}</h5>\n\n      <Button disabled={replayButton} className=\"btn-warning w-100 mt-4\" onClick={handleReplay}>\n        Replay\n      </Button>\n      <Button className=\"btn btn-warning w-100 mt-3 \" onClick={handleQuit}>\n        Quit\n      </Button>\n      <div>{JSON.stringify(grid)}</div>\n    </>\n  );\n}\n","/Users/paulinez/connect-four/client/src/components/game/help.js",[],"/Users/paulinez/connect-four/client/src/components/game/SquareGrid.js",[],"/Users/paulinez/connect-four/client/src/components/auth/Signup.js",[],"/Users/paulinez/connect-four/client/src/components/Dashboard.js",[],"/Users/paulinez/connect-four/client/src/components/game/Game.js",["114","115","116","117"],"/Users/paulinez/connect-four/client/src/components/game/Grid.js",["118","119"],"import React, { useState, useImperativeHandle, forwardRef, useEffect, useContext } from \"react\";\nimport SquareGrid from \"./SquareGrid\";\nimport { initialGrid, checkResult, findAValidMove, findAiMove } from \"./help\";\nimport { SocketContext } from \"../../contexts/socket\";\nimport \"./game.css\";\n\nconst grid2 = [\n  [null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null],\n  [\"p2\", null, null, \"p1\", null, null, null],\n  [\"p2\", \"p2\", \"p2\", \"p1\", null, null, null],\n  [\"p2\", \"p1\", \"p2\", \"p1\", \"p2\", \"p1\", \"p2\"],\n];\n\nexport const Grid = forwardRef(({ game, handleResult, currentPlayerNum }, ref) => {\n  const [grid, setGrid] = useState(grid2);\n  const [gameOver, setGameOver] = useState(false);\n  const [ready, toggleReady] = useState(true);\n  //   const [turn, switchTurn] = useState(true);\n  const [thisTurn, endThisTurn] = useState();\n  const client = useContext(SocketContext);\n\n  useImperativeHandle(ref, () => ({\n    resetGrid,\n  }));\n\n  const resetGrid = () => {\n    setGrid(grid2);\n    setGameOver(false);\n    endThisTurn(!thisTurn);\n    // toggleReady(false);\n  };\n\n  useEffect(() => {\n    if (game === \"multi\") {\n      toggleReady(false);\n    }\n  }, [game]);\n\n  useEffect(() => {\n    if (game === \"single\" && !ready) {\n      let newGrid = grid.slice();\n      const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid);\n      newGrid[aiMoveRowIdx][aiMoveColIdx] = \"p2\";\n      setGrid(newGrid);\n      let result = checkResult(newGrid);\n      if (result) {\n        setGameOver(true);\n        handleResult(result);\n      } else {\n        toggleReady(!ready);\n      }\n    }\n\n    if (game === \"multi\") {\n      client.emit(\"update-grid\", { grid, gameOver });\n      client.on(\"update-grid\", ({ grid, gameOver }) => {\n        setGameOver(gameOver);\n        setGrid(grid);\n        toggleReady(true);\n      });\n    }\n  }, [thisTurn]);\n\n  const handleMove = (colIdx) => {\n    if (!gameOver && ready) {\n      let newGrid = grid.slice();\n      const rowIdx = findAValidMove(newGrid, colIdx);\n      newGrid[rowIdx][colIdx] = currentPlayerNum;\n      setGrid(newGrid);\n      toggleReady(false);\n      let result = checkResult(newGrid);\n      result && setGameOver(true);\n      result && handleResult(result);\n      endThisTurn(!thisTurn);\n    }\n  };\n\n  return (\n    <>\n      {/* Grid */}\n      <div id=\"boarder\">\n        <div id=\"grid\">\n          {grid.map((row, rowIndex) => (\n            <div className=\"row\" key={rowIndex}>\n              {row.map((value, colIdx) => (\n                <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* WHO's TURN */}\n      <h4 className=\"text-center mt-4\" style={{ color: ready ? \"#f012be\" : \"#2ecc40\" }}>\n        {gameOver ? \"\" : ready ? \"Your turn\" : \"Waiting\"}\n      </h4>\n    </>\n  );\n});\n","/Users/paulinez/connect-four/client/src/components/Page.js",["120","121"],"import React, { useState, useEffect } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport Dashboard from \"./Dashboard\";\nimport Game from \"./game/Game\";\nimport { SocketContext, socket } from \"../contexts/socket\";\n\nexport default function Page() {\n  // USER INFO\n  const { currentUser, logout } = useAuth();\n  const userName = currentUser.displayName;\n  const id = currentUser.uid;\n  const [game, loadGame] = useState();\n  const [playedData, setPlayedData] = useState(0);\n  const [scoreData, setScoreData] = useState(0);\n\n  function toggleGameMode(mode) {\n    loadGame(mode);\n  }\n\n  function incrementPlayedData() {\n    setPlayedData(playedData + 1);\n  }\n\n  function incrementScoreData() {\n    setScoreData(scoreData + 1);\n  }\n\n  return (\n    <>\n      {game ? (\n        <SocketContext.Provider value={socket}>\n          <Game\n            userName={userName}\n            game={game}\n            incrementPlayedData={incrementPlayedData}\n            incrementScoreData={incrementScoreData}\n            toggleGameMode={toggleGameMode}\n          />\n        </SocketContext.Provider>\n      ) : (\n        <Dashboard\n          toggleGameMode={toggleGameMode}\n          logout={logout}\n          userName={userName}\n          played={playedData}\n          won={scoreData}\n        />\n      )}\n    </>\n  );\n}\n","/Users/paulinez/connect-four/client/src/components/game/socketConfig.js",[],["122","123"],"/Users/paulinez/connect-four/client/src/contexts/socket.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":43,"column":6,"nodeType":"130","endLine":43,"endColumn":12,"suggestions":"131"},{"ruleId":"124","replacedBy":"132"},{"ruleId":"126","replacedBy":"133"},{"ruleId":"128","severity":1,"message":"134","line":111,"column":6,"nodeType":"130","endLine":111,"endColumn":16,"suggestions":"135"},{"ruleId":"128","severity":1,"message":"129","line":42,"column":6,"nodeType":"130","endLine":42,"endColumn":12,"suggestions":"136"},{"ruleId":"124","replacedBy":"137"},{"ruleId":"126","replacedBy":"138"},{"ruleId":"128","severity":1,"message":"134","line":110,"column":6,"nodeType":"130","endLine":110,"endColumn":16,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":28,"column":10,"nodeType":"142","messageId":"143","endLine":28,"endColumn":27},{"ruleId":"140","severity":1,"message":"144","line":28,"column":29,"nodeType":"142","messageId":"143","endLine":28,"endColumn":46},{"ruleId":"128","severity":1,"message":"145","line":67,"column":6,"nodeType":"130","endLine":67,"endColumn":12,"suggestions":"146"},{"ruleId":"128","severity":1,"message":"147","line":99,"column":6,"nodeType":"130","endLine":99,"endColumn":14,"suggestions":"148"},{"ruleId":"140","severity":1,"message":"149","line":3,"column":10,"nodeType":"142","messageId":"143","endLine":3,"endColumn":21},{"ruleId":"128","severity":1,"message":"150","line":64,"column":6,"nodeType":"130","endLine":64,"endColumn":16,"suggestions":"151"},{"ruleId":"140","severity":1,"message":"152","line":1,"column":27,"nodeType":"142","messageId":"143","endLine":1,"endColumn":36},{"ruleId":"140","severity":1,"message":"153","line":11,"column":9,"nodeType":"142","messageId":"143","endLine":11,"endColumn":11},{"ruleId":"124","replacedBy":"154"},{"ruleId":"126","replacedBy":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'aiPlayer', 'grid', 'huPlayerIsNext', 'incrementPlayedData', and 'score2'. Either include them or remove the dependency array. If 'incrementPlayedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["158"],["156"],["157"],"React Hook useEffect has missing dependencies: 'grid', 'history', 'incrementPlayedData', 'info', 'numOfRounds', 'ready', 'result', 'score1', 'score2', 'turn', and 'userName'. Either include them or remove the dependency array. If 'incrementPlayedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["159"],["160"],["156"],["157"],["161"],"no-unused-vars","'replayButtonFlag2' is assigned a value but never used.","Identifier","unusedVar","'clickReplayButton' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'client', 'toggleGameMode', and 'userName'. Either include them or remove the dependency array. If 'toggleGameMode' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["162"],"React Hook useEffect has missing dependencies: 'client', 'currentPlayerNum', 'game', 'incrementPlayedData', 'numOfRounds', 'player1Name', 'player2Name', 'score1', and 'score2'. Either include them or remove the dependency array. If 'incrementPlayedData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["163"],"'initialGrid' is defined but never used.","React Hook useEffect has missing dependencies: 'client', 'game', 'gameOver', 'grid', 'handleResult', and 'ready'. Either include them or remove the dependency array. If 'handleResult' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["164"],"'useEffect' is defined but never used.","'id' is assigned a value but never used.",["156"],["157"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"165","fix":"169"},{"desc":"167","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [aiPlayer, grid, huPlayerIsNext, incrementPlayedData, score2, turn]",{"range":"177","text":"178"},"Update the dependencies array to be: [grid, history, incrementPlayedData, info, numOfRounds, ready, result, score1, score2, thisTurn, turn, userName]",{"range":"179","text":"180"},{"range":"181","text":"178"},{"range":"182","text":"180"},"Update the dependencies array to be: [client, game, toggleGameMode, userName]",{"range":"183","text":"184"},"Update the dependencies array to be: [client, currentPlayerNum, game, incrementPlayedData, numOfRounds, player1Name, player2Name, result, score1, score2]",{"range":"185","text":"186"},"Update the dependencies array to be: [client, game, gameOver, grid, handleResult, ready, thisTurn]",{"range":"187","text":"188"},[1338,1344],"[aiPlayer, grid, huPlayerIsNext, incrementPlayedData, score2, turn]",[3320,3330],"[grid, history, incrementPlayedData, info, numOfRounds, ready, result, score1, score2, thisTurn, turn, userName]",[1336,1342],[3318,3328],[2259,2265],"[client, game, toggleGameMode, userName]",[3346,3354],"[client, currentPlayerNum, game, incrementPlayedData, numOfRounds, player1Name, player2Name, result, score1, score2]",[1890,1900],"[client, game, gameOver, grid, handleResult, ready, thisTurn]"]