[{"/Users/paulinez/connect-four/client/src/index.js":"1","/Users/paulinez/connect-four/client/src/contexts/AuthContext.js":"2","/Users/paulinez/connect-four/client/src/firebase.js":"3","/Users/paulinez/connect-four/client/src/App.js":"4","/Users/paulinez/connect-four/client/src/components/Game/help.js":"5","/Users/paulinez/connect-four/client/src/components/Game/SquareGrid.js":"6","/Users/paulinez/connect-four/client/src/components/auth/Login.js":"7","/Users/paulinez/connect-four/client/src/components/auth/PrivateRoute.js":"8","/Users/paulinez/connect-four/client/src/components/auth/ForgotPassword.js":"9","/Users/paulinez/connect-four/client/src/components/auth/UpdateProfile.js":"10","/Users/paulinez/connect-four/client/src/components/game/help.js":"11","/Users/paulinez/connect-four/client/src/components/game/SquareGrid.js":"12","/Users/paulinez/connect-four/client/src/components/auth/Signup.js":"13","/Users/paulinez/connect-four/client/src/components/Dashboard.js":"14","/Users/paulinez/connect-four/client/src/components/game/Game.js":"15","/Users/paulinez/connect-four/client/src/components/game/Grid.js":"16","/Users/paulinez/connect-four/client/src/components/Page.js":"17","/Users/paulinez/connect-four/client/src/contexts/socket.js":"18"},{"size":244,"mtime":1610334434438,"results":"19","hashOfConfig":"20"},{"size":1302,"mtime":1610072313649,"results":"21","hashOfConfig":"20"},{"size":689,"mtime":1619207702087,"results":"22","hashOfConfig":"20"},{"size":1281,"mtime":1612834119758,"results":"23","hashOfConfig":"20"},{"size":5783,"mtime":1612763864540,"results":"24","hashOfConfig":"20"},{"size":261,"mtime":1612041743315,"results":"25","hashOfConfig":"20"},{"size":2013,"mtime":1620676188697,"results":"26","hashOfConfig":"20"},{"size":423,"mtime":1612818247461,"results":"27","hashOfConfig":"20"},{"size":1676,"mtime":1612818248352,"results":"28","hashOfConfig":"20"},{"size":3009,"mtime":1612818243075,"results":"29","hashOfConfig":"20"},{"size":4598,"mtime":1620676320434,"results":"30","hashOfConfig":"20"},{"size":282,"mtime":1618983698517,"results":"31","hashOfConfig":"20"},{"size":2598,"mtime":1616726248028,"results":"32","hashOfConfig":"20"},{"size":1855,"mtime":1619502014318,"results":"33","hashOfConfig":"20"},{"size":6602,"mtime":1619551401343,"results":"34","hashOfConfig":"20"},{"size":3319,"mtime":1620673405092,"results":"35","hashOfConfig":"20"},{"size":2697,"mtime":1620431598070,"results":"36","hashOfConfig":"20"},{"size":288,"mtime":1620677797175,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wysr4h",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/paulinez/connect-four/client/src/index.js",[],"/Users/paulinez/connect-four/client/src/contexts/AuthContext.js",[],"/Users/paulinez/connect-four/client/src/firebase.js",[],"/Users/paulinez/connect-four/client/src/App.js",[],"/Users/paulinez/connect-four/client/src/components/Game/help.js",[],["78","79"],"/Users/paulinez/connect-four/client/src/components/Game/SquareGrid.js",[],"/Users/paulinez/connect-four/client/src/components/auth/Login.js",[],"/Users/paulinez/connect-four/client/src/components/auth/PrivateRoute.js",[],"/Users/paulinez/connect-four/client/src/components/auth/ForgotPassword.js",[],"/Users/paulinez/connect-four/client/src/components/auth/UpdateProfile.js",[],"/Users/paulinez/connect-four/client/src/components/game/help.js",[],"/Users/paulinez/connect-four/client/src/components/game/SquareGrid.js",[],"/Users/paulinez/connect-four/client/src/components/auth/Signup.js",[],"/Users/paulinez/connect-four/client/src/components/Dashboard.js",[],"/Users/paulinez/connect-four/client/src/components/game/Game.js",["80","81"],"import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Grid } from \"./Grid\";\nimport { SocketContext } from \"../../contexts/socket\";\nimport \"./game.css\";\n\nexport default function Game({ userName, game, initialGrid, incrementData, toggleGameMode }) {\n  const [player1Name, assignPlayer1Name] = useState(\"\");\n  const [player2Name, assignPlayer2Name] = useState(\"\");\n  const [currentPlayerNum, setCurrentPlayerNum] = useState(\"p1\");\n  const [currentPlayerName, setCurrentPlayerName] = useState(\"\");\n  const [numOfRounds, setNumOfRounds] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [result, saveResult] = useState(\"\");\n  const [resultMsg, displayResultMsg] = useState(\"\");\n  const [info, displayInfo] = useState(\"\");\n  const [replayButton, disableReplayButton] = useState(false);\n\n  const opponent = currentPlayerNum === \"p1\" ? player2Name : player1Name;\n  const client = useContext(SocketContext);\n  const ref = useRef();\n\n  useEffect(() => {\n    if (game === \"single\") {\n      assignPlayer1Name(userName);\n      assignPlayer2Name(\"Peanutbot\");\n    }\n\n    if (game === \"multi\") {\n      client.on(\"full-server\", () => {\n        toggleGameMode(\"\");\n        alert(\"Sorry, server is full.\");\n      });\n\n      client.emit(\"player-connecting\", { userName });\n\n      client.on(\"player-1-connected\", (player2) => {\n        assignPlayer1Name(userName);\n        setCurrentPlayerName(userName);\n        player2 && assignPlayer2Name(player2);\n      });\n\n      client.on(\"player-2-connected\", (player1) => {\n        assignPlayer2Name(userName);\n        setCurrentPlayerName(userName);\n        setCurrentPlayerNum(\"p2\");\n        assignPlayer1Name(player1);\n      });\n\n      client.on(\"player-has-joined\", ({ userName, playerIndex }) => {\n        playerIndex === 0 ? assignPlayer1Name(userName) : assignPlayer2Name(userName);\n        setScore1(0);\n        setScore2(0);\n      });\n\n      //   handle disconnect\n      client.on(\"player-disconnected\", ({ name, num }) => {\n        num === 0 ? assignPlayer1Name(\"\") : assignPlayer2Name(\"\");\n        displayInfo(`${name} left💨`);\n      });\n      return () => client.disconnect(currentPlayerName);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (game === \"multi\") {\n      // to all clients except sender\n      client.emit(\"update-result-display-and-rounds\", {\n        result,\n        currentPlayerName,\n        numOfRounds,\n      });\n      client.on(\"update-result-display-and-rounds\", ({ result, currentPlayerName, numOfRounds }) => {\n        setNumOfRounds(numOfRounds);\n        if (result) {\n          result === \"Draw\"\n            ? displayResultMsg(result + \"! 🤝\")\n            : displayResultMsg(\"😱 YOU LOST! 💩\");\n          displayInfo(`Waiting for ${currentPlayerName} to restart the game...`);\n          disableReplayButton(true);\n        } else {\n          displayResultMsg(\"\");\n          displayInfo(\"\");\n          disableReplayButton(false);\n        }\n      });\n\n      // to all clients\n      client.emit(\"update-score\", { result });\n      client.on(\"update-score\", ({ result }) => {\n        result && incrementData(\"played\");\n        result === \"p1\" && setScore1(score1 + 1);\n        result === \"p2\" && setScore2(score2 + 1);\n      });\n    }\n  }, [result, numOfRounds]);\n\n  function handleResult(result) {\n    if (game === \"multi\") {\n      result === \"Draw\" ? displayResultMsg(result + \"! 🤝\") : displayResultMsg(\"🥂 YOU WIN! 🎉\");\n      //   displayInfo(\"Click Replay ⬇️\");\n      incrementData(\"won\");\n      //   saveResult(result);\n    } else {\n      if (result === \"p1\") {\n        displayResultMsg(\"🥂 YOU WIN! 🎉\");\n        setScore1(score1 + 1);\n        incrementData(\"won\", \"played\");\n      }\n      if (result === \"p2\") {\n        displayResultMsg(\"😱 YOU LOST! 💩\");\n        setScore2(score2 + 1);\n        incrementData(\"played\");\n      }\n      if (result === \"Draw\") {\n        displayResultMsg(result + \"! 🤝\");\n        incrementData(\"played\");\n      }\n    }\n    displayInfo(\"Click Replay ⬇️\");\n    saveResult(result);\n  }\n\n  function handleReplay() {\n    !result && incrementData(\"played\");\n    ref.current.resetGrid(result);\n    setNumOfRounds(numOfRounds + 1);\n    displayResultMsg(\"\");\n    displayInfo(\"\");\n    saveResult(\"\");\n  }\n\n  const handleQuit = () => {\n    const blankGrid = JSON.stringify(ref.current.grid) === JSON.stringify(initialGrid);\n    if (!info && !result && !blankGrid) {\n      incrementData(\"played\");\n    }\n    if (game === \"multi\") window.location.reload(false); // when quit restart socket.\n    toggleGameMode(\"\");\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row\">\n          {/* SCORE DSIPLAY */}\n          <div className=\"col\">\n            <h6 data-testid=\"numOfRounds\" className=\"text-primary\">\n              Round: {numOfRounds}\n            </h6>\n            <h4>\n              <span data-testid=\"score1\" style={{ color: \"#f012be\" }}>\n                {score1}\n              </span>\n              <span className=\"text-primary\"> vs </span>\n              <span data-testid=\"score2\" className=\"text-success\">\n                {score2}\n              </span>\n            </h4>\n          </div>\n          {/* PLAYERS LEGEND */}\n          <div className=\"col\">\n            <h6 data-testid=\"p1Name\" className=\"player float-right\">\n              {player1Name ? player1Name : \"Waiting...\"}\n              <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n            </h6>\n            <h6 data-testid=\"p2Name\" className=\"player float-right\">\n              {player2Name ? player2Name : \"Waiting...\"}\n              <div className=\"bg-success indicator rounded ml-2\" />\n            </h6>\n          </div>\n        </div>\n      </div>\n\n      <Grid\n        ref={ref}\n        game={game}\n        initialGrid={initialGrid}\n        handleResult={handleResult}\n        opponent={opponent}\n        currentPlayerNum={currentPlayerNum}\n      />\n\n      {/* RESULT */}\n      <h4 data-testid=\"resultMsg\" className=\"text-center text-warning mt-4\">\n        {resultMsg}\n      </h4>\n\n      {/* INFO */}\n      <h5 data-testid=\"info\" className=\"text-center text-warning mt-4\">\n        {info}\n      </h5>\n\n      <Button\n        disabled={replayButton}\n        data-testid=\"replay\"\n        className=\"btn-warning w-100 mt-4\"\n        onClick={handleReplay}\n      >\n        Replay\n      </Button>\n      <Button data-testid=\"quit\" className=\"btn btn-warning w-100 mt-3 \" onClick={handleQuit}>\n        Quit\n      </Button>\n    </>\n  );\n}\n","/Users/paulinez/connect-four/client/src/components/game/Grid.js",["82"],"import React, { useState, useImperativeHandle, forwardRef, useEffect, useContext } from \"react\";\nimport SquareGrid from \"./SquareGrid\";\nimport { checkResult, findAValidMove, findAiMove } from \"./help\";\nimport { SocketContext } from \"../../contexts/socket\";\nimport \"./game.css\";\n\nexport const Grid = forwardRef(\n  ({ game, initialGrid, handleResult, opponent, currentPlayerNum }, ref) => {\n    const blankGrid = JSON.parse(JSON.stringify(initialGrid));\n    const [grid, setGrid] = useState(blankGrid);\n\n    const [gameOver, setGameOver] = useState(false);\n    const [ready, toggleReady] = useState(true);\n    const [thisTurn, endThisTurn] = useState();\n    const client = useContext(SocketContext);\n    const currentPlayerColor = currentPlayerNum === \"p1\" ? \"#f012be\" : \"#2ecc40\";\n    const opponentPlayerColor = currentPlayerNum === \"p1\" ? \"#2ecc40\" : \"#f012be\";\n\n    useImperativeHandle(ref, () => ({\n      grid,\n      resetGrid,\n    }));\n\n    const resetGrid = (result) => {\n      if (game === \"single\" && result === \"p1\") {\n        toggleReady(true);\n      }\n      setGrid(initialGrid);\n      setGameOver(false);\n      endThisTurn(!thisTurn);\n    };\n\n    useEffect(() => {\n      if (!gameOver && game === \"single\" && !ready) {\n        let newGrid = grid.slice();\n        setTimeout(() => {\n          const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid);\n          newGrid[aiMoveRowIdx][aiMoveColIdx] = \"p2\";\n          setGrid(newGrid);\n          let result = checkResult(newGrid);\n          if (result) {\n            setGameOver(true);\n            handleResult(result);\n          } else {\n            toggleReady(!ready);\n          }\n        }, 500);\n      }\n\n      // to all clients except sender\n      if (game === \"multi\") {\n        toggleReady(!ready);\n        client.emit(\"update-grid\", { grid, gameOver, ready });\n        client.on(\"update-grid\", ({ grid, gameOver, ready }) => {\n          setGameOver(gameOver);\n          setGrid(grid);\n          toggleReady(ready);\n        });\n      }\n    }, [thisTurn]);\n\n    const handleMove = (colIdx) => {\n      if (!gameOver && ready) {\n        let newGrid = grid.slice();\n        const rowIdx = findAValidMove(newGrid, colIdx);\n        newGrid[rowIdx][colIdx] = currentPlayerNum;\n        setGrid(newGrid);\n        let result = checkResult(newGrid);\n        result && setGameOver(true);\n        result && handleResult(result);\n        game === \"single\" && toggleReady(false);\n        endThisTurn(!thisTurn);\n      }\n    };\n\n    return (\n      <>\n        {/* Grid */}\n        <div id=\"boarder\">\n          <div id=\"grid\">\n            {grid.map((row, rowIndex) => (\n              <div className=\"row\" key={rowIndex}>\n                {row.map((value, colIdx) => (\n                  <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* WHO's TURN */}\n        <h4\n          className=\"text-center mt-4\"\n          style={{ color: ready ? currentPlayerColor : opponentPlayerColor }}\n        >\n          {gameOver || !opponent\n            ? \"\"\n            : ready\n            ? \"Your turn\"\n            : opponent\n            ? `Waiting for ${opponent}...`\n            : \"Waiting for a player to join...\"}\n        </h4>\n      </>\n    );\n  }\n);\n","/Users/paulinez/connect-four/client/src/components/Page.js",["83","84"],"import React, { useState, useEffect } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport Dashboard from \"./Dashboard\";\nimport Game from \"./game/Game\";\nimport { getGrid } from \"./game/help\";\nimport { SocketContext, socket } from \"../contexts/socket\";\nimport base from \"./../firebase\";\nimport { useLocation, useHistory } from \"react-router-dom\";\n\nexport default function Page() {\n  // USER INFO\n  const { currentUser, logout } = useAuth();\n  const id = currentUser.uid;\n  const profileName = currentUser.displayName;\n\n  const location = useLocation();\n  const userName = location.state?.userName || profileName;\n  const history = useHistory();\n\n  const initialGrid = getGrid();\n  // const initialGrid = [\n  //   [null, null, null, null, null, null, null],\n  //   [null, null, null, null, null, null, null],\n  //   [\"p1\", null, null, null, null, null, null],\n  //   [\"p1\", null, null, null, null, null, null],\n  //   [\"p1\", \"p2\", \"p2\", \"p2\", null, null, null],\n  //   [\"p2\", \"p1\", \"p2\", \"p1\", \"p2\", \"p1\", \"p2\"],\n  // ];\n\n  const [data, setData] = useState(JSON.parse(localStorage.getItem(id)) || {});\n  const [game, loadGame] = useState();\n\n  useEffect(() => {\n    const ref = base.syncState(id, {\n      context: {\n        setState: ({ data }) => setData({ ...data }),\n        state: { data },\n      },\n      state: \"data\",\n    });\n\n    const existingData = ref[\"context\"][\"state\"][\"data\"];\n    if (Object.keys(existingData).length === 0) {\n      base.post(id, {\n        data: { played: 0, won: 0 },\n      });\n      setData({ played: 0, won: 0 });\n    }\n\n    return () => {\n      base.removeBinding(ref);\n    };\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(id, JSON.stringify(data));\n  }, [data]);\n\n  function updateProfile() {\n    history.push(\"/update-profile\");\n  }\n\n  function toggleGameMode(mode) {\n    loadGame(mode);\n  }\n\n  function incrementData(key1, key2) {\n    let updatedData = { ...data, [key1]: data[key1] + 1 };\n    if (key2) updatedData = { ...updatedData, [key2]: data[key2] + 1 };\n    setData(updatedData);\n    base.post(id, {\n      data: updatedData,\n    });\n  }\n\n  return (\n    <>\n      {game ? (\n        <SocketContext.Provider value={socket}>\n          <Game\n            userName={userName}\n            game={game}\n            initialGrid={initialGrid}\n            incrementData={incrementData}\n            toggleGameMode={toggleGameMode}\n          />\n        </SocketContext.Provider>\n      ) : (\n        <Dashboard\n          toggleGameMode={toggleGameMode}\n          logout={logout}\n          updateProfile={updateProfile}\n          userName={userName}\n          played={data.played}\n          won={data.won}\n        />\n      )}\n    </>\n  );\n}\n","/Users/paulinez/connect-four/client/src/contexts/socket.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":64,"column":6,"nodeType":"91","endLine":64,"endColumn":8,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":97,"column":6,"nodeType":"91","endLine":97,"endColumn":27,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"95","line":60,"column":8,"nodeType":"91","endLine":60,"endColumn":18,"suggestions":"96"},{"ruleId":"89","severity":1,"message":"97","line":53,"column":6,"nodeType":"91","endLine":53,"endColumn":8,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"99","line":57,"column":6,"nodeType":"91","endLine":57,"endColumn":12,"suggestions":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client', 'currentPlayerName', 'game', 'toggleGameMode', and 'userName'. Either include them or remove the dependency array. If 'toggleGameMode' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["103"],"React Hook useEffect has missing dependencies: 'client', 'currentPlayerName', 'game', 'incrementData', 'score1', and 'score2'. Either include them or remove the dependency array. If 'incrementData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["104"],"React Hook useEffect has missing dependencies: 'client', 'game', 'gameOver', 'grid', 'handleResult', and 'ready'. Either include them or remove the dependency array. If 'handleResult' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["105"],"React Hook useEffect has missing dependencies: 'data' and 'id'. Either include them or remove the dependency array.",["106"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"114","fix":"116"},"Update the dependencies array to be: [client, currentPlayerName, game, toggleGameMode, userName]",{"range":"117","text":"118"},"Update the dependencies array to be: [result, numOfRounds, game, client, currentPlayerName, incrementData, score1, score2]",{"range":"119","text":"120"},"Update the dependencies array to be: [client, game, gameOver, grid, handleResult, ready, thisTurn]",{"range":"121","text":"122"},"Update the dependencies array to be: [data, id]",{"range":"123","text":"124"},{"range":"125","text":"124"},[2268,2270],"[client, currentPlayerName, game, toggleGameMode, userName]",[3317,3338],"[result, numOfRounds, game, client, currentPlayerName, incrementData, score1, score2]",[2008,2018],"[client, game, gameOver, grid, handleResult, ready, thisTurn]",[1635,1637],"[data, id]",[1718,1724]]