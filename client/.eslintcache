[{"/Users/paulinez/connect-four/client/src/index.js":"1","/Users/paulinez/connect-four/client/src/components/Signup.js":"2","/Users/paulinez/connect-four/client/src/components/Dashboard.js":"3","/Users/paulinez/connect-four/client/src/components/ForgotPassword.js":"4","/Users/paulinez/connect-four/client/src/components/Login.js":"5","/Users/paulinez/connect-four/client/src/components/UpdateProfile.js":"6","/Users/paulinez/connect-four/client/src/components/PrivateRoute.js":"7","/Users/paulinez/connect-four/client/src/contexts/AuthContext.js":"8","/Users/paulinez/connect-four/client/src/firebase.js":"9","/Users/paulinez/connect-four/client/src/App.js":"10","/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js":"11","/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js":"12","/Users/paulinez/connect-four/client/src/components/Game/help.js":"13","/Users/paulinez/connect-four/client/src/components/Game/SquareGrid.js":"14"},{"size":244,"mtime":1610334434438,"results":"15","hashOfConfig":"16"},{"size":2578,"mtime":1611125373825,"results":"17","hashOfConfig":"16"},{"size":1980,"mtime":1612414130821,"results":"18","hashOfConfig":"16"},{"size":1673,"mtime":1610315998937,"results":"19","hashOfConfig":"16"},{"size":2037,"mtime":1612037887408,"results":"20","hashOfConfig":"16"},{"size":3100,"mtime":1610392474261,"results":"21","hashOfConfig":"16"},{"size":464,"mtime":1609992842961,"results":"22","hashOfConfig":"16"},{"size":1302,"mtime":1610072313649,"results":"23","hashOfConfig":"16"},{"size":565,"mtime":1609976626136,"results":"24","hashOfConfig":"16"},{"size":1513,"mtime":1611099305991,"results":"25","hashOfConfig":"16"},{"size":4650,"mtime":1612486548403,"results":"26","hashOfConfig":"16"},{"size":7296,"mtime":1612477677447,"results":"27","hashOfConfig":"16"},{"size":4949,"mtime":1612482591534,"results":"28","hashOfConfig":"16"},{"size":261,"mtime":1612041743315,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1wysr4h",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/paulinez/connect-four/client/src/index.js",[],["62","63"],"/Users/paulinez/connect-four/client/src/components/Signup.js",[],"/Users/paulinez/connect-four/client/src/components/Dashboard.js",["64"],"import React, { useState, useEffect } from \"react\";\nimport { Card, Button, Alert } from \"react-bootstrap\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { fetchScore, storeScore } from \"./Game/help\";\n\nexport default function Dashboard() {\n  const history = useHistory();\n  const { currentUser, logout } = useAuth();\n\n  const [error, setError] = useState(\"\");\n  const [playedTotal, setPlayedTotal] = useState(0);\n  const [wonTotal, setWonTotal] = useState(0);\n\n  useEffect(() => {\n    const [played, won] = fetchScore(currentUser.uid);\n    if (played) {\n      setPlayedTotal(played);\n      setWonTotal(won);\n    } else {\n      storeScore(currentUser.uid, 0, 0);\n    }\n  });\n\n  async function handleLogout() {\n    setError(\"\");\n    try {\n      await logout();\n      history.push(\"/login\");\n    } catch {\n      setError(\"Failed to log out\");\n    }\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">\n            Hello, {currentUser.displayName}!\n          </h2>\n          <div className=\"row\">\n            <h4 className=\"col-6 text-center\">üéÆ ‚úñÔ∏è {playedTotal}</h4>\n            <h4 className=\"col-6 text-center\">üèÜ ‚úñÔ∏è {wonTotal}</h4>\n          </div>\n\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n\n          <Link to=\"/single-player\" className=\"btn btn-warning w-100 mt-3\">\n            Challenge Peanutbot\n          </Link>\n          <Link to=\"/multi-player\" className=\"btn btn-warning w-100 mt-3\">\n            Play With A Friend\n          </Link>\n          <Link to=\"/update-profile\" className=\"btn btn-warning w-100 mt-3\">\n            Update Profile\n          </Link>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        <Button\n          variant=\"link\"\n          className=\"text-decoration-none\"\n          onClick={handleLogout}\n        >\n          Log Out\n        </Button>\n      </div>\n    </>\n  );\n}\n","/Users/paulinez/connect-four/client/src/components/ForgotPassword.js",[],"/Users/paulinez/connect-four/client/src/components/Login.js",[],"/Users/paulinez/connect-four/client/src/components/UpdateProfile.js",[],"/Users/paulinez/connect-four/client/src/components/PrivateRoute.js",[],"/Users/paulinez/connect-four/client/src/contexts/AuthContext.js",[],"/Users/paulinez/connect-four/client/src/firebase.js",[],"/Users/paulinez/connect-four/client/src/App.js",[],"/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js",["65"],"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport \"./game.css\";\nimport { createGrid, checkResult, findAValidMove, findAiMove, storeScore, fetchScore } from \"./help\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nexport default function SinglePlayer() {\n  const numOfRows = 6;\n  const numOfCols = 7;\n  const initialGrid = createGrid(numOfRows, numOfCols);\n\n  const [grid, setGrid] = useState(initialGrid);\n  const [result, displayResult] = useState(\"\");\n  const [numOfGames, setNumOfGames] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  const [turn, switchTurn] = useState(true);\n  const { currentUser } = useAuth();\n  const [played, won] = fetchScore(currentUser.uid);\n\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n\n  useEffect(() => {\n    if (!huPlayerIsNext) {\n      let newGrid = grid.slice();\n      const [aiMoveRowIdx, aiMoveColIdx] = findAiMove(newGrid, numOfCols);\n      newGrid[aiMoveRowIdx][aiMoveColIdx] = aiPlayer;\n      setGrid(newGrid);\n      let newResult = checkResult(newGrid);\n      if (newResult) {\n        if (newResult === \"Draw\") displayResult(newResult + \"! ü§ù\");\n        if (newResult !== \"Draw\") {\n          displayResult(\"üò± YOU LOST! üí©\");\n          setScore2(score2 + 1);\n        }\n        storeScore(currentUser.uid, played + 1, won);\n      } else {\n        setHuPlayerIsNext(true);\n      }\n    }\n  }, [turn]);\n\n  const handleMove = (huMoveColIdx) => {\n    if (!result && huPlayerIsNext) {\n      let newGrid = grid.slice();\n      const huMoveRowIdx = findAValidMove(newGrid, huMoveColIdx);\n      newGrid[huMoveRowIdx][huMoveColIdx] = huPlayer;\n      setGrid(newGrid);\n      let newResult = checkResult(newGrid);\n      if (newResult && newResult !== \"Draw\") {\n        displayResult(\"ü•Ç YOU WIN! üéâ\");\n        setScore1(score1 + 1);\n        storeScore(currentUser.uid, played + 1, won + 1);\n      }\n      if (newResult === \"Draw\") {\n        displayResult(newResult + \"! ü§ù\");\n        storeScore(currentUser.uid, played + 1, won);\n      }\n      if (!newResult) {\n        setHuPlayerIsNext(!huPlayerIsNext);\n        switchTurn(!turn);\n      }\n    }\n  };\n\n  function handleReplay() {\n    if (!result) storeScore(currentUser.uid, played + 1, won);\n    setNumOfGames(numOfGames + 1);\n    setGrid(initialGrid);\n    displayResult(\"\");\n    setHuPlayerIsNext(true);\n  }\n\n  const handleQuit = () => {\n    if (!result) storeScore(currentUser.uid, played + 1, won);\n  };\n\n  return (\n    <>\n      <div id=\"container\" className=\"container\">\n        <div className=\"row\">\n          {/* SCORE DSIPLAY */}\n          <div id=\"scores\" className=\"col\">\n            <h6 className=\"text-primary\">Round: {numOfGames}</h6>\n            <h4>\n              <span id=\"score-1\" style={{ color: \"#f012be\" }}>\n                {score1}\n              </span>\n              <span className=\"text-primary\"> vs </span>\n              <span id=\"score-2\" className=\"text-success\">\n                {score2}\n              </span>\n            </h4>\n          </div>\n          {/* PLAYERS LEGEND */}\n          <div id=\"players\" className=\"col\">\n            <h6 className=\"player float-right\">\n              {currentUser.displayName}\n              <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n            </h6>\n            <h6 className=\"player float-right\">\n              Peanutbot\n              <div className=\"bg-success indicator rounded ml-2\" />\n            </h6>\n          </div>\n        </div>\n      </div>\n\n      <div id=\"boarder\">\n        <div id=\"grid\">\n          {grid.map((row, rowIndex) => (\n            <div className=\"row\" key={rowIndex}>\n              {row.map((value, colIdx) => (\n                <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* WHO's TURN DISPLAY*/}\n      <h4 className=\"text-center mt-4\" style={{ color: huPlayerIsNext ? \"#f012be\" : \"#2ecc40\" }}>\n        {result ? \"\" : huPlayerIsNext ? \"Your turn\" : \"Peanutbot's turn\"}\n      </h4>\n\n      {/* RESULT DSIPLAY*/}\n      <h4 className=\"text-warning text-center mt-4\">{result}</h4>\n      <Button className=\"btn-warning w-100 mt-5\" onClick={handleReplay}>\n        Replay\n      </Button>\n      <Link to=\"/\" className=\"btn btn-warning w-100 mt-3\" onClick={handleQuit}>\n        Quit\n      </Link>\n      <div>{JSON.stringify(grid)}</div>\n    </>\n  );\n}\n","/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js",["66","67"],"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult, findAValidMove, storeScore, fetchScore } from \"./help\";\nimport \"./game.css\";\nimport io from \"socket.io-client\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nexport default function MultiPlayer() {\n  const history = useHistory();\n  const { currentUser } = useAuth();\n  const [played, won] = fetchScore(currentUser.uid);\n\n  const numOfRows = 6;\n  const numOfCols = 7;\n\n  const initialGrid = createGrid(numOfRows, numOfCols);\n  const [grid, setGrid] = useState(initialGrid);\n  const [player1, assignPlayer1] = useState(\"\");\n  const [player2, assignPlayer2] = useState(\"\");\n  const [ID, setID] = useState();\n  const [currentPlayer, setCurrentPlayer] = useState(true);\n  const [numOfGames, setNumOfGames] = useState(1);\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  const [result, displayResult] = useState(\"\");\n  const [warning, displayWarning] = useState(\"\");\n  const [ready, toggleReady] = useState(false);\n  const [turn, switchTurn] = useState(true);\n  const [thisTurn, endThisTurn] = useState();\n  const [replayButton, disableReplayButton] = useState(false);\n\n  useEffect(() => {\n    const client = io(\"http://localhost:3001/\");\n\n    // ignore the 3rd player\n    client.on(\"full-server\", () => {\n      alert(\"Sorry, server is full!\");\n      history.push(\"/\");\n    });\n\n    client.on(\"player-1-connecting\", (player2name) => {\n      // console.log(currentUser.uid);\n      // console.log(\"player1\");\n      assignPlayer1(currentUser.displayName);\n      setID(currentUser.uid);\n      // console.log(\"1\");\n      player2name && assignPlayer2(player2name);\n      switchTurn(false);\n      client.emit(\"player-connected\", currentUser.displayName);\n    });\n\n    client.on(\"player-2-connecting\", (player1name) => {\n      // console.log(currentUser.uid);\n      // console.log(\"2\");\n      assignPlayer1(player1name);\n      assignPlayer2(currentUser.displayName);\n      setID(currentUser.uid);\n      setCurrentPlayer(false);\n      switchTurn(true);\n      client.emit(\"player-connected\", currentUser.displayName);\n    });\n\n    client.on(\"player-has-joined\", ({ playerIndex, name }) => {\n      if (playerIndex === 0) {\n        // console.log(\"3\");\n        assignPlayer1(name);\n        switchTurn(false);\n      } else {\n        // console.log(\"4\");\n        assignPlayer2(name);\n        switchTurn(true);\n      }\n    });\n\n    // update clients' grid , status and score\n    client.emit(\"update-game\", { grid, result, warning, turn });\n    client.on(\"update-game\", ({ grid, result, warning, turn }) => {\n      // console.log(\"updated\");\n\n      // replay was clicked\n      if (warning) {\n        setNumOfGames(numOfGames + 1);\n        displayWarning(\"Play again? Go!\");\n      } else {\n        displayWarning(\"\");\n      }\n\n      // There is a win/draw\n      if (result) {\n        if (result !== \"Draw\") result = \"üò± YOU LOST! üí©\";\n        displayResult(result + \"! ü§ù\");\n        turn ? setScore1(score1 + 1) : setScore2(score2 + 1);\n        storeScore(currentUser.uid, played + 1, won);\n      }\n\n      // no result yet\n      if (!result) {\n        displayResult(\"\");\n        toggleReady(!ready);\n        disableReplayButton(false);\n      }\n      setGrid(grid);\n      switchTurn(turn);\n    });\n\n    // handle disconnect\n    client.on(\"player-disconnected\", ({ name, num }) => {\n      // console.log(\"disconnected\");\n      num === 0 ? assignPlayer1(\"\") : assignPlayer2(\"\");\n      displayWarning(`${name} leftüí®`);\n    });\n    return () => {\n      client.disconnect();\n    };\n  }, [thisTurn]);\n\n  const handleMove = (colIdx) => {\n    if (ready && !result && player1 && player2) {\n      let newGrid = grid.slice();\n      const rowIdx = findAValidMove(newGrid, colIdx);\n      newGrid[rowIdx][colIdx] = currentPlayer ? \"Player-1\" : \"Player-2\";\n      let newResult = checkResult(newGrid);\n      if (newResult && newResult !== \"Draw\") {\n        disableReplayButton(true);\n        currentPlayer ? setScore1(score1 + 1) : setScore2(score2 + 1);\n        newResult = \"ü•Ç YOU WIN! üéâ\";\n        storeScore(currentUser.uid, played + 1, won + 1);\n      }\n      if (newResult === \"Draw\") {\n        disableReplayButton(true);\n        storeScore(currentUser.uid, played + 1, won);\n      }\n      displayWarning(\"\");\n      setGrid(newGrid);\n      displayResult(newResult);\n      toggleReady(false);\n      endThisTurn(!thisTurn);\n    }\n  };\n\n  const handleReplay = () => {\n    if (!result) storeScore(currentUser.uid, played + 1, won);\n    displayWarning(\"Replay request is sent! \");\n    setNumOfGames(numOfGames + 1);\n    toggleReady(false);\n    setGrid(initialGrid);\n    displayResult(\"\");\n    endThisTurn(!thisTurn);\n  };\n\n  const handleQuit = () => {\n    if (!warning && !result) storeScore(currentUser.uid, played + 1, won);\n  };\n\n  return (\n    <>\n      <div id=\"container\" className=\"container\">\n        <div className=\"row\">\n          {/* SCORE DSIPLAY */}\n          <div id=\"scores\" className=\"col\">\n            <h6 className=\"text-primary\">Round: {numOfGames}</h6>\n            <h4>\n              <span id=\"score-1\" style={{ color: \"#f012be\" }}>\n                {score1}\n              </span>\n              <span className=\"text-primary\"> vs </span>\n              <span id=\"score-2\" className=\"text-success\">\n                {score2}\n              </span>\n            </h4>\n          </div>\n          {/* PLAYERS LEGEND */}\n          <div id=\"players\" className=\"col\">\n            <h6 className=\"player float-right\">\n              {player1 ? player1 : \"Waiting...\"}\n              <div style={{ background: \"#f012be\" }} className=\"indicator rounded ml-2\" />\n            </h6>\n            <h6 className=\"player float-right\">\n              {player2 ? player2 : \"Waiting...\"}\n              <div className=\"bg-success indicator rounded ml-2\" />\n            </h6>\n          </div>\n        </div>\n      </div>\n\n      {/* Grid */}\n      <div id=\"boarder\">\n        <div id=\"grid\">\n          {grid.map((row, rowIdx) => (\n            <div className=\"row\" key={rowIdx}>\n              {row.map((value, colIdx) => (\n                <SquareGrid key={colIdx} value={value} colIdx={colIdx} handleMove={handleMove} />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* WHO's TURN DISPLAY*/}\n      <h4 className=\"text-center mt-4\" style={{ color: turn ? \"#f012be\" : \"#2ecc40\" }}>\n        {result\n          ? \"\"\n          : ready && player1 && player2\n          ? \"Your turn\"\n          : player1 && player2\n          ? `Waiting for ${turn ? player1 : player2}...`\n          : \"Waiting for a player to join...\"}\n      </h4>\n\n      {/* RESULT DSIPLAY*/}\n      <h4 className=\"text-center text-warning mt-4\">{result}</h4>\n\n      {/* WARNING DISPLAY */}\n      <h5 className=\"text-center text-warning mt-4\">{warning}</h5>\n\n      {/* BUTTONS*/}\n      <Button disabled={replayButton} className=\"btn-warning w-100 mt-4\" onClick={handleReplay}>\n        Replay\n      </Button>\n      <Link to=\"/\" className=\"btn btn-warning w-100 mt-3 \" onClick={handleQuit}>\n        Quit\n      </Link>\n      <div>{JSON.stringify(grid)}</div>\n    </>\n  );\n}\n","/Users/paulinez/connect-four/client/src/components/Game/help.js",[],"/Users/paulinez/connect-four/client/src/components/Game/SquareGrid.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":15,"column":3,"nodeType":"74","endLine":15,"endColumn":12,"suggestions":"75"},{"ruleId":"72","severity":1,"message":"76","line":45,"column":6,"nodeType":"77","endLine":45,"endColumn":12,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":22,"column":10,"nodeType":"74","messageId":"81","endLine":22,"endColumn":12},{"ruleId":"72","severity":1,"message":"82","line":117,"column":6,"nodeType":"77","endLine":117,"endColumn":16,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPlayedTotal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [currentUser.uid] as a second argument to the useEffect Hook.","Identifier",["86"],"React Hook useEffect has missing dependencies: 'aiPlayer', 'currentUser.uid', 'grid', 'huPlayerIsNext', 'played', 'score2', and 'won'. Either include them or remove the dependency array. You can also do a functional update 'setScore2(s => ...)' if you only need 'score2' in the 'setScore2' call.","ArrayExpression",["87"],"no-unused-vars","'ID' is assigned a value but never used.","unusedVar","React Hook useEffect has missing dependencies: 'currentUser.displayName', 'currentUser.uid', 'grid', 'history', 'numOfGames', 'played', 'ready', 'result', 'score1', 'score2', 'turn', 'warning', and 'won'. Either include them or remove the dependency array. You can also do a functional update 'setNumOfGames(n => ...)' if you only need 'numOfGames' in the 'setNumOfGames' call.",["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Add dependencies array: [currentUser.uid]",{"range":"95","text":"96"},"Update the dependencies array to be: [aiPlayer, currentUser.uid, grid, huPlayerIsNext, played, score2, turn, won]",{"range":"97","text":"98"},"Update the dependencies array to be: [currentUser.displayName, currentUser.uid, grid, history, numOfGames, played, ready, result, score1, score2, thisTurn, turn, warning, won]",{"range":"99","text":"100"},[735,735],", [currentUser.uid]",[1601,1607],"[aiPlayer, currentUser.uid, grid, huPlayerIsNext, played, score2, turn, won]",[3727,3737],"[currentUser.displayName, currentUser.uid, grid, history, numOfGames, played, ready, result, score1, score2, thisTurn, turn, warning, won]"]