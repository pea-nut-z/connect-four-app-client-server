{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult, findAValidMove, findAiMove, minScore, maxScore } from \"./help\";\nimport \"./multiPlayer.css\";\nexport default function SinglePlayer() {\n  _s();\n\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  const [warning, displayWarning] = useState(\"\");\n  const [result, displayResult] = useState(\"\");\n  const [turn, setTurn] = useState(false);\n  const prevGridRef = useRef();\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n  prevGridRef.current = grid;\n  useEffect(() => {\n    console.log(prevGridRef.current);\n    console.log(grid);\n    const check = prevGridRef.current[5].some(value => value !== null);\n\n    if (check) {\n      console.log(\"rendered preGrid\");\n      setGrid(prevGridRef.current);\n    }\n  }, [turn]);\n\n  const handleClick = (rowIndex, columnIndex) => {\n    if (!result && huPlayerIsNext) {\n      let newGrid = findAValidMove(grid, huPlayer, rowIndex, columnIndex);\n\n      if (!newGrid) {\n        displayWarning(\"Invalid Move!\");\n      } else {\n        displayWarning(\"\"); // setGrid(newGrid);\n\n        displayResult(checkResult(newGrid));\n\n        if (!result) {\n          // setHuPlayerIsNext(!huPlayerIsNext);\n          let copy = newGrid.slice(); // const [aiMoveRowIndex, aiMoveColumnIndex] = findAiMove(\n          //   copy,\n          //   huPlayer,\n          //   aiPlayer\n          // );\n\n          setTurn(!turn);\n        } // }\n        // console.log({  });\n        // console.log({ huPlayerIsNext });\n        // console.log({ newGrid });\n        // console.log({ test });\n        // setGrid(test);\n\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"turn-display\",\n      children: result ? \"\" : huPlayerIsNext ? \"Your turn\" : \"Peanutbot's turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: warning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SinglePlayer, \"Qnqwp4DCnSa+op7ewua6wu36Kv4=\");\n\n_c = SinglePlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js"],"names":["React","useState","useEffect","useRef","Button","Link","SquareGrid","createGrid","checkResult","findAValidMove","findAiMove","minScore","maxScore","SinglePlayer","blankGrid","grid","setGrid","huPlayerIsNext","setHuPlayerIsNext","warning","displayWarning","result","displayResult","turn","setTurn","prevGridRef","huPlayer","aiPlayer","current","console","log","check","some","value","handleClick","rowIndex","columnIndex","newGrid","copy","slice","handleReplay","window","location","reload","map","row"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport {\n  createGrid,\n  checkResult,\n  findAValidMove,\n  findAiMove,\n  minScore,\n  maxScore,\n} from \"./help\";\nimport \"./multiPlayer.css\";\n\nexport default function SinglePlayer() {\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  const [warning, displayWarning] = useState(\"\");\n  const [result, displayResult] = useState(\"\");\n  const [turn, setTurn] = useState(false);\n  const prevGridRef = useRef();\n\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n\n  prevGridRef.current = grid;\n  useEffect(() => {\n    console.log(prevGridRef.current);\n    console.log(grid);\n    const check = prevGridRef.current[5].some((value) => value !== null);\n    if (check) {\n      console.log(\"rendered preGrid\");\n      setGrid(prevGridRef.current);\n    }\n  }, [turn]);\n\n  const handleClick = (rowIndex, columnIndex) => {\n    if (!result && huPlayerIsNext) {\n      let newGrid = findAValidMove(grid, huPlayer, rowIndex, columnIndex);\n      if (!newGrid) {\n        displayWarning(\"Invalid Move!\");\n      } else {\n        displayWarning(\"\");\n        // setGrid(newGrid);\n        displayResult(checkResult(newGrid));\n\n        if (!result) {\n          // setHuPlayerIsNext(!huPlayerIsNext);\n          let copy = newGrid.slice();\n          // const [aiMoveRowIndex, aiMoveColumnIndex] = findAiMove(\n          //   copy,\n          //   huPlayer,\n          //   aiPlayer\n          // );\n          setTurn(!turn);\n        }\n        // }\n        // console.log({  });\n        // console.log({ huPlayerIsNext });\n        // console.log({ newGrid });\n        // console.log({ test });\n        // setGrid(test);\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\">\n        {grid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* WHO's TURN DISPLAY*/}\n      <span className=\"turn-display\">\n        {result ? \"\" : huPlayerIsNext ? \"Your turn\" : \"Peanutbot's turn\"}\n      </span>\n      <br />\n      {/* WARNING MSG*/}\n      <span>{warning}</span>\n      <br />\n      {/* WINNING RESULT*/}\n      <span>{result}</span>\n      <br />\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}