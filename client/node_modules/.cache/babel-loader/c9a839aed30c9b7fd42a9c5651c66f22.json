{"ast":null,"code":"const EventEmitter = require(\"events\");\n\nconst parser = require(\"engine.io-parser\");\n\nconst debug = require(\"debug\")(\"engine:transport\");\n/**\n * Noop function.\n *\n * @api private\n */\n\n\nfunction noop() {}\n\nclass Transport extends EventEmitter {\n  /**\n   * Transport constructor.\n   *\n   * @param {http.IncomingMessage} request\n   * @api public\n   */\n  constructor(req) {\n    super();\n    this.readyState = \"open\";\n    this.discarded = false;\n  }\n  /**\n   * Flags the transport as discarded.\n   *\n   * @api private\n   */\n\n\n  discard() {\n    this.discarded = true;\n  }\n  /**\n   * Called with an incoming HTTP request.\n   *\n   * @param {http.IncomingMessage} request\n   * @api private\n   */\n\n\n  onRequest(req) {\n    debug(\"setting request\");\n    this.req = req;\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n\n\n  close(fn) {\n    if (\"closed\" === this.readyState || \"closing\" === this.readyState) return;\n    this.readyState = \"closing\";\n    this.doClose(fn || noop);\n  }\n  /**\n   * Called with a transport error.\n   *\n   * @param {String} message error\n   * @param {Object} error description\n   * @api private\n   */\n\n\n  onError(msg, desc) {\n    if (this.listeners(\"error\").length) {\n      const err = new Error(msg);\n      err.type = \"TransportError\";\n      err.description = desc;\n      this.emit(\"error\", err);\n    } else {\n      debug(\"ignored transport error %s (%s)\", msg, desc);\n    }\n  }\n  /**\n   * Called with parsed out a packets from the data stream.\n   *\n   * @param {Object} packet\n   * @api private\n   */\n\n\n  onPacket(packet) {\n    this.emit(\"packet\", packet);\n  }\n  /**\n   * Called with the encoded packet data.\n   *\n   * @param {String} data\n   * @api private\n   */\n\n\n  onData(data) {\n    this.onPacket(parser.decodePacket(data));\n  }\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n\n\n  onClose() {\n    this.readyState = \"closed\";\n    this.emit(\"close\");\n  }\n\n}\n\nmodule.exports = Transport;","map":{"version":3,"sources":["/Users/paulinez/connect-four/node_modules/engine.io/lib/transport.js"],"names":["EventEmitter","require","parser","debug","noop","Transport","constructor","req","readyState","discarded","discard","onRequest","close","fn","doClose","onError","msg","desc","listeners","length","err","Error","type","description","emit","onPacket","packet","onData","data","decodePacket","onClose","module","exports"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA5B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiB,kBAAjB,CAAd;AAEA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,IAAT,GAAgB,CAAE;;AAElB,MAAMC,SAAN,SAAwBL,YAAxB,CAAqC;AACnC;AACF;AACA;AACA;AACA;AACA;AACEM,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf;AACA,SAAKC,UAAL,GAAkB,MAAlB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,GAAG;AACR,SAAKD,SAAL,GAAiB,IAAjB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,SAAS,CAACJ,GAAD,EAAM;AACbJ,IAAAA,KAAK,CAAC,iBAAD,CAAL;AACA,SAAKI,GAAL,GAAWA,GAAX;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,KAAK,CAACC,EAAD,EAAK;AACR,QAAI,aAAa,KAAKL,UAAlB,IAAgC,cAAc,KAAKA,UAAvD,EAAmE;AAEnE,SAAKA,UAAL,GAAkB,SAAlB;AACA,SAAKM,OAAL,CAAaD,EAAE,IAAIT,IAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAY;AACjB,QAAI,KAAKC,SAAL,CAAe,OAAf,EAAwBC,MAA5B,EAAoC;AAClC,YAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAUL,GAAV,CAAZ;AACAI,MAAAA,GAAG,CAACE,IAAJ,GAAW,gBAAX;AACAF,MAAAA,GAAG,CAACG,WAAJ,GAAkBN,IAAlB;AACA,WAAKO,IAAL,CAAU,OAAV,EAAmBJ,GAAnB;AACD,KALD,MAKO;AACLjB,MAAAA,KAAK,CAAC,iCAAD,EAAoCa,GAApC,EAAyCC,IAAzC,CAAL;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEQ,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACf,SAAKF,IAAL,CAAU,QAAV,EAAoBE,MAApB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,SAAKH,QAAL,CAAcvB,MAAM,CAAC2B,YAAP,CAAoBD,IAApB,CAAd;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,GAAG;AACR,SAAKtB,UAAL,GAAkB,QAAlB;AACA,SAAKgB,IAAL,CAAU,OAAV;AACD;;AA3FkC;;AA8FrCO,MAAM,CAACC,OAAP,GAAiB3B,SAAjB","sourcesContent":["const EventEmitter = require(\"events\");\nconst parser = require(\"engine.io-parser\");\nconst debug = require(\"debug\")(\"engine:transport\");\n\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop() {}\n\nclass Transport extends EventEmitter {\n  /**\n   * Transport constructor.\n   *\n   * @param {http.IncomingMessage} request\n   * @api public\n   */\n  constructor(req) {\n    super();\n    this.readyState = \"open\";\n    this.discarded = false;\n  }\n\n  /**\n   * Flags the transport as discarded.\n   *\n   * @api private\n   */\n  discard() {\n    this.discarded = true;\n  }\n\n  /**\n   * Called with an incoming HTTP request.\n   *\n   * @param {http.IncomingMessage} request\n   * @api private\n   */\n  onRequest(req) {\n    debug(\"setting request\");\n    this.req = req;\n  }\n\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n  close(fn) {\n    if (\"closed\" === this.readyState || \"closing\" === this.readyState) return;\n\n    this.readyState = \"closing\";\n    this.doClose(fn || noop);\n  }\n\n  /**\n   * Called with a transport error.\n   *\n   * @param {String} message error\n   * @param {Object} error description\n   * @api private\n   */\n  onError(msg, desc) {\n    if (this.listeners(\"error\").length) {\n      const err = new Error(msg);\n      err.type = \"TransportError\";\n      err.description = desc;\n      this.emit(\"error\", err);\n    } else {\n      debug(\"ignored transport error %s (%s)\", msg, desc);\n    }\n  }\n\n  /**\n   * Called with parsed out a packets from the data stream.\n   *\n   * @param {Object} packet\n   * @api private\n   */\n  onPacket(packet) {\n    this.emit(\"packet\", packet);\n  }\n\n  /**\n   * Called with the encoded packet data.\n   *\n   * @param {String} data\n   * @api private\n   */\n  onData(data) {\n    this.onPacket(parser.decodePacket(data));\n  }\n\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n  onClose() {\n    this.readyState = \"closed\";\n    this.emit(\"close\");\n  }\n}\n\nmodule.exports = Transport;\n"]},"metadata":{},"sourceType":"script"}