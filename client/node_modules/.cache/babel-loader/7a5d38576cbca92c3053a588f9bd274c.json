{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\nexport default function MultiPlayer() {\n  _s();\n\n  console.log(\"BEGIN\");\n  const history = useHistory();\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  let currentTurn = player1IsNext ? 1 : 2;\n  const [player1Ready, setPlayer1Ready] = useState(false);\n  const [player2Ready, setPlayer2Ready] = useState(false);\n  let player = 1;\n  useEffect(() => {\n    const client = io(\"http://localhost:3001\"); // client.on(\"this-is-player2\", () => {\n    //   toggleReady(!ready);\n    // });\n\n    client.on(\"player-num\", num => {\n      if (num === -1) {\n        alert(\"Sorry, server is full!\");\n        history.push(\"/\");\n      }\n\n      if (num === 0) {\n        console.log(\"i am player 1\");\n        toggleConnection1(true);\n        setPlayer1Ready(!player1Ready); //when 1 leave and return, and tthere is 2\n        // setUser1(true);\n      }\n\n      if (num === 1) {\n        console.log(\"i am player 2\");\n        toggleConnection1(true);\n        toggleConnection2(true);\n        player = 2;\n      }\n    });\n    client.on(\"inform-player1\", () => {\n      toggleConnection2(true);\n    });\n    client.on(\"inform-player2\", () => {\n      toggleConnection1(true);\n    }); // client.on(\"connection-status\", (status) => {\n    //   if (status[0]) {\n    //     toggleConnection1(true);\n    //   }\n    //   if (status[1]) {\n    //     toggleConnection2(true);\n    //   }\n    // });\n    // client.on(\"server-full\", () => {\n    //   alert(\"Sorry, server is full!\");\n    //   history.push(\"/\");\n    // });\n\n    client.on(\"player-disconnected\", num => {\n      if (num === 0) toggleConnection1(false);\n      if (num === 1) toggleConnection2(false);\n    });\n    client.emit(\"switch-turn\", () => {\n      console.log(\"switch-turn\");\n    });\n    client.on(\"take-the-turn\", () => {\n      if (player === 1) setPlayer1Ready(!player1IsNext);\n      if (player === 2) setPlayer2Ready(!player2IsNext);\n      console.log(\"my turn\");\n    });\n    client.emit(\"grid\", grid);\n    client.on(\"new-grid\", newGrid => {\n      setGrid(newGrid);\n    });\n    return () => {\n      client.disconnect();\n    };\n  }, [player1IsNext]);\n  let resultDisplay; // let result = checkResult(grid);\n  // if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  // if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  // if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // both players present??\n    if (player1Ready || player2Ready) {\n      let r = rowIndex;\n      let c = columnIndex;\n\n      if (grid[r + 1][c] !== null && grid[r][c] === null) {\n        let newGrid = grid.slice();\n        newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n        setGrid(newGrid);\n        if (player1Ready) setPlayer1Ready(!player1Ready);\n        if (player2Ready) setPlayer2Ready(!player2Ready);\n        setPlayer1IsNext(!player1IsNext);\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p1\",\n      children: [\"Player 1\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected1 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p2\",\n      children: [\"Player 2\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected2 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: player1IsNext ? \"player1Turn\" : \"player2Turn\",\n      children: player1IsNext ? \"Player1's turn\" : \"Player2's turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: resultDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MultiPlayer, \"GrvQTxFOKaqKuUGfRwBTIDzEmKg=\", false, function () {\n  return [useHistory];\n});\n\n_c = MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js"],"names":["React","useState","useEffect","useMemo","Button","Link","useHistory","SquareGrid","createGrid","checkResult","io","MultiPlayer","console","log","history","blankGrid","grid","setGrid","connected1","toggleConnection1","connected2","toggleConnection2","player1IsNext","setPlayer1IsNext","currentTurn","player1Ready","setPlayer1Ready","player2Ready","setPlayer2Ready","player","client","on","num","alert","push","emit","player2IsNext","newGrid","disconnect","resultDisplay","handleClick","rowIndex","columnIndex","r","c","slice","handleReplay","window","location","reload","map","row","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\n\nexport default function MultiPlayer() {\n  console.log(\"BEGIN\");\n\n  const history = useHistory();\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  let currentTurn = player1IsNext ? 1 : 2;\n  const [player1Ready, setPlayer1Ready] = useState(false);\n  const [player2Ready, setPlayer2Ready] = useState(false);\n\n  let player = 1;\n  useEffect(() => {\n    const client = io(\"http://localhost:3001\");\n\n    // client.on(\"this-is-player2\", () => {\n    //   toggleReady(!ready);\n    // });\n\n    client.on(\"player-num\", (num) => {\n      if (num === -1) {\n        alert(\"Sorry, server is full!\");\n        history.push(\"/\");\n      }\n      if (num === 0) {\n        console.log(\"i am player 1\");\n        toggleConnection1(true);\n        setPlayer1Ready(!player1Ready);\n        //when 1 leave and return, and tthere is 2\n        // setUser1(true);\n      }\n      if (num === 1) {\n        console.log(\"i am player 2\");\n        toggleConnection1(true);\n        toggleConnection2(true);\n        player = 2;\n      }\n    });\n\n    client.on(\"inform-player1\", () => {\n      toggleConnection2(true);\n    });\n\n    client.on(\"inform-player2\", () => {\n      toggleConnection1(true);\n    });\n\n    // client.on(\"connection-status\", (status) => {\n    //   if (status[0]) {\n    //     toggleConnection1(true);\n    //   }\n    //   if (status[1]) {\n    //     toggleConnection2(true);\n    //   }\n    // });\n\n    // client.on(\"server-full\", () => {\n    //   alert(\"Sorry, server is full!\");\n    //   history.push(\"/\");\n    // });\n\n    client.on(\"player-disconnected\", (num) => {\n      if (num === 0) toggleConnection1(false);\n      if (num === 1) toggleConnection2(false);\n    });\n\n    client.emit(\"switch-turn\", () => {\n      console.log(\"switch-turn\");\n    });\n\n    client.on(\"take-the-turn\", () => {\n      if (player === 1) setPlayer1Ready(!player1IsNext);\n      if (player === 2) setPlayer2Ready(!player2IsNext);\n      console.log(\"my turn\");\n    });\n\n    client.emit(\"grid\", grid);\n\n    client.on(\"new-grid\", (newGrid) => {\n      setGrid(newGrid);\n    });\n\n    return () => {\n      client.disconnect();\n    };\n  }, [player1IsNext]);\n\n  let resultDisplay;\n  // let result = checkResult(grid);\n  // if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  // if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  // if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // both players present??\n    if (player1Ready || player2Ready) {\n      let r = rowIndex;\n      let c = columnIndex;\n\n      if (grid[r + 1][c] !== null && grid[r][c] === null) {\n        let newGrid = grid.slice();\n        newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n        setGrid(newGrid);\n        if (player1Ready) setPlayer1Ready(!player1Ready);\n        if (player2Ready) setPlayer2Ready(!player2Ready);\n        setPlayer1IsNext(!player1IsNext);\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\">\n        {grid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* CONNECTION INDICATOR */}\n\n      <div className=\"player p1\">\n        Player 1\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected1 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      <div className=\"player p2\">\n        Player 2\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected2 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      {/* WHO's TURN    result ? \"\" :     */}\n      <span className={player1IsNext ? \"player1Turn\" : \"player2Turn\"}>\n        {player1IsNext ? \"Player1's turn\" : \"Player2's turn\"}\n      </span>\n      <br />\n\n      <span>{resultDisplay}</span>\n\n      <Button>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      {/* <p>{huMoves}</p> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}