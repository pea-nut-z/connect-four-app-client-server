{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/Users/paulinez/connect-four/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Button}from\"react-bootstrap\";import{Link}from\"react-router-dom\";import SquareGrid from\"./SquareGrid\";import{createGrid,checkResult}from\"./help\";import\"./multiPlayer.css\";import io from\"socket.io-client\";export default function MultiPlayer(props){var socket=io.connect(\"http://localhost:3000/multi-player\");var grid=createGrid(6,7);var _useState=useState(grid),_useState2=_slicedToArray(_useState,2),newGrid=_useState2[0],setGrid=_useState2[1];//   const [stepNumber, setStepNumber] = useState(0);\nvar _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),player1IsNext=_useState4[0],setPlayer1IsNext=_useState4[1];//   const [huMoves, recordHuMoves] = useState([]); //For debug\nvar turn=player1IsNext?\"Player1's turn\":\"Player2's turn\";//   let resultDisplay;\n//   let result = checkResult(newGrid);\n//   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n//   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n//   if (result === \"tie\") resultDisplay = \"Draw!\";\nvar handleClick=function handleClick(rowIndex,columnIndex){// if (!result) {\nvar r=rowIndex;var c=columnIndex;if(newGrid[r+1][c]!==null&&newGrid[r][c]===null){// recordHuMoves((moves) => [...moves, \"(\" + r + \",\" + c + \")\"]); //For debug\nnewGrid[r][c]=player1IsNext?\"player1\":\"player2\";setPlayer1IsNext(!player1IsNext);}// }\n};function handleReplay(){window.location.reload(false);}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{id:\"grid\",children:newGrid.map(function(row,rowIndex){return/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:row.map(function(value,columnIndex){return/*#__PURE__*/_jsx(SquareGrid,{value:value,rowIndex:rowIndex,columnIndex:columnIndex,handleClick:handleClick},columnIndex);})},rowIndex);})}),/*#__PURE__*/_jsx(\"span\",{className:player1IsNext?\"player1Turn\":\"player2Turn\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Button,{onClick:handleReplay,children:\"Replay\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Link,{to:\"/\",className:\"btn btn-primary w-100 mt-3\",children:\"Quit\"}),/*#__PURE__*/_jsx(\"br\",{})]});}","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js"],"names":["React","useState","Button","Link","SquareGrid","createGrid","checkResult","io","MultiPlayer","props","socket","connect","grid","newGrid","setGrid","player1IsNext","setPlayer1IsNext","turn","handleClick","rowIndex","columnIndex","r","c","handleReplay","window","location","reload","map","row","value"],"mappings":"uSAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,MAAT,KAAuB,iBAAvB,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,OAASC,UAAT,CAAqBC,WAArB,KAAwC,QAAxC,CACA,MAAO,mBAAP,CACA,MAAOC,CAAAA,EAAP,KAAe,kBAAf,CAEA,cAAe,SAASC,CAAAA,WAAT,CAAqBC,KAArB,CAA4B,CACzC,GAAMC,CAAAA,MAAM,CAAGH,EAAE,CAACI,OAAH,CAAW,oCAAX,CAAf,CACA,GAAMC,CAAAA,IAAI,CAAGP,UAAU,CAAC,CAAD,CAAI,CAAJ,CAAvB,CAFyC,cAGdJ,QAAQ,CAACW,IAAD,CAHM,wCAGlCC,OAHkC,eAGzBC,OAHyB,eAIzC;AAJyC,eAKCb,QAAQ,CAAC,IAAD,CALT,yCAKlCc,aALkC,eAKnBC,gBALmB,eAMzC;AACA,GAAIC,CAAAA,IAAI,CAAGF,aAAa,CAAG,gBAAH,CAAsB,gBAA9C,CAEA;AACA;AACA;AACA;AACA;AAEA,GAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,QAAD,CAAWC,WAAX,CAA2B,CAC7C;AACA,GAAIC,CAAAA,CAAC,CAAGF,QAAR,CACA,GAAIG,CAAAA,CAAC,CAAGF,WAAR,CAEA,GAAIP,OAAO,CAACQ,CAAC,CAAG,CAAL,CAAP,CAAeC,CAAf,IAAsB,IAAtB,EAA8BT,OAAO,CAACQ,CAAD,CAAP,CAAWC,CAAX,IAAkB,IAApD,CAA0D,CACxD;AACAT,OAAO,CAACQ,CAAD,CAAP,CAAWC,CAAX,EAAgBP,aAAa,CAAG,SAAH,CAAe,SAA5C,CACAC,gBAAgB,CAAC,CAACD,aAAF,CAAhB,CACD,CACD;AACD,CAXD,CAaA,QAASQ,CAAAA,YAAT,EAAwB,CACtBC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB,EACD,CAED,mBACE,wCACE,YAAK,EAAE,CAAC,MAAR,UACGb,OAAO,CAACc,GAAR,CAAY,SAACC,GAAD,CAAMT,QAAN,qBACX,YAAK,SAAS,CAAC,KAAf,UACGS,GAAG,CAACD,GAAJ,CAAQ,SAACE,KAAD,CAAQT,WAAR,qBACP,KAAC,UAAD,EAEE,KAAK,CAAES,KAFT,CAGE,QAAQ,CAAEV,QAHZ,CAIE,WAAW,CAAEC,WAJf,CAKE,WAAW,CAAEF,WALf,EACOE,WADP,CADO,EAAR,CADH,EAA0BD,QAA1B,CADW,EAAZ,CADH,EADF,cAkBE,aAAM,SAAS,CAAEJ,aAAa,CAAG,aAAH,CAAmB,aAAjD,EAlBF,cAqBE,aArBF,cAwBE,KAAC,MAAD,EAAQ,OAAO,CAAEQ,YAAjB,oBAxBF,cAyBE,aAzBF,cA0BE,KAAC,IAAD,EAAM,EAAE,CAAC,GAAT,CAAa,SAAS,CAAC,4BAAvB,kBA1BF,cA6BE,aA7BF,GADF,CAmCD","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\n\nexport default function MultiPlayer(props) {\n  const socket = io.connect(\"http://localhost:3000/multi-player\");\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n  //   const [stepNumber, setStepNumber] = useState(0);\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  //   const [huMoves, recordHuMoves] = useState([]); //For debug\n  let turn = player1IsNext ? \"Player1's turn\" : \"Player2's turn\";\n\n  //   let resultDisplay;\n  //   let result = checkResult(newGrid);\n  //   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  //   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  //   if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    let r = rowIndex;\n    let c = columnIndex;\n\n    if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n      // recordHuMoves((moves) => [...moves, \"(\" + r + \",\" + c + \")\"]); //For debug\n      newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n      setPlayer1IsNext(!player1IsNext);\n    }\n    // }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      <div id=\"grid\">\n        {newGrid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* Who's turn */}\n      <span className={player1IsNext ? \"player1Turn\" : \"player2Turn\"}>\n        {/* {result ? \"\" : turn} */}\n      </span>\n      <br />\n\n      {/* <span>{resultDisplay}</span> */}\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      {/* <p>{huMoves}</p> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}