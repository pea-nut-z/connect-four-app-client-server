{"ast":null,"code":"const Transport = require(\"../transport\");\n\nconst parser = require(\"engine.io-parser\");\n\nconst debug = require(\"debug\")(\"engine:ws\");\n\nclass WebSocket extends Transport {\n  /**\n   * WebSocket transport\n   *\n   * @param {http.IncomingMessage}\n   * @api public\n   */\n  constructor(req) {\n    super(req);\n    this.socket = req.websocket;\n    this.socket.on(\"message\", this.onData.bind(this));\n    this.socket.once(\"close\", this.onClose.bind(this));\n    this.socket.on(\"error\", this.onError.bind(this));\n    this.socket.on(\"headers\", headers => {\n      this.emit(\"headers\", headers);\n    });\n    this.writable = true;\n    this.perMessageDeflate = null;\n  }\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n\n  get name() {\n    return \"websocket\";\n  }\n  /**\n   * Advertise upgrade support.\n   *\n   * @api public\n   */\n\n\n  get handlesUpgrades() {\n    return true;\n  }\n  /**\n   * Advertise framing support.\n   *\n   * @api public\n   */\n\n\n  get supportsFraming() {\n    return true;\n  }\n  /**\n   * Processes the incoming data.\n   *\n   * @param {String} encoded packet\n   * @api private\n   */\n\n\n  onData(data) {\n    debug('received \"%s\"', data);\n    super.onData(data);\n  }\n  /**\n   * Writes a packet payload.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n\n\n  send(packets) {\n    var self = this;\n\n    for (var i = 0; i < packets.length; i++) {\n      var packet = packets[i];\n      parser.encodePacket(packet, self.supportsBinary, send);\n    }\n\n    function send(data) {\n      debug('writing \"%s\"', data); // always creates a new object since ws modifies it\n\n      var opts = {};\n\n      if (packet.options) {\n        opts.compress = packet.options.compress;\n      }\n\n      if (self.perMessageDeflate) {\n        var len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n        if (len < self.perMessageDeflate.threshold) {\n          opts.compress = false;\n        }\n      }\n\n      self.writable = false;\n      self.socket.send(data, opts, onEnd);\n    }\n\n    function onEnd(err) {\n      if (err) return self.onError(\"write error\", err.stack);\n      self.writable = true;\n      self.emit(\"drain\");\n    }\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n\n\n  doClose(fn) {\n    debug(\"closing\");\n    this.socket.close();\n    fn && fn();\n  }\n\n}\n\nmodule.exports = WebSocket;","map":{"version":3,"sources":["/Users/paulinez/connect-four/node_modules/engine.io/lib/transports/websocket.js"],"names":["Transport","require","parser","debug","WebSocket","constructor","req","socket","websocket","on","onData","bind","once","onClose","onError","headers","emit","writable","perMessageDeflate","name","handlesUpgrades","supportsFraming","data","send","packets","self","i","length","packet","encodePacket","supportsBinary","opts","options","compress","len","Buffer","byteLength","threshold","onEnd","err","stack","doClose","fn","close","module","exports"],"mappings":"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","sourcesContent":["const Transport = require(\"../transport\");\nconst parser = require(\"engine.io-parser\");\nconst debug = require(\"debug\")(\"engine:ws\");\n\nclass WebSocket extends Transport {\n  /**\n   * WebSocket transport\n   *\n   * @param {http.IncomingMessage}\n   * @api public\n   */\n  constructor(req) {\n    super(req);\n    this.socket = req.websocket;\n    this.socket.on(\"message\", this.onData.bind(this));\n    this.socket.once(\"close\", this.onClose.bind(this));\n    this.socket.on(\"error\", this.onError.bind(this));\n    this.socket.on(\"headers\", headers => {\n      this.emit(\"headers\", headers);\n    });\n    this.writable = true;\n    this.perMessageDeflate = null;\n  }\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n  get name() {\n    return \"websocket\";\n  }\n\n  /**\n   * Advertise upgrade support.\n   *\n   * @api public\n   */\n  get handlesUpgrades() {\n    return true;\n  }\n\n  /**\n   * Advertise framing support.\n   *\n   * @api public\n   */\n  get supportsFraming() {\n    return true;\n  }\n\n  /**\n   * Processes the incoming data.\n   *\n   * @param {String} encoded packet\n   * @api private\n   */\n  onData(data) {\n    debug('received \"%s\"', data);\n    super.onData(data);\n  }\n\n  /**\n   * Writes a packet payload.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n  send(packets) {\n    var self = this;\n\n    for (var i = 0; i < packets.length; i++) {\n      var packet = packets[i];\n      parser.encodePacket(packet, self.supportsBinary, send);\n    }\n\n    function send(data) {\n      debug('writing \"%s\"', data);\n\n      // always creates a new object since ws modifies it\n      var opts = {};\n      if (packet.options) {\n        opts.compress = packet.options.compress;\n      }\n\n      if (self.perMessageDeflate) {\n        var len =\n          \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n        if (len < self.perMessageDeflate.threshold) {\n          opts.compress = false;\n        }\n      }\n\n      self.writable = false;\n      self.socket.send(data, opts, onEnd);\n    }\n\n    function onEnd(err) {\n      if (err) return self.onError(\"write error\", err.stack);\n      self.writable = true;\n      self.emit(\"drain\");\n    }\n  }\n\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n  doClose(fn) {\n    debug(\"closing\");\n    this.socket.close();\n    fn && fn();\n  }\n}\n\nmodule.exports = WebSocket;\n"]},"metadata":{},"sourceType":"script"}