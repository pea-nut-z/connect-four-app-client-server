{"ast":null,"code":"export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\nexport function checkResult(grid) {\n  if (!grid) return;\n\n  for (let x in grid) {\n    x = parseInt(x);\n\n    for (let y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n      if (value === \"base\") continue;\n\n      if ( //left and right\n      value && value === grid[x][y + 1] && value === grid[x][y + 2] && value === grid[x][y + 3] || //up and down\n      value && value === grid[x + 1][y] && value === grid[x + 2][y] && value === grid[x + 3][y] || //diagonal - left to right (\\)\n      value && value === grid[x + 1][y + 1] && value === grid[x + 2][y + 2] && value === grid[x + 3][y + 3] || //diagonal - right to left (/)\n      value && value === grid[x + 1][y - 1] && value === grid[x + 2][y - 2] && value === grid[x + 3][y - 3]) {\n        return value + \" wins\";\n      }\n\n      const tie = grid.every(row => !row.includes(null));\n      if (tie) return \"Draw!\";\n    }\n  }\n}\nexport function findAValidMove(grid, player, rowIndex, columnIndex) {\n  let r = rowIndex;\n  let c = columnIndex;\n\n  if (grid[r][c] === \"base\") {\n    return null;\n  }\n\n  if (grid[r + 1][c] !== null && grid[r][c] === null) {\n    const copyGrid = grid.slice();\n    copyGrid[r][c] = player;\n    return copyGrid;\n  }\n\n  return null;\n}\nexport function findAiMove(grid, huPlayer, aiPlayer) {\n  let bestMoveScore = 100;\n  let move = [];\n\n  for (let rowIndex in grid) {\n    console.log(\"checking new row\");\n    rowIndex = parseInt(rowIndex);\n\n    for (let columnIndex in grid[rowIndex]) {\n      columnIndex = parseInt(columnIndex);\n      const newGrid1 = findAValidMove(grid, aiPlayer, rowIndex, columnIndex);\n\n      if (newGrid1) {\n        const moveScore = maxScore(newGrid1, huPlayer, aiPlayer); // newGrid1[rowIndex][columnIndex] = null;\n\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move[0] = rowIndex;\n          move[1] = columnIndex;\n        }\n      }\n    }\n  }\n\n  console.log({\n    move\n  });\n  return move;\n}\n\nfunction minScore(grid, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n\n  if (result === \"Player-1 wins\") {\n    // console.log(\"min checked1\");\n    return 10;\n  }\n\n  if (result === \"Player-2 wins\") {\n    // console.log(\"min checked2\");\n    return -10;\n  }\n\n  if (result === \"Draw\") {\n    // console.log(\"min checked3\");\n    return 0;\n  }\n\n  let bestMoveScore = 100;\n\n  for (let rowIndex in grid) {\n    rowIndex = parseInt(rowIndex);\n\n    for (let columnIndex in grid[rowIndex]) {\n      columnIndex = parseInt(columnIndex);\n      const newGrid3 = findAValidMove(grid, aiPlayer, rowIndex, columnIndex);\n\n      if (newGrid3) {\n        const moveScore = maxScore(newGrid3, huPlayer, aiPlayer);\n        newGrid3[rowIndex][columnIndex] = null;\n\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n        }\n      }\n    }\n  }\n\n  return bestMoveScore;\n}\n\nfunction maxScore(grid, huPlayer, aiPlayer) {\n  return -1; // let result = checkResult(grid);\n  // if (result === \"Player-1 wins\") {\n  //   // console.log(\"max checked\");\n  //   return 10;\n  // }\n  // if (result === \"Player-2 wins\") {\n  //   // console.log(\"max checked\");\n  //   return -10;\n  // }\n  // if (result === \"Draw\") {\n  //   // console.log(\"max checked\");\n  //   return 0;\n  // }\n  // let bestMoveScore = -100;\n  // for (let rowIndex in grid) {\n  //   rowIndex = parseInt(rowIndex);\n  //   for (let columnIndex in grid[rowIndex]) {\n  //     columnIndex = parseInt(columnIndex);\n  //     const newGrid2 = findAValidMove(grid, huPlayer, rowIndex, columnIndex);\n  //     if (newGrid2) {\n  //       const moveScore = minScore(newGrid2, huPlayer, aiPlayer);\n  //       newGrid2[rowIndex][columnIndex] = null;\n  //       // console.log({ moveScore });\n  //       if (moveScore > bestMoveScore) {\n  //         bestMoveScore = moveScore;\n  //         // console.log({ bestMoveScore });\n  //       }\n  //     }\n  //   }\n  // }\n  // return bestMoveScore;\n}","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/help.js"],"names":["createGrid","rows","columns","grid","i","push","Array","fill","checkResult","x","parseInt","y","value","tie","every","row","includes","findAValidMove","player","rowIndex","columnIndex","r","c","copyGrid","slice","findAiMove","huPlayer","aiPlayer","bestMoveScore","move","console","log","newGrid1","moveScore","maxScore","minScore","result","newGrid3"],"mappings":"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","sourcesContent":["export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\n\nexport function checkResult(grid) {\n  if (!grid) return;\n\n  for (let x in grid) {\n    x = parseInt(x);\n    for (let y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n\n      if (value === \"base\") continue;\n      if (\n        //left and right\n        (value &&\n          value === grid[x][y + 1] &&\n          value === grid[x][y + 2] &&\n          value === grid[x][y + 3]) ||\n        //up and down\n        (value &&\n          value === grid[x + 1][y] &&\n          value === grid[x + 2][y] &&\n          value === grid[x + 3][y]) ||\n        //diagonal - left to right (\\)\n        (value &&\n          value === grid[x + 1][y + 1] &&\n          value === grid[x + 2][y + 2] &&\n          value === grid[x + 3][y + 3]) ||\n        //diagonal - right to left (/)\n        (value &&\n          value === grid[x + 1][y - 1] &&\n          value === grid[x + 2][y - 2] &&\n          value === grid[x + 3][y - 3])\n      ) {\n        return value + \" wins\";\n      }\n      const tie = grid.every((row) => !row.includes(null));\n      if (tie) return \"Draw!\";\n    }\n  }\n}\n\nexport function findAValidMove(grid, player, rowIndex, columnIndex) {\n  let r = rowIndex;\n  let c = columnIndex;\n  if (grid[r][c] === \"base\") {\n    return null;\n  }\n  if (grid[r + 1][c] !== null && grid[r][c] === null) {\n    const copyGrid = grid.slice();\n    copyGrid[r][c] = player;\n    return copyGrid;\n  }\n  return null;\n}\n\nexport function findAiMove(grid, huPlayer, aiPlayer) {\n  let bestMoveScore = 100;\n  let move = [];\n\n  for (let rowIndex in grid) {\n    console.log(\"checking new row\");\n    rowIndex = parseInt(rowIndex);\n    for (let columnIndex in grid[rowIndex]) {\n      columnIndex = parseInt(columnIndex);\n      const newGrid1 = findAValidMove(grid, aiPlayer, rowIndex, columnIndex);\n      if (newGrid1) {\n        const moveScore = maxScore(newGrid1, huPlayer, aiPlayer);\n        // newGrid1[rowIndex][columnIndex] = null;\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move[0] = rowIndex;\n          move[1] = columnIndex;\n        }\n      }\n    }\n  }\n  console.log({ move });\n  return move;\n}\n\nfunction minScore(grid, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n  if (result === \"Player-1 wins\") {\n    // console.log(\"min checked1\");\n    return 10;\n  }\n  if (result === \"Player-2 wins\") {\n    // console.log(\"min checked2\");\n    return -10;\n  }\n  if (result === \"Draw\") {\n    // console.log(\"min checked3\");\n    return 0;\n  }\n\n  let bestMoveScore = 100;\n  for (let rowIndex in grid) {\n    rowIndex = parseInt(rowIndex);\n    for (let columnIndex in grid[rowIndex]) {\n      columnIndex = parseInt(columnIndex);\n      const newGrid3 = findAValidMove(grid, aiPlayer, rowIndex, columnIndex);\n      if (newGrid3) {\n        const moveScore = maxScore(newGrid3, huPlayer, aiPlayer);\n        newGrid3[rowIndex][columnIndex] = null;\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n        }\n      }\n    }\n  }\n  return bestMoveScore;\n}\n\nfunction maxScore(grid, huPlayer, aiPlayer) {\n  return -1;\n  // let result = checkResult(grid);\n  // if (result === \"Player-1 wins\") {\n  //   // console.log(\"max checked\");\n  //   return 10;\n  // }\n  // if (result === \"Player-2 wins\") {\n  //   // console.log(\"max checked\");\n  //   return -10;\n  // }\n  // if (result === \"Draw\") {\n  //   // console.log(\"max checked\");\n  //   return 0;\n  // }\n  // let bestMoveScore = -100;\n  // for (let rowIndex in grid) {\n  //   rowIndex = parseInt(rowIndex);\n  //   for (let columnIndex in grid[rowIndex]) {\n  //     columnIndex = parseInt(columnIndex);\n  //     const newGrid2 = findAValidMove(grid, huPlayer, rowIndex, columnIndex);\n  //     if (newGrid2) {\n  //       const moveScore = minScore(newGrid2, huPlayer, aiPlayer);\n  //       newGrid2[rowIndex][columnIndex] = null;\n  //       // console.log({ moveScore });\n\n  //       if (moveScore > bestMoveScore) {\n  //         bestMoveScore = moveScore;\n  //         // console.log({ bestMoveScore });\n  //       }\n  //     }\n  //   }\n  // }\n  // return bestMoveScore;\n}\n"]},"metadata":{},"sourceType":"module"}