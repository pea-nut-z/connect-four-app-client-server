{"ast":null,"code":"/**\n * Module dependencies.\n */\nconst http = require(\"http\");\n\nconst Server = require(\"./server\");\n/**\n * Invoking the library as a function delegates to attach if the first argument\n * is an `http.Server`.\n *\n * If there are no arguments or the first argument is an options object, then\n * a new Server instance is returned.\n *\n * @param {http.Server} server (if specified, will be attached to by the new Server instance)\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\n\nexports = module.exports = function () {\n  // backwards compatible use as `.attach`\n  // if first argument is an http server\n  if (arguments.length && arguments[0] instanceof http.Server) {\n    return attach.apply(this, arguments);\n  } // if first argument is not an http server, then just make a regular eio server\n\n\n  return new Server(...arguments);\n};\n/**\n * Protocol revision number.\n *\n * @api public\n */\n\n\nexports.protocol = 1;\n/**\n * Expose Server constructor.\n *\n * @api public\n */\n\nexports.Server = Server;\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\n\nexports.Socket = require(\"./socket\");\n/**\n * Expose Transport constructor.\n *\n * @api public\n */\n\nexports.Transport = require(\"./transport\");\n/**\n * Expose mutable list of available transports.\n *\n * @api public\n */\n\nexports.transports = require(\"./transports\");\n/**\n * Exports parser.\n *\n * @api public\n */\n\nexports.parser = require(\"engine.io-parser\");\n/**\n * Creates an http.Server exclusively used for WS upgrades.\n *\n * @param {Number} port\n * @param {Function} callback\n * @param {Object} options\n * @return {Server} websocket.io server\n * @api public\n */\n\nexports.listen = listen;\n\nfunction listen(port, options, fn) {\n  if (\"function\" === typeof options) {\n    fn = options;\n    options = {};\n  }\n\n  const server = http.createServer(function (req, res) {\n    res.writeHead(501);\n    res.end(\"Not Implemented\");\n  }); // create engine server\n\n  const engine = exports.attach(server, options);\n  engine.httpServer = server;\n  server.listen(port, fn);\n  return engine;\n}\n/**\n * Captures upgrade requests for a http.Server.\n *\n * @param {http.Server} server\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\n\nexports.attach = attach;\n\nfunction attach(server, options) {\n  const engine = new Server(options);\n  engine.attach(server, options);\n  return engine;\n}","map":{"version":3,"sources":["/Users/paulinez/connect-four/node_modules/engine.io/lib/engine.io.js"],"names":["http","require","Server","exports","module","arguments","length","attach","apply","protocol","Socket","Transport","transports","parser","listen","port","options","fn","server","createServer","req","res","writeHead","end","engine","httpServer"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB,YAAW;AACpC;AACA;AACA,MAAIE,SAAS,CAACC,MAAV,IAAoBD,SAAS,CAAC,CAAD,CAAT,YAAwBL,IAAI,CAACE,MAArD,EAA6D;AAC3D,WAAOK,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAP;AACD,GALmC,CAOpC;;;AACA,SAAO,IAAIH,MAAJ,CAAW,GAAGG,SAAd,CAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;;;AAEAF,OAAO,CAACM,QAAR,GAAmB,CAAnB;AAEA;AACA;AACA;AACA;AACA;;AAEAN,OAAO,CAACD,MAAR,GAAiBA,MAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACO,MAAR,GAAiBT,OAAO,CAAC,UAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;;AAEAE,OAAO,CAACQ,SAAR,GAAoBV,OAAO,CAAC,aAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;;AAEAE,OAAO,CAACS,UAAR,GAAqBX,OAAO,CAAC,cAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;;AAEAE,OAAO,CAACU,MAAR,GAAiBZ,OAAO,CAAC,kBAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,OAAO,CAACW,MAAR,GAAiBA,MAAjB;;AAEA,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,EAA/B,EAAmC;AACjC,MAAI,eAAe,OAAOD,OAA1B,EAAmC;AACjCC,IAAAA,EAAE,GAAGD,OAAL;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,QAAME,MAAM,GAAGlB,IAAI,CAACmB,YAAL,CAAkB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAClDA,IAAAA,GAAG,CAACC,SAAJ,CAAc,GAAd;AACAD,IAAAA,GAAG,CAACE,GAAJ,CAAQ,iBAAR;AACD,GAHc,CAAf,CANiC,CAWjC;;AACA,QAAMC,MAAM,GAAGrB,OAAO,CAACI,MAAR,CAAeW,MAAf,EAAuBF,OAAvB,CAAf;AACAQ,EAAAA,MAAM,CAACC,UAAP,GAAoBP,MAApB;AAEAA,EAAAA,MAAM,CAACJ,MAAP,CAAcC,IAAd,EAAoBE,EAApB;AAEA,SAAOO,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEArB,OAAO,CAACI,MAAR,GAAiBA,MAAjB;;AAEA,SAASA,MAAT,CAAgBW,MAAhB,EAAwBF,OAAxB,EAAiC;AAC/B,QAAMQ,MAAM,GAAG,IAAItB,MAAJ,CAAWc,OAAX,CAAf;AACAQ,EAAAA,MAAM,CAACjB,MAAP,CAAcW,MAAd,EAAsBF,OAAtB;AACA,SAAOQ,MAAP;AACD","sourcesContent":["/**\n * Module dependencies.\n */\n\nconst http = require(\"http\");\nconst Server = require(\"./server\");\n\n/**\n * Invoking the library as a function delegates to attach if the first argument\n * is an `http.Server`.\n *\n * If there are no arguments or the first argument is an options object, then\n * a new Server instance is returned.\n *\n * @param {http.Server} server (if specified, will be attached to by the new Server instance)\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\nexports = module.exports = function() {\n  // backwards compatible use as `.attach`\n  // if first argument is an http server\n  if (arguments.length && arguments[0] instanceof http.Server) {\n    return attach.apply(this, arguments);\n  }\n\n  // if first argument is not an http server, then just make a regular eio server\n  return new Server(...arguments);\n};\n\n/**\n * Protocol revision number.\n *\n * @api public\n */\n\nexports.protocol = 1;\n\n/**\n * Expose Server constructor.\n *\n * @api public\n */\n\nexports.Server = Server;\n\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\n\nexports.Socket = require(\"./socket\");\n\n/**\n * Expose Transport constructor.\n *\n * @api public\n */\n\nexports.Transport = require(\"./transport\");\n\n/**\n * Expose mutable list of available transports.\n *\n * @api public\n */\n\nexports.transports = require(\"./transports\");\n\n/**\n * Exports parser.\n *\n * @api public\n */\n\nexports.parser = require(\"engine.io-parser\");\n\n/**\n * Creates an http.Server exclusively used for WS upgrades.\n *\n * @param {Number} port\n * @param {Function} callback\n * @param {Object} options\n * @return {Server} websocket.io server\n * @api public\n */\n\nexports.listen = listen;\n\nfunction listen(port, options, fn) {\n  if (\"function\" === typeof options) {\n    fn = options;\n    options = {};\n  }\n\n  const server = http.createServer(function(req, res) {\n    res.writeHead(501);\n    res.end(\"Not Implemented\");\n  });\n\n  // create engine server\n  const engine = exports.attach(server, options);\n  engine.httpServer = server;\n\n  server.listen(port, fn);\n\n  return engine;\n}\n\n/**\n * Captures upgrade requests for a http.Server.\n *\n * @param {http.Server} server\n * @param {Object} options\n * @return {Server} engine server\n * @api public\n */\n\nexports.attach = attach;\n\nfunction attach(server, options) {\n  const engine = new Server(options);\n  engine.attach(server, options);\n  return engine;\n}\n"]},"metadata":{},"sourceType":"script"}