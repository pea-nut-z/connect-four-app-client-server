{"ast":null,"code":"export function createGrid(rows,columns){var grid=[];var i=0;while(i<rows){grid.push(Array(columns).fill(null));i++;}grid.push(Array(columns).fill(\"base\"));return grid;}export function checkResult(grid){for(var x in grid){x=parseInt(x);for(var y in grid[x]){y=parseInt(y);var value=grid[x][y];if(value===\"base\")continue;if(//left and right\nvalue&&value===grid[x][y+1]&&value===grid[x][y+2]&&value===grid[x][y+3]||//up and down\nvalue&&value===grid[x+1][y]&&value===grid[x+2][y]&&value===grid[x+3][y]||//diagonal - left to right (\\)\nvalue&&value===grid[x+1][y+1]&&value===grid[x+2][y+2]&&value===grid[x+3][y+3]||//diagonal - right to left (/)\nvalue&&value===grid[x+1][y-1]&&value===grid[x+2][y-2]&&value===grid[x+3][y-3]){return value;}var tie=grid.every(function(row){return!row.includes(null);});if(tie)return\"tie\";}}}","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/help.js"],"names":["createGrid","rows","columns","grid","i","push","Array","fill","checkResult","x","parseInt","y","value","tie","every","row","includes"],"mappings":"AAAA,MAAO,SAASA,CAAAA,UAAT,CAAoBC,IAApB,CAA0BC,OAA1B,CAAmC,CACxC,GAAIC,CAAAA,IAAI,CAAG,EAAX,CACA,GAAIC,CAAAA,CAAC,CAAG,CAAR,CACA,MAAOA,CAAC,CAAGH,IAAX,CAAiB,CACfE,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoB,IAApB,CAAV,EACAH,CAAC,GACF,CACDD,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoB,MAApB,CAAV,EACA,MAAOJ,CAAAA,IAAP,CACD,CAED,MAAO,SAASK,CAAAA,WAAT,CAAqBL,IAArB,CAA2B,CAChC,IAAK,GAAIM,CAAAA,CAAT,GAAcN,CAAAA,IAAd,CAAoB,CAClBM,CAAC,CAAGC,QAAQ,CAACD,CAAD,CAAZ,CACA,IAAK,GAAIE,CAAAA,CAAT,GAAcR,CAAAA,IAAI,CAACM,CAAD,CAAlB,CAAuB,CACrBE,CAAC,CAAGD,QAAQ,CAACC,CAAD,CAAZ,CACA,GAAIC,CAAAA,KAAK,CAAGT,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAR,CAAZ,CAEA,GAAIC,KAAK,GAAK,MAAd,CAAsB,SACtB,GACE;AACCA,KAAK,EACJA,KAAK,GAAKT,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAC,CAAG,CAAZ,CADX,EAECC,KAAK,GAAKT,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAC,CAAG,CAAZ,CAFX,EAGCC,KAAK,GAAKT,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAC,CAAG,CAAZ,CAHZ,EAIA;AACCC,KAAK,EACJA,KAAK,GAAKT,IAAI,CAACM,CAAC,CAAG,CAAL,CAAJ,CAAYE,CAAZ,CADX,EAECC,KAAK,GAAKT,IAAI,CAACM,CAAC,CAAG,CAAL,CAAJ,CAAYE,CAAZ,CAFX,EAGCC,KAAK,GAAKT,IAAI,CAACM,CAAC,CAAG,CAAL,CAAJ,CAAYE,CAAZ,CARZ,EASA;AACCC,KAAK,EACJA,KAAK,GAAKT,IAAI,CAACM,CAAC,CAAG,CAAL,CAAJ,CAAYE,CAAC,CAAG,CAAhB,CADX,EAECC,KAAK,GAAKT,IAAI,CAACM,CAAC,CAAG,CAAL,CAAJ,CAAYE,CAAC,CAAG,CAAhB,CAFX,EAGCC,KAAK,GAAKT,IAAI,CAACM,CAAC,CAAG,CAAL,CAAJ,CAAYE,CAAC,CAAG,CAAhB,CAbZ,EAcA;AACCC,KAAK,EACJA,KAAK,GAAKT,IAAI,CAACM,CAAC,CAAG,CAAL,CAAJ,CAAYE,CAAC,CAAG,CAAhB,CADX,EAECC,KAAK,GAAKT,IAAI,CAACM,CAAC,CAAG,CAAL,CAAJ,CAAYE,CAAC,CAAG,CAAhB,CAFX,EAGCC,KAAK,GAAKT,IAAI,CAACM,CAAC,CAAG,CAAL,CAAJ,CAAYE,CAAC,CAAG,CAAhB,CApBd,CAqBE,CACA,MAAOC,CAAAA,KAAP,CACD,CACD,GAAMC,CAAAA,GAAG,CAAGV,IAAI,CAACW,KAAL,CAAW,SAACC,GAAD,QAAS,CAACA,GAAG,CAACC,QAAJ,CAAa,IAAb,CAAV,EAAX,CAAZ,CACA,GAAIH,GAAJ,CAAS,MAAO,KAAP,CACV,CACF,CACF","sourcesContent":["export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\n\nexport function checkResult(grid) {\n  for (let x in grid) {\n    x = parseInt(x);\n    for (let y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n\n      if (value === \"base\") continue;\n      if (\n        //left and right\n        (value &&\n          value === grid[x][y + 1] &&\n          value === grid[x][y + 2] &&\n          value === grid[x][y + 3]) ||\n        //up and down\n        (value &&\n          value === grid[x + 1][y] &&\n          value === grid[x + 2][y] &&\n          value === grid[x + 3][y]) ||\n        //diagonal - left to right (\\)\n        (value &&\n          value === grid[x + 1][y + 1] &&\n          value === grid[x + 2][y + 2] &&\n          value === grid[x + 3][y + 3]) ||\n        //diagonal - right to left (/)\n        (value &&\n          value === grid[x + 1][y - 1] &&\n          value === grid[x + 2][y - 2] &&\n          value === grid[x + 3][y - 3])\n      ) {\n        return value;\n      }\n      const tie = grid.every((row) => !row.includes(null));\n      if (tie) return \"tie\";\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}