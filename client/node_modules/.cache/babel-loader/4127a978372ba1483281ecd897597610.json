{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\nexport default function MultiPlayer() {\n  _s();\n\n  const history = useHistory();\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  let currentTurn = player1IsNext ? 1 : 2;\n  const [ready, toggleReady] = useState(false);\n  useEffect(() => {\n    const client = io(\"http://localhost:3001\");\n    client.on(\"inform-player1\", () => {\n      toggleConnection2(true);\n    });\n    client.on(\"inform-player2\", () => {\n      toggleConnection1(true);\n    });\n    client.on(\"connection-status\", status => {\n      if (status[0]) toggleReady(!ready) && toggleConnection1(true);\n      if (status[1]) toggleConnection2(true);\n    });\n    client.on(\"server-full\", () => {\n      alert(\"Sorry, server is full!\");\n      history.push(\"/\");\n    });\n    client.on(\"player-disconnected\", num => {\n      if (num === 0) toggleConnection1(false);\n      if (num === 1) toggleConnection2(false);\n    });\n    client.emit(\"grid\", grid);\n    client.on(\"new-grid\", newGrid => {\n      setGrid(newGrid);\n    });\n    return () => {\n      client.disconnect();\n    };\n  }, [player1IsNext]);\n  let resultDisplay; // let result = checkResult(grid);\n  // if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  // if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  // if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // both players present??\n    if (playerNum === currentTurn) {\n      console.log({\n        currentTurn\n      });\n      console.log({\n        playerNum\n      });\n      let r = rowIndex;\n      let c = columnIndex;\n\n      if (grid[r + 1][c] !== null && grid[r][c] === null) {\n        let newGrid = grid.slice();\n        newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n        setGrid(newGrid); // saveLastMove([r, c]);\n\n        setPlayer1IsNext(!player1IsNext);\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p1\",\n      children: [\"Player 1\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected1 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p2\",\n      children: [\"Player 2\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected2 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: player1IsNext ? \"player1Turn\" : \"player2Turn\",\n      children: player1IsNext ? \"Player1's turn\" : \"Player2's turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: resultDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MultiPlayer, \"hD+XgzZGtYxNgJsoxDYWs72LfJ8=\", false, function () {\n  return [useHistory];\n});\n\n_c = MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js"],"names":["React","useState","useEffect","useMemo","Button","Link","useHistory","SquareGrid","createGrid","checkResult","io","MultiPlayer","history","blankGrid","grid","setGrid","connected1","toggleConnection1","connected2","toggleConnection2","player1IsNext","setPlayer1IsNext","currentTurn","ready","toggleReady","client","on","status","alert","push","num","emit","newGrid","disconnect","resultDisplay","handleClick","rowIndex","columnIndex","playerNum","console","log","r","c","slice","handleReplay","window","location","reload","map","row","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\n\nexport default function MultiPlayer() {\n  const history = useHistory();\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  let currentTurn = player1IsNext ? 1 : 2;\n  const [ready, toggleReady] = useState(false);\n\n  useEffect(() => {\n    const client = io(\"http://localhost:3001\");\n\n    client.on(\"inform-player1\", () => {\n      toggleConnection2(true);\n    });\n\n    client.on(\"inform-player2\", () => {\n      toggleConnection1(true);\n    });\n\n    client.on(\"connection-status\", (status) => {\n      if (status[0]) toggleReady(!ready) && toggleConnection1(true);\n      if (status[1]) toggleConnection2(true);\n    });\n\n    client.on(\"server-full\", () => {\n      alert(\"Sorry, server is full!\");\n      history.push(\"/\");\n    });\n\n    client.on(\"player-disconnected\", (num) => {\n      if (num === 0) toggleConnection1(false);\n      if (num === 1) toggleConnection2(false);\n    });\n\n    client.emit(\"grid\", grid);\n\n    client.on(\"new-grid\", (newGrid) => {\n      setGrid(newGrid);\n    });\n\n    return () => {\n      client.disconnect();\n    };\n  }, [player1IsNext]);\n\n  let resultDisplay;\n  // let result = checkResult(grid);\n  // if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  // if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  // if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // both players present??\n    if (playerNum === currentTurn) {\n      console.log({ currentTurn });\n      console.log({ playerNum });\n\n      let r = rowIndex;\n      let c = columnIndex;\n\n      if (grid[r + 1][c] !== null && grid[r][c] === null) {\n        let newGrid = grid.slice();\n        newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n        setGrid(newGrid);\n        // saveLastMove([r, c]);\n        setPlayer1IsNext(!player1IsNext);\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\">\n        {grid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* CONNECTION INDICATOR */}\n\n      <div className=\"player p1\">\n        Player 1\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected1 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      <div className=\"player p2\">\n        Player 2\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected2 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      {/* WHO's TURN    result ? \"\" :     */}\n      <span className={player1IsNext ? \"player1Turn\" : \"player2Turn\"}>\n        {player1IsNext ? \"Player1's turn\" : \"Player2's turn\"}\n      </span>\n      <br />\n\n      <span>{resultDisplay}</span>\n\n      <Button>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      {/* <p>{huMoves}</p> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}