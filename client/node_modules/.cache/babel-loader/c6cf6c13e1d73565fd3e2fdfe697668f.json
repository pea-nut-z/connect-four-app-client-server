{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/src/components/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport QuitButton from \"../QuitButton\";\nimport Square from \"./Square\";\nimport { winningArrays, checkResult } from \"./helper\"; // import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  _s();\n\n  let option = props.match.path.split(\"/\")[2]; // Create grid\n\n  let playSquares = Array(42).fill(null);\n  let hiddenSquares = Array(7).fill(\"base\");\n  let squares = playSquares.concat(hiddenSquares); // States and flag\n\n  const [moves, setMoves] = useState([squares]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [huIsNext, setHuIsNext] = useState(true);\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\";\n  const [huMoves, recordHuMoves] = useState([]); //For testing\n\n  const newGrid = moves[stepNumber];\n  console.log({\n    newGrid\n  }); //  Check for winners and tie\n\n  let result = checkResult(newGrid, winningArrays);\n  if (result === \"huPlayer\") result = \"You win!\";\n  if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  if (result === \"tie\") result = \"Draw!\";\n  if (result) turn = null; // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n\n  const handleClick = i => {\n    if (!result) {\n      const previousMove = moves.slice();\n      const current = moves[stepNumber];\n\n      if (current[i + 7] !== null && current[i] === null) {\n        recordHuMoves(moves => [...moves, i + \",\"]); //For testing\n\n        current[i] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n        setMoves([...previousMove, current]);\n        setStepNumber(moves.length);\n        setHuIsNext(!huIsNext);\n      }\n    }\n  }; // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n\n  function replay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: moves[stepNumber].map((move, i) => /*#__PURE__*/_jsxDEV(Square, {\n        value: move,\n        onClick: () => handleClick(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: huIsNext ? \"huTurn\" : \"aiTurn\",\n      children: turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: replay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuitButton, {\n      userInfo: props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: huMoves\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Game, \"XoUMQJp/6WWa3gXlD+kaLwVvAmk=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/SinglePlayer.js"],"names":["React","useEffect","useState","QuitButton","Square","winningArrays","checkResult","Game","props","option","match","path","split","playSquares","Array","fill","hiddenSquares","squares","concat","moves","setMoves","stepNumber","setStepNumber","huIsNext","setHuIsNext","turn","huMoves","recordHuMoves","newGrid","console","log","result","handleClick","i","previousMove","slice","current","length","replay","window","location","reload","map","move"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport QuitButton from \"../QuitButton\";\nimport Square from \"./Square\";\nimport { winningArrays, checkResult } from \"./helper\";\n// import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  let option = props.match.path.split(\"/\")[2];\n\n  // Create grid\n  let playSquares = Array(42).fill(null);\n  let hiddenSquares = Array(7).fill(\"base\");\n  let squares = playSquares.concat(hiddenSquares);\n\n  // States and flag\n  const [moves, setMoves] = useState([squares]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [huIsNext, setHuIsNext] = useState(true);\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\";\n  const [huMoves, recordHuMoves] = useState([]); //For testing\n\n  const newGrid = moves[stepNumber];\n  console.log({ newGrid });\n\n  //  Check for winners and tie\n  let result = checkResult(newGrid, winningArrays);\n  if (result === \"huPlayer\") result = \"You win!\";\n  if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  if (result === \"tie\") result = \"Draw!\";\n  if (result) turn = null;\n\n  // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n\n  // MINIMAX\n  // board, winningarrays, player\n\n  // Make a move\n  const handleClick = (i) => {\n    if (!result) {\n      const previousMove = moves.slice();\n      const current = moves[stepNumber];\n      if (current[i + 7] !== null && current[i] === null) {\n        recordHuMoves((moves) => [...moves, i + \",\"]); //For testing\n        current[i] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n        setMoves([...previousMove, current]);\n        setStepNumber(moves.length);\n        setHuIsNext(!huIsNext);\n      }\n    }\n  };\n\n  // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n  function replay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      <div id=\"grid\">\n        {moves[stepNumber].map((move, i) => (\n          <Square key={i} value={move} onClick={() => handleClick(i)} />\n        ))}\n      </div>\n      {/* Who's turn */}\n      <span className={huIsNext ? \"huTurn\" : \"aiTurn\"}>{turn}</span>\n      <br />\n      <span>{result}</span>\n\n      {/* <button onClick={() => undo(moves)}>Undo</button> */}\n      <button onClick={replay}>Replay</button>\n      <br />\n      <QuitButton userInfo={props} />\n      <br />\n      {/* Record moves */}\n      <p>{huMoves}</p>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}