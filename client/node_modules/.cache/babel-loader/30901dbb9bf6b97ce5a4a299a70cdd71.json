{"ast":null,"code":"// NOTE\n// r = row index\n// c = column index\nexport function createGrid(r, c) {\n  let grid = [];\n  let i = 0;\n\n  while (i < r) {\n    grid.push(Array(c).fill(null));\n    i++;\n  }\n\n  grid.push(Array(c).fill(\"base\"));\n  return grid;\n}\nexport function checkResult(grid) {\n  for (let x in grid) {\n    x = parseInt(x);\n\n    for (let y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n      if (value === \"base\") continue;\n\n      if ( //left and right\n      value && value === grid[x][y + 1] && value === grid[x][y + 2] && value === grid[x][y + 3] || //up and down\n      value && value === grid[x + 1][y] && value === grid[x + 2][y] && value === grid[x + 3][y] || //diagonal \" \\ \"\n      value && value === grid[x + 1][y + 1] && value === grid[x + 2][y + 2] && value === grid[x + 3][y + 3] || //diagonal \" / \"\n      value && value === grid[x + 1][y - 1] && value === grid[x + 2][y - 2] && value === grid[x + 3][y - 3]) {\n        return value + \" wins\";\n      }\n\n      const tie = grid.every(row => !row.includes(null));\n      if (tie) return \"Draw!\";\n    }\n  }\n}\nexport function findAValidMove(grid, player, rowIndex, columnIndex) {\n  let r = rowIndex;\n  let c = columnIndex;\n\n  if (grid[r][c] === \"base\") {\n    return null;\n  }\n\n  if (grid[r + 1][c] !== null && grid[r][c] === null) {\n    grid[r][c] = player;\n    return grid;\n  }\n\n  return null;\n}\nexport function findAiMove(grid, huPlayer, aiPlayer) {\n  let MAX_DEPTH = 5;\n  let bestMoveScore = 100;\n  let move = [];\n\n  for (let r = grid.length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      const newGrid = findAValidMove(grid, aiPlayer, r, c);\n\n      if (newGrid) {\n        const moveScore = maxScore(grid, MAX_DEPTH, huPlayer, aiPlayer);\n        grid[r][c] = null;\n\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = [r, c];\n        }\n      }\n    }\n  }\n\n  console.log(\"found move\");\n  return move;\n}\n\nfunction minScore(grid, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n\n  if (result) {\n    console.log(\"result\");\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n\n  if (depth === 0) return 0;\n  let bestMoveScore = 100;\n\n  for (let r = grid.length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      const newGrid = findAValidMove(grid, aiPlayer, r, c);\n\n      if (newGrid) {\n        const moveScore = maxScore(grid, depth - 1, huPlayer, aiPlayer);\n        grid[r][c] = null;\n\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n        }\n      }\n    }\n  }\n\n  return bestMoveScore;\n}\n\nfunction maxScore(grid, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n\n  if (result) {\n    console.log(\"result\");\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n\n  if (depth === 0) return 0;\n  let bestMoveScore = -100;\n\n  for (let r = grid.length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      const newGrid = findAValidMove(grid, huPlayer, r, c);\n\n      if (newGrid) {\n        const moveScore = minScore(grid, depth - 1, huPlayer, aiPlayer);\n        grid[r][c] = null;\n\n        if (moveScore > bestMoveScore) {\n          bestMoveScore = moveScore;\n        }\n      }\n    }\n  }\n\n  return bestMoveScore;\n}","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/help.js"],"names":["createGrid","r","c","grid","i","push","Array","fill","checkResult","x","parseInt","y","value","tie","every","row","includes","findAValidMove","player","rowIndex","columnIndex","findAiMove","huPlayer","aiPlayer","MAX_DEPTH","bestMoveScore","move","length","newGrid","moveScore","maxScore","console","log","minScore","depth","result"],"mappings":"AAAA;AACA;AACA;AAEA,OAAO,SAASA,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AAC/B,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGH,CAAX,EAAc;AACZE,IAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,CAAD,CAAL,CAASK,IAAT,CAAc,IAAd,CAAV;AACAH,IAAAA,CAAC;AACF;;AACDD,EAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,CAAD,CAAL,CAASK,IAAT,CAAc,MAAd,CAAV;AACA,SAAOJ,IAAP;AACD;AAED,OAAO,SAASK,WAAT,CAAqBL,IAArB,EAA2B;AAChC,OAAK,IAAIM,CAAT,IAAcN,IAAd,EAAoB;AAClBM,IAAAA,CAAC,GAAGC,QAAQ,CAACD,CAAD,CAAZ;;AACA,SAAK,IAAIE,CAAT,IAAcR,IAAI,CAACM,CAAD,CAAlB,EAAuB;AACrBE,MAAAA,CAAC,GAAGD,QAAQ,CAACC,CAAD,CAAZ;AACA,UAAIC,KAAK,GAAGT,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAR,CAAZ;AAEA,UAAIC,KAAK,KAAK,MAAd,EAAsB;;AACtB,WACE;AACCA,MAAAA,KAAK,IACJA,KAAK,KAAKT,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAC,GAAG,CAAZ,CADX,IAECC,KAAK,KAAKT,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAC,GAAG,CAAZ,CAFX,IAGCC,KAAK,KAAKT,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAC,GAAG,CAAZ,CAHZ,IAIA;AACCC,MAAAA,KAAK,IACJA,KAAK,KAAKT,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYE,CAAZ,CADX,IAECC,KAAK,KAAKT,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYE,CAAZ,CAFX,IAGCC,KAAK,KAAKT,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYE,CAAZ,CARZ,IASA;AACCC,MAAAA,KAAK,IACJA,KAAK,KAAKT,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYE,CAAC,GAAG,CAAhB,CADX,IAECC,KAAK,KAAKT,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYE,CAAC,GAAG,CAAhB,CAFX,IAGCC,KAAK,KAAKT,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYE,CAAC,GAAG,CAAhB,CAbZ,IAcA;AACCC,MAAAA,KAAK,IACJA,KAAK,KAAKT,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYE,CAAC,GAAG,CAAhB,CADX,IAECC,KAAK,KAAKT,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYE,CAAC,GAAG,CAAhB,CAFX,IAGCC,KAAK,KAAKT,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYE,CAAC,GAAG,CAAhB,CApBd,EAqBE;AACA,eAAOC,KAAK,GAAG,OAAf;AACD;;AACD,YAAMC,GAAG,GAAGV,IAAI,CAACW,KAAL,CAAYC,GAAD,IAAS,CAACA,GAAG,CAACC,QAAJ,CAAa,IAAb,CAArB,CAAZ;AACA,UAAIH,GAAJ,EAAS,OAAO,OAAP;AACV;AACF;AACF;AAED,OAAO,SAASI,cAAT,CAAwBd,IAAxB,EAA8Be,MAA9B,EAAsCC,QAAtC,EAAgDC,WAAhD,EAA6D;AAClE,MAAInB,CAAC,GAAGkB,QAAR;AACA,MAAIjB,CAAC,GAAGkB,WAAR;;AACA,MAAIjB,IAAI,CAACF,CAAD,CAAJ,CAAQC,CAAR,MAAe,MAAnB,EAA2B;AACzB,WAAO,IAAP;AACD;;AACD,MAAIC,IAAI,CAACF,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,MAAmB,IAAnB,IAA2BC,IAAI,CAACF,CAAD,CAAJ,CAAQC,CAAR,MAAe,IAA9C,EAAoD;AAClDC,IAAAA,IAAI,CAACF,CAAD,CAAJ,CAAQC,CAAR,IAAagB,MAAb;AACA,WAAOf,IAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED,OAAO,SAASkB,UAAT,CAAoBlB,IAApB,EAA0BmB,QAA1B,EAAoCC,QAApC,EAA8C;AACnD,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,aAAa,GAAG,GAApB;AACA,MAAIC,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIzB,CAAC,GAAGE,IAAI,CAACwB,MAAL,GAAc,CAA3B,EAA8B1B,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,SAAK,IAAIC,CAAC,GAAGC,IAAI,CAACF,CAAD,CAAJ,CAAQ0B,MAAR,GAAiB,CAA9B,EAAiCzB,CAAC,GAAG,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,YAAM0B,OAAO,GAAGX,cAAc,CAACd,IAAD,EAAOoB,QAAP,EAAiBtB,CAAjB,EAAoBC,CAApB,CAA9B;;AACA,UAAI0B,OAAJ,EAAa;AACX,cAAMC,SAAS,GAAGC,QAAQ,CAAC3B,IAAD,EAAOqB,SAAP,EAAkBF,QAAlB,EAA4BC,QAA5B,CAA1B;AACApB,QAAAA,IAAI,CAACF,CAAD,CAAJ,CAAQC,CAAR,IAAa,IAAb;;AACA,YAAI2B,SAAS,GAAGJ,aAAhB,EAA+B;AAC7BA,UAAAA,aAAa,GAAGI,SAAhB;AACAH,UAAAA,IAAI,GAAG,CAACzB,CAAD,EAAIC,CAAJ,CAAP;AACD;AACF;AACF;AACF;;AACD6B,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,SAAON,IAAP;AACD;;AAED,SAASO,QAAT,CAAkB9B,IAAlB,EAAwB+B,KAAxB,EAA+BZ,QAA/B,EAAyCC,QAAzC,EAAmD;AACjD,MAAIY,MAAM,GAAG3B,WAAW,CAACL,IAAD,CAAxB;;AACA,MAAIgC,MAAJ,EAAY;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAIG,MAAM,KAAK,eAAf,EAAgC,OAAO,EAAP;AAChC,QAAIA,MAAM,KAAK,eAAf,EAAgC,OAAO,CAAC,EAAR;AAChC,QAAIA,MAAM,KAAK,MAAf,EAAuB,OAAO,CAAP;AACxB;;AACD,MAAID,KAAK,KAAK,CAAd,EAAiB,OAAO,CAAP;AAEjB,MAAIT,aAAa,GAAG,GAApB;;AACA,OAAK,IAAIxB,CAAC,GAAGE,IAAI,CAACwB,MAAL,GAAc,CAA3B,EAA8B1B,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,SAAK,IAAIC,CAAC,GAAGC,IAAI,CAACF,CAAD,CAAJ,CAAQ0B,MAAR,GAAiB,CAA9B,EAAiCzB,CAAC,GAAG,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,YAAM0B,OAAO,GAAGX,cAAc,CAACd,IAAD,EAAOoB,QAAP,EAAiBtB,CAAjB,EAAoBC,CAApB,CAA9B;;AACA,UAAI0B,OAAJ,EAAa;AACX,cAAMC,SAAS,GAAGC,QAAQ,CAAC3B,IAAD,EAAO+B,KAAK,GAAG,CAAf,EAAkBZ,QAAlB,EAA4BC,QAA5B,CAA1B;AACApB,QAAAA,IAAI,CAACF,CAAD,CAAJ,CAAQC,CAAR,IAAa,IAAb;;AACA,YAAI2B,SAAS,GAAGJ,aAAhB,EAA+B;AAC7BA,UAAAA,aAAa,GAAGI,SAAhB;AACD;AACF;AACF;AACF;;AACD,SAAOJ,aAAP;AACD;;AAED,SAASK,QAAT,CAAkB3B,IAAlB,EAAwB+B,KAAxB,EAA+BZ,QAA/B,EAAyCC,QAAzC,EAAmD;AACjD,MAAIY,MAAM,GAAG3B,WAAW,CAACL,IAAD,CAAxB;;AACA,MAAIgC,MAAJ,EAAY;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAIG,MAAM,KAAK,eAAf,EAAgC,OAAO,EAAP;AAChC,QAAIA,MAAM,KAAK,eAAf,EAAgC,OAAO,CAAC,EAAR;AAChC,QAAIA,MAAM,KAAK,MAAf,EAAuB,OAAO,CAAP;AACxB;;AACD,MAAID,KAAK,KAAK,CAAd,EAAiB,OAAO,CAAP;AAEjB,MAAIT,aAAa,GAAG,CAAC,GAArB;;AACA,OAAK,IAAIxB,CAAC,GAAGE,IAAI,CAACwB,MAAL,GAAc,CAA3B,EAA8B1B,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,SAAK,IAAIC,CAAC,GAAGC,IAAI,CAACF,CAAD,CAAJ,CAAQ0B,MAAR,GAAiB,CAA9B,EAAiCzB,CAAC,GAAG,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,YAAM0B,OAAO,GAAGX,cAAc,CAACd,IAAD,EAAOmB,QAAP,EAAiBrB,CAAjB,EAAoBC,CAApB,CAA9B;;AACA,UAAI0B,OAAJ,EAAa;AACX,cAAMC,SAAS,GAAGI,QAAQ,CAAC9B,IAAD,EAAO+B,KAAK,GAAG,CAAf,EAAkBZ,QAAlB,EAA4BC,QAA5B,CAA1B;AACApB,QAAAA,IAAI,CAACF,CAAD,CAAJ,CAAQC,CAAR,IAAa,IAAb;;AACA,YAAI2B,SAAS,GAAGJ,aAAhB,EAA+B;AAC7BA,UAAAA,aAAa,GAAGI,SAAhB;AACD;AACF;AACF;AACF;;AACD,SAAOJ,aAAP;AACD","sourcesContent":["// NOTE\n// r = row index\n// c = column index\n\nexport function createGrid(r, c) {\n  let grid = [];\n  let i = 0;\n  while (i < r) {\n    grid.push(Array(c).fill(null));\n    i++;\n  }\n  grid.push(Array(c).fill(\"base\"));\n  return grid;\n}\n\nexport function checkResult(grid) {\n  for (let x in grid) {\n    x = parseInt(x);\n    for (let y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n\n      if (value === \"base\") continue;\n      if (\n        //left and right\n        (value &&\n          value === grid[x][y + 1] &&\n          value === grid[x][y + 2] &&\n          value === grid[x][y + 3]) ||\n        //up and down\n        (value &&\n          value === grid[x + 1][y] &&\n          value === grid[x + 2][y] &&\n          value === grid[x + 3][y]) ||\n        //diagonal \" \\ \"\n        (value &&\n          value === grid[x + 1][y + 1] &&\n          value === grid[x + 2][y + 2] &&\n          value === grid[x + 3][y + 3]) ||\n        //diagonal \" / \"\n        (value &&\n          value === grid[x + 1][y - 1] &&\n          value === grid[x + 2][y - 2] &&\n          value === grid[x + 3][y - 3])\n      ) {\n        return value + \" wins\";\n      }\n      const tie = grid.every((row) => !row.includes(null));\n      if (tie) return \"Draw!\";\n    }\n  }\n}\n\nexport function findAValidMove(grid, player, rowIndex, columnIndex) {\n  let r = rowIndex;\n  let c = columnIndex;\n  if (grid[r][c] === \"base\") {\n    return null;\n  }\n  if (grid[r + 1][c] !== null && grid[r][c] === null) {\n    grid[r][c] = player;\n    return grid;\n  }\n  return null;\n}\n\nexport function findAiMove(grid, huPlayer, aiPlayer) {\n  let MAX_DEPTH = 5;\n  let bestMoveScore = 100;\n  let move = [];\n\n  for (let r = grid.length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      const newGrid = findAValidMove(grid, aiPlayer, r, c);\n      if (newGrid) {\n        const moveScore = maxScore(grid, MAX_DEPTH, huPlayer, aiPlayer);\n        grid[r][c] = null;\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = [r, c];\n        }\n      }\n    }\n  }\n  console.log(\"found move\");\n  return move;\n}\n\nfunction minScore(grid, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n  if (result) {\n    console.log(\"result\");\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n  if (depth === 0) return 0;\n\n  let bestMoveScore = 100;\n  for (let r = grid.length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      const newGrid = findAValidMove(grid, aiPlayer, r, c);\n      if (newGrid) {\n        const moveScore = maxScore(grid, depth - 1, huPlayer, aiPlayer);\n        grid[r][c] = null;\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n        }\n      }\n    }\n  }\n  return bestMoveScore;\n}\n\nfunction maxScore(grid, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n  if (result) {\n    console.log(\"result\");\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n  if (depth === 0) return 0;\n\n  let bestMoveScore = -100;\n  for (let r = grid.length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      const newGrid = findAValidMove(grid, huPlayer, r, c);\n      if (newGrid) {\n        const moveScore = minScore(grid, depth - 1, huPlayer, aiPlayer);\n        grid[r][c] = null;\n        if (moveScore > bestMoveScore) {\n          bestMoveScore = moveScore;\n        }\n      }\n    }\n  }\n  return bestMoveScore;\n}\n"]},"metadata":{},"sourceType":"module"}