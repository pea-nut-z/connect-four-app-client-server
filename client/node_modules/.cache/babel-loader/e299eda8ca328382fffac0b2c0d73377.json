{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult, findAValidMove } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\nexport default function MultiPlayer() {\n  _s();\n\n  const history = useHistory();\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n  const [endThisTurn, triggerEndThisTurn] = useState();\n  const [ready, toggleReady] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(\"Player-1\");\n  useEffect(() => {\n    const client = io(\"http://localhost:3001\"); // ignore the 3rd player\n\n    client.on(\"full-server\", () => {\n      alert(\"Sorry, server is full!\");\n      history.push(\"/\");\n    });\n    client.on(\"assign-player-as-player2\", () => {\n      setCurrentPlayer(\"Player-2\");\n    }); // set connection status indicators\n\n    client.on(\"player-connection-status\", status => {\n      if (status[0]) toggleConnection1(true);\n      if (status[1]) toggleConnection2(true);\n    }); // switch turns\n\n    client.emit(\"switch-turn\", grid);\n    client.on(\"take-the-turn\", grid => {\n      setGrid(grid);\n      toggleReady(true);\n    }); // handle disconnect\n\n    client.on(\"player-disconnected\", num => {\n      if (num === 0) toggleConnection1(false);\n      if (num === 1) toggleConnection2(false);\n    });\n    return () => {\n      client.disconnect();\n    };\n  }, [endThisTurn]);\n  let result = checkResult(grid);\n\n  if (result === \"Player-1 wins\") {\n    console.log(\"checked\");\n  }\n\n  const handleClick = (rowIndex, columnIndex) => {\n    if (ready && !result) {\n      let newGrid = findAValidMove(grid, currentPlayer, rowIndex, columnIndex);\n      toggleReady(!ready);\n      setGrid(newGrid);\n      triggerEndThisTurn(!endThisTurn);\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p1\",\n      children: [\"Player 1\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected1 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p2\",\n      children: [\"Player 2\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected2 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"turn-display\",\n      children: result ? \"\" : ready ? \"Your turn\" : \"Waiting for the other player...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MultiPlayer, \"Vsc3L5FhrZ3IiZxugZGGBe3utbE=\", false, function () {\n  return [useHistory];\n});\n\n_c = MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js"],"names":["React","useState","useEffect","Button","Link","useHistory","SquareGrid","createGrid","checkResult","findAValidMove","io","MultiPlayer","history","blankGrid","grid","setGrid","connected1","toggleConnection1","connected2","toggleConnection2","endThisTurn","triggerEndThisTurn","ready","toggleReady","currentPlayer","setCurrentPlayer","client","on","alert","push","status","emit","num","disconnect","result","console","log","handleClick","rowIndex","columnIndex","newGrid","handleReplay","window","location","reload","map","row","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult, findAValidMove } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\n\nexport default function MultiPlayer() {\n  const history = useHistory();\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n  const [endThisTurn, triggerEndThisTurn] = useState();\n  const [ready, toggleReady] = useState(false);\n  const [currentPlayer, setCurrentPlayer] = useState(\"Player-1\");\n\n  useEffect(() => {\n    const client = io(\"http://localhost:3001\");\n\n    // ignore the 3rd player\n    client.on(\"full-server\", () => {\n      alert(\"Sorry, server is full!\");\n      history.push(\"/\");\n    });\n\n    client.on(\"assign-player-as-player2\", () => {\n      setCurrentPlayer(\"Player-2\");\n    });\n\n    // set connection status indicators\n    client.on(\"player-connection-status\", (status) => {\n      if (status[0]) toggleConnection1(true);\n      if (status[1]) toggleConnection2(true);\n    });\n\n    // switch turns\n    client.emit(\"switch-turn\", grid);\n    client.on(\"take-the-turn\", (grid) => {\n      setGrid(grid);\n      toggleReady(true);\n    });\n\n    // handle disconnect\n    client.on(\"player-disconnected\", (num) => {\n      if (num === 0) toggleConnection1(false);\n      if (num === 1) toggleConnection2(false);\n    });\n\n    return () => {\n      client.disconnect();\n    };\n  }, [endThisTurn]);\n\n  let result = checkResult(grid);\n  if (result === \"Player-1 wins\") {\n    console.log(\"checked\");\n  }\n\n  const handleClick = (rowIndex, columnIndex) => {\n    if (ready && !result) {\n      let newGrid = findAValidMove(grid, currentPlayer, rowIndex, columnIndex);\n      toggleReady(!ready);\n      setGrid(newGrid);\n      triggerEndThisTurn(!endThisTurn);\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\">\n        {grid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* CONNECTION INDICATOR */}\n      <div className=\"player p1\">\n        Player 1\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected1 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      <div className=\"player p2\">\n        Player 2\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected2 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      {/* WHO's TURN DISPLAY*/}\n      <span className=\"turn-display\">\n        {result ? \"\" : ready ? \"Your turn\" : \"Waiting for the other player...\"}\n      </span>\n      <br />\n      {/* WINNING RESULT*/}\n      <span>{result}</span>\n      <br />\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}