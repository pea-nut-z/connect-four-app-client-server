{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\n\nconst client = require(\"socket.io-client\")(\"http://localhost:3001\");\n\nexport default function MultiPlayer() {\n  _s();\n\n  let currentPlayer = 1;\n  const history = useHistory();\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n  useEffect(() => {\n    client.on(\"player1-connected\", () => {\n      toggleConnection1(!connected1);\n    });\n    client.on(\"player2-connected\", () => {\n      toggleConnection1(!connected1);\n      toggleConnection2(!connected2);\n    });\n    client.on(\"player-number\", num => {\n      if (num === -1) history.push(\"/\"); // if (num === 0) toggleConnection1(!connected1);\n      // if (num === 1) toggleConnection1(!connected1) && toggleConnection2(!connected2);\n    });\n    client.on(\"inform-player1\", () => {\n      toggleConnection2(!connected2);\n    });\n    client.on(\"player connected\", num => {\n      if (num === 0) {\n        toggleConnection1(!connected1);\n      }\n\n      toggleConnection2(!connected2);\n    });\n    return () => {\n      client.disconnect();\n    };\n  }, []); // let resultDisplay\n  //   let result = checkResult(newGrid);\n  //   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  //   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  //   if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  let turn = player1IsNext ? \"Player1's turn\" : \"Player2's turn\";\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    let r = rowIndex;\n    let c = columnIndex;\n\n    if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n      newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n      setPlayer1IsNext(!player1IsNext);\n    } // }\n\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: newGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p1\",\n      children: [\"Player 1\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected1 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p2\",\n      children: [\"Player 2\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected2 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: player1IsNext ? \"player1Turn\" : \"player2Turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MultiPlayer, \"Ou/FZhZOiiDSmLDvknFCp+IJidU=\", false, function () {\n  return [useHistory];\n});\n\n_c = MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js"],"names":["React","useState","useEffect","Button","Link","useHistory","SquareGrid","createGrid","checkResult","client","require","MultiPlayer","currentPlayer","history","connected1","toggleConnection1","connected2","toggleConnection2","on","num","push","disconnect","player1IsNext","setPlayer1IsNext","turn","grid","newGrid","setGrid","handleClick","rowIndex","columnIndex","r","c","handleReplay","window","location","reload","map","row","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nconst client = require(\"socket.io-client\")(\"http://localhost:3001\");\n\nexport default function MultiPlayer() {\n  let currentPlayer = 1;\n  const history = useHistory();\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n\n  useEffect(() => {\n    client.on(\"player1-connected\", () => {\n      toggleConnection1(!connected1);\n    });\n\n    client.on(\"player2-connected\", () => {\n      toggleConnection1(!connected1);\n      toggleConnection2(!connected2);\n    });\n\n    client.on(\"player-number\", (num) => {\n      if (num === -1) history.push(\"/\");\n      // if (num === 0) toggleConnection1(!connected1);\n      // if (num === 1) toggleConnection1(!connected1) && toggleConnection2(!connected2);\n    });\n\n    client.on(\"inform-player1\", () => {\n      toggleConnection2(!connected2);\n    });\n\n    client.on(\"player connected\", (num) => {\n      if (num === 0) {\n        toggleConnection1(!connected1);\n      }\n      toggleConnection2(!connected2);\n    });\n\n    return () => {\n      client.disconnect();\n    };\n  }, []);\n\n  // let resultDisplay\n  //   let result = checkResult(newGrid);\n  //   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  //   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  //   if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  let turn = player1IsNext ? \"Player1's turn\" : \"Player2's turn\";\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    let r = rowIndex;\n    let c = columnIndex;\n\n    if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n      newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n      setPlayer1IsNext(!player1IsNext);\n    }\n    // }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\">\n        {newGrid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* CONNECTION INDICATOR */}\n\n      <div className=\"player p1\">\n        Player 1\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected1 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      <div className=\"player p2\">\n        Player 2\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected2 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      {/* WHO's TURN */}\n      <span className={player1IsNext ? \"player1Turn\" : \"player2Turn\"}>\n        {/* {result ? \"\" : turn} */}\n      </span>\n      <br />\n\n      {/* <span>{resultDisplay}</span> */}\n\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      {/* <p>{huMoves}</p> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}