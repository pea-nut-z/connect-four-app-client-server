{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\nconst socket = io.connect(\"http://localhost:3001/multi-player\");\nlet resultDisplay;\nlet playerNum = 0;\nlet currentPlayer = \"user\";\nexport default function MultiPlayer(props) {\n  _s();\n\n  useEffect(() => {\n    socket.on(\"player-number\", num => {\n      if (num === -1) {\n        resultDisplay = \"Sorry, the server is full\";\n      } else {\n        playerNum = parseInt(num);\n        if (playerNum === 1) currentPlayer = \"enemy\";\n        resultDisplay = `Player ${playerNum}`;\n        console.log({\n          playerNum\n        }); // Get other player status\n\n        socket.emit(\"check-players\");\n      }\n    }, []); // Another player has connected or disconnected\n\n    socket.on(\"player-connection\", num => {\n      console.log(`Player number ${num} has connected or disconnected`); // playerConnectedOrDisconnected(num)\n    });\n  });\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid); //   const [stepNumber, setStepNumber] = useState(0);\n\n  const [player1IsNext, setPlayer1IsNext] = useState(true); //   const [huMoves, recordHuMoves] = useState([]); //For debug\n\n  let turn = player1IsNext ? \"Player1's turn\" : \"Player2's turn\"; //   let result = checkResult(newGrid);\n  //   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  //   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  //   if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    let r = rowIndex;\n    let c = columnIndex;\n\n    if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n      // recordHuMoves((moves) => [...moves, \"(\" + r + \",\" + c + \")\"]); //For debug\n      newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n      setPlayer1IsNext(!player1IsNext);\n    } // }\n\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: newGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: player1IsNext ? \"player1Turn\" : \"player2Turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [currentPlayer, \" is ready\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MultiPlayer, \"BxCwUmYAOeLsJu/BcmKIDNPn87o=\");\n\n_c = MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js"],"names":["React","useState","useEffect","Button","Link","SquareGrid","createGrid","checkResult","io","socket","connect","resultDisplay","playerNum","currentPlayer","MultiPlayer","props","on","num","parseInt","console","log","emit","grid","newGrid","setGrid","player1IsNext","setPlayer1IsNext","turn","handleClick","rowIndex","columnIndex","r","c","handleReplay","window","location","reload","map","row","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\n\nconst socket = io.connect(\"http://localhost:3001/multi-player\");\nlet resultDisplay;\nlet playerNum = 0;\nlet currentPlayer = \"user\";\n\nexport default function MultiPlayer(props) {\n  useEffect(() => {\n    socket.on(\n      \"player-number\",\n      (num) => {\n        if (num === -1) {\n          resultDisplay = \"Sorry, the server is full\";\n        } else {\n          playerNum = parseInt(num);\n          if (playerNum === 1) currentPlayer = \"enemy\";\n          resultDisplay = `Player ${playerNum}`;\n\n          console.log({ playerNum });\n\n          // Get other player status\n          socket.emit(\"check-players\");\n        }\n      },\n      []\n    );\n\n    // Another player has connected or disconnected\n    socket.on(\"player-connection\", (num) => {\n      console.log(`Player number ${num} has connected or disconnected`);\n      // playerConnectedOrDisconnected(num)\n    });\n  });\n\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n  //   const [stepNumber, setStepNumber] = useState(0);\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  //   const [huMoves, recordHuMoves] = useState([]); //For debug\n  let turn = player1IsNext ? \"Player1's turn\" : \"Player2's turn\";\n\n  //   let result = checkResult(newGrid);\n  //   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  //   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  //   if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    let r = rowIndex;\n    let c = columnIndex;\n\n    if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n      // recordHuMoves((moves) => [...moves, \"(\" + r + \",\" + c + \")\"]); //For debug\n      newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n      setPlayer1IsNext(!player1IsNext);\n    }\n    // }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      <div id=\"grid\">\n        {newGrid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* Who's turn */}\n      <span className={player1IsNext ? \"player1Turn\" : \"player2Turn\"}>\n        {/* {result ? \"\" : turn} */}\n      </span>\n      <br />\n\n      {/* <span>{resultDisplay}</span> */}\n      <div>{currentPlayer} is ready</div>\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      {/* <p>{huMoves}</p> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}