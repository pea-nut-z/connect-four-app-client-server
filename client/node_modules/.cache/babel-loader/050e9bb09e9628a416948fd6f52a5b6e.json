{"ast":null,"code":"const Polling = require(\"./polling\");\n\nconst qs = require(\"querystring\");\n\nconst rDoubleSlashes = /\\\\\\\\n/g;\nconst rSlashes = /(\\\\)?\\\\n/g;\n\nclass JSONP extends Polling {\n  /**\n   * JSON-P polling transport.\n   *\n   * @api public\n   */\n  constructor(req) {\n    super(req);\n    this.head = \"___eio[\" + (req._query.j || \"\").replace(/[^0-9]/g, \"\") + \"](\";\n    this.foot = \");\";\n  }\n  /**\n   * Handles incoming data.\n   * Due to a bug in \\n handling by browsers, we expect a escaped string.\n   *\n   * @api private\n   */\n\n\n  onData(data) {\n    // we leverage the qs module so that we get built-in DoS protection\n    // and the fast alternative to decodeURIComponent\n    data = qs.parse(data).d;\n\n    if (\"string\" === typeof data) {\n      // client will send already escaped newlines as \\\\\\\\n and newlines as \\\\n\n      // \\\\n must be replaced with \\n and \\\\\\\\n with \\\\n\n      data = data.replace(rSlashes, function (match, slashes) {\n        return slashes ? match : \"\\n\";\n      });\n      super.onData(data.replace(rDoubleSlashes, \"\\\\n\"));\n    }\n  }\n  /**\n   * Performs the write.\n   *\n   * @api private\n   */\n\n\n  doWrite(data, options, callback) {\n    // we must output valid javascript, not valid json\n    // see: http://timelessrepo.com/json-isnt-a-javascript-subset\n    const js = JSON.stringify(data).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\"); // prepare response\n\n    data = this.head + js + this.foot;\n    super.doWrite(data, options, callback);\n  }\n\n}\n\nmodule.exports = JSONP;","map":{"version":3,"sources":["/Users/paulinez/connect-four/node_modules/engine.io/lib/transports/polling-jsonp.js"],"names":["Polling","require","qs","rDoubleSlashes","rSlashes","JSONP","constructor","req","head","_query","j","replace","foot","onData","data","parse","d","match","slashes","doWrite","options","callback","js","JSON","stringify","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAME,cAAc,GAAG,QAAvB;AACA,MAAMC,QAAQ,GAAG,WAAjB;;AAEA,MAAMC,KAAN,SAAoBL,OAApB,CAA4B;AAC1B;AACF;AACA;AACA;AACA;AACEM,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,UAAMA,GAAN;AAEA,SAAKC,IAAL,GAAY,YAAY,CAACD,GAAG,CAACE,MAAJ,CAAWC,CAAX,IAAgB,EAAjB,EAAqBC,OAArB,CAA6B,SAA7B,EAAwC,EAAxC,CAAZ,GAA0D,IAAtE;AACA,SAAKC,IAAL,GAAY,IAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX;AACA;AACAA,IAAAA,IAAI,GAAGZ,EAAE,CAACa,KAAH,CAASD,IAAT,EAAeE,CAAtB;;AACA,QAAI,aAAa,OAAOF,IAAxB,EAA8B;AAC5B;AACA;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACH,OAAL,CAAaP,QAAb,EAAuB,UAASa,KAAT,EAAgBC,OAAhB,EAAyB;AACrD,eAAOA,OAAO,GAAGD,KAAH,GAAW,IAAzB;AACD,OAFM,CAAP;AAGA,YAAMJ,MAAN,CAAaC,IAAI,CAACH,OAAL,CAAaR,cAAb,EAA6B,KAA7B,CAAb;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEgB,EAAAA,OAAO,CAACL,IAAD,EAAOM,OAAP,EAAgBC,QAAhB,EAA0B;AAC/B;AACA;AACA,UAAMC,EAAE,GAAGC,IAAI,CAACC,SAAL,CAAeV,IAAf,EACRH,OADQ,CACA,SADA,EACW,SADX,EAERA,OAFQ,CAEA,SAFA,EAEW,SAFX,CAAX,CAH+B,CAO/B;;AACAG,IAAAA,IAAI,GAAG,KAAKN,IAAL,GAAYc,EAAZ,GAAiB,KAAKV,IAA7B;AAEA,UAAMO,OAAN,CAAcL,IAAd,EAAoBM,OAApB,EAA6BC,QAA7B;AACD;;AAjDyB;;AAoD5BI,MAAM,CAACC,OAAP,GAAiBrB,KAAjB","sourcesContent":["const Polling = require(\"./polling\");\nconst qs = require(\"querystring\");\nconst rDoubleSlashes = /\\\\\\\\n/g;\nconst rSlashes = /(\\\\)?\\\\n/g;\n\nclass JSONP extends Polling {\n  /**\n   * JSON-P polling transport.\n   *\n   * @api public\n   */\n  constructor(req) {\n    super(req);\n\n    this.head = \"___eio[\" + (req._query.j || \"\").replace(/[^0-9]/g, \"\") + \"](\";\n    this.foot = \");\";\n  }\n\n  /**\n   * Handles incoming data.\n   * Due to a bug in \\n handling by browsers, we expect a escaped string.\n   *\n   * @api private\n   */\n  onData(data) {\n    // we leverage the qs module so that we get built-in DoS protection\n    // and the fast alternative to decodeURIComponent\n    data = qs.parse(data).d;\n    if (\"string\" === typeof data) {\n      // client will send already escaped newlines as \\\\\\\\n and newlines as \\\\n\n      // \\\\n must be replaced with \\n and \\\\\\\\n with \\\\n\n      data = data.replace(rSlashes, function(match, slashes) {\n        return slashes ? match : \"\\n\";\n      });\n      super.onData(data.replace(rDoubleSlashes, \"\\\\n\"));\n    }\n  }\n\n  /**\n   * Performs the write.\n   *\n   * @api private\n   */\n  doWrite(data, options, callback) {\n    // we must output valid javascript, not valid json\n    // see: http://timelessrepo.com/json-isnt-a-javascript-subset\n    const js = JSON.stringify(data)\n      .replace(/\\u2028/g, \"\\\\u2028\")\n      .replace(/\\u2029/g, \"\\\\u2029\");\n\n    // prepare response\n    data = this.head + js + this.foot;\n\n    super.doWrite(data, options, callback);\n  }\n}\n\nmodule.exports = JSONP;\n"]},"metadata":{},"sourceType":"script"}