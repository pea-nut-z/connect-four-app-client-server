{"ast":null,"code":"export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\nexport function checkResult(grid) {\n  if (!grid) return;\n\n  for (let x in grid) {\n    x = parseInt(x);\n\n    for (let y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n      if (value === \"base\") continue;\n\n      if ( //left and right\n      value && value === grid[x][y + 1] && value === grid[x][y + 2] && value === grid[x][y + 3] || //up and down\n      value && value === grid[x + 1][y] && value === grid[x + 2][y] && value === grid[x + 3][y] || //diagonal \" \\ \"\n      value && value === grid[x + 1][y + 1] && value === grid[x + 2][y + 2] && value === grid[x + 3][y + 3] || //diagonal \" / \"\n      value && value === grid[x + 1][y - 1] && value === grid[x + 2][y - 2] && value === grid[x + 3][y - 3]) {\n        return value + \" wins\";\n      }\n\n      const tie = grid.every(row => !row.includes(null));\n      if (tie) return \"Draw!\";\n    }\n  }\n}\nexport function findAValidMove(grid, player, rowIndex, columnIndex) {\n  let r = rowIndex;\n  let c = columnIndex;\n\n  if (grid[r][c] === \"base\") {\n    return null;\n  }\n\n  if (grid[r + 1][c] !== null && grid[r][c] === null) {\n    grid[r][c] = player;\n    return grid;\n  }\n\n  return null;\n}\nexport function findAiMove(grid, huPlayer, aiPlayer) {\n  let MAX_DEPTH = 5;\n  let bestMoveScore = 100;\n  let move = [];\n  console.log({\n    grid\n  });\n\n  for (let r = grid.length - 1; r > 0; r--) {\n    console.log({\n      r\n    });\n\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      console.log({\n        c\n      }); // for (let rowIndex in grid) {\n      // for (let columnIndex in grid[rowIndex]) {\n\n      r = parseInt(r);\n      c = parseInt(c);\n      const newGrid = findAValidMove(grid, aiPlayer, r, c);\n\n      if (newGrid) {\n        const moveScore = maxScore(grid, MAX_DEPTH, huPlayer, aiPlayer);\n        grid[r][c] = null;\n\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = [r, c];\n          break;\n        }\n      }\n    }\n  }\n\n  console.log(\"found move\");\n  return move;\n}\n\nfunction minScore(grid, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n\n  if (result) {\n    console.log(\"result\");\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n\n  if (depth === 0) return 0;\n  let bestMoveScore = 100; // for (let rowIndex in grid) {\n  //   for (let columnIndex in grid[rowIndex]) {\n\n  for (let r = grid[r].length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      r = parseInt(r);\n      c = parseInt(c);\n      const newGrid = findAValidMove(grid, aiPlayer, r, c);\n\n      if (newGrid) {\n        const moveScore = maxScore(grid, depth - 1, huPlayer, aiPlayer);\n        grid[r][c] = null;\n\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          break;\n        }\n      }\n    }\n  }\n\n  return bestMoveScore;\n}\n\nfunction maxScore(grid, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n\n  if (result) {\n    console.log(\"result\");\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n\n  if (depth === 0) return 0;\n  let bestMoveScore = -100; // for (let rowIndex in grid) {\n  //   for (let columnIndex in grid[rowIndex]) {\n\n  for (let r = grid[r].length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      r = parseInt(r);\n      c = parseInt(c);\n      const newGrid = findAValidMove(grid, huPlayer, r, c);\n\n      if (newGrid) {\n        const moveScore = minScore(grid, depth - 1, huPlayer, aiPlayer);\n        grid[r][c] = null;\n\n        if (moveScore > bestMoveScore) {\n          bestMoveScore = moveScore;\n          break;\n        }\n      }\n    }\n  }\n\n  return bestMoveScore;\n}","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/help.js"],"names":["createGrid","rows","columns","grid","i","push","Array","fill","checkResult","x","parseInt","y","value","tie","every","row","includes","findAValidMove","player","rowIndex","columnIndex","r","c","findAiMove","huPlayer","aiPlayer","MAX_DEPTH","bestMoveScore","move","console","log","length","newGrid","moveScore","maxScore","minScore","depth","result"],"mappings":"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","sourcesContent":["export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\n\nexport function checkResult(grid) {\n  if (!grid) return;\n\n  for (let x in grid) {\n    x = parseInt(x);\n    for (let y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n\n      if (value === \"base\") continue;\n      if (\n        //left and right\n        (value &&\n          value === grid[x][y + 1] &&\n          value === grid[x][y + 2] &&\n          value === grid[x][y + 3]) ||\n        //up and down\n        (value &&\n          value === grid[x + 1][y] &&\n          value === grid[x + 2][y] &&\n          value === grid[x + 3][y]) ||\n        //diagonal \" \\ \"\n        (value &&\n          value === grid[x + 1][y + 1] &&\n          value === grid[x + 2][y + 2] &&\n          value === grid[x + 3][y + 3]) ||\n        //diagonal \" / \"\n        (value &&\n          value === grid[x + 1][y - 1] &&\n          value === grid[x + 2][y - 2] &&\n          value === grid[x + 3][y - 3])\n      ) {\n        return value + \" wins\";\n      }\n      const tie = grid.every((row) => !row.includes(null));\n      if (tie) return \"Draw!\";\n    }\n  }\n}\n\nexport function findAValidMove(grid, player, rowIndex, columnIndex) {\n  let r = rowIndex;\n  let c = columnIndex;\n  if (grid[r][c] === \"base\") {\n    return null;\n  }\n  if (grid[r + 1][c] !== null && grid[r][c] === null) {\n    grid[r][c] = player;\n    return grid;\n  }\n  return null;\n}\n\nexport function findAiMove(grid, huPlayer, aiPlayer) {\n  let MAX_DEPTH = 5;\n  let bestMoveScore = 100;\n  let move = [];\n  console.log({ grid });\n\n  for (let r = grid.length - 1; r > 0; r--) {\n    console.log({ r });\n\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      console.log({ c });\n\n      // for (let rowIndex in grid) {\n      // for (let columnIndex in grid[rowIndex]) {\n      r = parseInt(r);\n      c = parseInt(c);\n      const newGrid = findAValidMove(grid, aiPlayer, r, c);\n      if (newGrid) {\n        const moveScore = maxScore(grid, MAX_DEPTH, huPlayer, aiPlayer);\n        grid[r][c] = null;\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = [r, c];\n          break;\n        }\n      }\n    }\n  }\n  console.log(\"found move\");\n  return move;\n}\n\nfunction minScore(grid, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n  if (result) {\n    console.log(\"result\");\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n  if (depth === 0) return 0;\n\n  let bestMoveScore = 100;\n  // for (let rowIndex in grid) {\n  //   for (let columnIndex in grid[rowIndex]) {\n  for (let r = grid[r].length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      r = parseInt(r);\n      c = parseInt(c);\n      const newGrid = findAValidMove(grid, aiPlayer, r, c);\n      if (newGrid) {\n        const moveScore = maxScore(grid, depth - 1, huPlayer, aiPlayer);\n        grid[r][c] = null;\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          break;\n        }\n      }\n    }\n  }\n  return bestMoveScore;\n}\n\nfunction maxScore(grid, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n  if (result) {\n    console.log(\"result\");\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n  if (depth === 0) return 0;\n\n  let bestMoveScore = -100;\n  // for (let rowIndex in grid) {\n  //   for (let columnIndex in grid[rowIndex]) {\n  for (let r = grid[r].length - 1; r > 0; r--) {\n    for (let c = grid[r].length - 1; c > 0; c--) {\n      r = parseInt(r);\n      c = parseInt(c);\n      const newGrid = findAValidMove(grid, huPlayer, r, c);\n      if (newGrid) {\n        const moveScore = minScore(grid, depth - 1, huPlayer, aiPlayer);\n        grid[r][c] = null;\n        if (moveScore > bestMoveScore) {\n          bestMoveScore = moveScore;\n          break;\n        }\n      }\n    }\n  }\n  return bestMoveScore;\n}\n"]},"metadata":{},"sourceType":"module"}