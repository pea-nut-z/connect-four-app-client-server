{"ast":null,"code":"export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\nexport function checkResult(grid) {\n  //   for (let x in grid) {\n  //     for (let y in grid[x]) {\n  //       let value = grid[x][y];\n  //       if (value === \"base\") continue;\n  //       if (\n  //         //left and right\n  //         (value &&\n  //           value === grid[x][parseInt(y) + 1] &&\n  //           value === grid[x][parseInt(y) + 2] &&\n  //           value === grid[x][parseInt(y) + 3]) ||\n  //         //up and down\n  //         (value &&\n  //           value === grid[parseInt(x) - 1][y] &&\n  //           value === grid[parseInt(x) - 2][y] &&\n  //           value === grid[parseInt(x) - 3][y]) ||\n  //         //diagonal - left to right (\\)\n  //         (value &&\n  //           value === grid[parseInt(x) + 1][parseInt(y) + 1] &&\n  //           value === grid[parseInt(x) + 2][parseInt(y) + 2] &&\n  //           value === grid[parseInt(x) + 3][parseInt(y) + 3]) ||\n  //         //diagonal - right to left (/)\n  //         (value &&\n  //           value === grid[parseInt(x) + 1][parseInt(y) - 1] &&\n  //           value === grid[parseInt(x) + 2][parseInt(y) - 2] &&\n  //           value === grid[parseInt(x) + 3][parseInt(y) - 3])\n  //       ) {\n  //         return value;\n  //       }\n  const tie = grid.every(row => !row.includes(null));\n  if (tie) console.log(\"tie\"); //     }\n  //   }\n}","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/help.js"],"names":["createGrid","rows","columns","grid","i","push","Array","fill","checkResult","tie","every","row","includes","console","log"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;AACxC,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGH,IAAX,EAAiB;AACfE,IAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoB,IAApB,CAAV;AACAH,IAAAA,CAAC;AACF;;AACDD,EAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoB,MAApB,CAAV;AACA,SAAOJ,IAAP;AACD;AAED,OAAO,SAASK,WAAT,CAAqBL,IAArB,EAA2B;AAChC;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMM,GAAG,GAAGN,IAAI,CAACO,KAAL,CAAYC,GAAD,IAAS,CAACA,GAAG,CAACC,QAAJ,CAAa,IAAb,CAArB,CAAZ;AACA,MAAIH,GAAJ,EAASI,OAAO,CAACC,GAAR,CAAY,KAAZ,EAhCuB,CAiChC;AACA;AACD","sourcesContent":["export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\n\nexport function checkResult(grid) {\n  //   for (let x in grid) {\n  //     for (let y in grid[x]) {\n  //       let value = grid[x][y];\n\n  //       if (value === \"base\") continue;\n\n  //       if (\n  //         //left and right\n  //         (value &&\n  //           value === grid[x][parseInt(y) + 1] &&\n  //           value === grid[x][parseInt(y) + 2] &&\n  //           value === grid[x][parseInt(y) + 3]) ||\n  //         //up and down\n  //         (value &&\n  //           value === grid[parseInt(x) - 1][y] &&\n  //           value === grid[parseInt(x) - 2][y] &&\n  //           value === grid[parseInt(x) - 3][y]) ||\n  //         //diagonal - left to right (\\)\n  //         (value &&\n  //           value === grid[parseInt(x) + 1][parseInt(y) + 1] &&\n  //           value === grid[parseInt(x) + 2][parseInt(y) + 2] &&\n  //           value === grid[parseInt(x) + 3][parseInt(y) + 3]) ||\n  //         //diagonal - right to left (/)\n  //         (value &&\n  //           value === grid[parseInt(x) + 1][parseInt(y) - 1] &&\n  //           value === grid[parseInt(x) + 2][parseInt(y) - 2] &&\n  //           value === grid[parseInt(x) + 3][parseInt(y) - 3])\n  //       ) {\n  //         return value;\n  //       }\n  const tie = grid.every((row) => !row.includes(null));\n  if (tie) console.log(\"tie\");\n  //     }\n  //   }\n}\n"]},"metadata":{},"sourceType":"module"}