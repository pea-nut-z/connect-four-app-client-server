{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/src/components/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./Game.css\"; // import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  _s();\n\n  // Create grid\n  // States and flag\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid); //   const [stepNumber, setStepNumber] = useState(0);\n\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\";\n  const [result, setResult] = useState(\"\");\n  let resultDisplay; //   let result;\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n\n  const handleClick = (rowIndex, columnIndex) => {\n    if (!result) {\n      let r = rowIndex;\n      let c = columnIndex;\n\n      if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n        recordHuMoves(moves => [...moves, \"(\" + r + \",\" + c + \")\"]); //For debug\n\n        newGrid[r][c] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n        setResult(checkResult(newGrid));\n        console.log({\n          result\n        });\n        if (result === \"huPlayer\") resultDisplay = \"You win!\";\n        if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n        if (result === \"tie\") resultDisplay = \"Draw!\";\n        if (!result) setHuIsNext(!huIsNext);\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: newGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: huIsNext ? \"huTurn\" : \"aiTurn\",\n      children: turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: resultDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: huMoves\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Game, \"5f8cSmjGmcG4dz16NDKje+hs61s=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/SinglePlayer.js"],"names":["React","useEffect","useState","Button","Alert","Link","SquareGrid","createGrid","checkResult","Game","props","grid","newGrid","setGrid","huIsNext","setHuIsNext","huMoves","recordHuMoves","turn","result","setResult","resultDisplay","handleClick","rowIndex","columnIndex","r","c","moves","console","log","handleReplay","window","location","reload","map","row","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,iBAA9B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,QAAxC;AACA,OAAO,YAAP,C,CAEA;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAClC;AACA;AACA,QAAMC,IAAI,GAAGJ,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAvB;AACA,QAAM,CAACK,OAAD,EAAUC,OAAV,IAAqBX,QAAQ,CAACS,IAAD,CAAnC,CAJkC,CAKlC;;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACc,OAAD,EAAUC,aAAV,IAA2Bf,QAAQ,CAAC,EAAD,CAAzC,CAPkC,CAOa;;AAC/C,MAAIgB,IAAI,GAAGJ,QAAQ,GAAG,WAAH,GAAiB,kBAApC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AAEA,MAAImB,aAAJ,CAXkC,CAYlC;AAEA;AACA;AACA;;AAEA,QAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,WAAX,KAA2B;AAC7C,QAAI,CAACL,MAAL,EAAa;AACX,UAAIM,CAAC,GAAGF,QAAR;AACA,UAAIG,CAAC,GAAGF,WAAR;;AAEA,UAAIZ,OAAO,CAACa,CAAC,GAAG,CAAL,CAAP,CAAeC,CAAf,MAAsB,IAAtB,IAA8Bd,OAAO,CAACa,CAAD,CAAP,CAAWC,CAAX,MAAkB,IAApD,EAA0D;AACxDT,QAAAA,aAAa,CAAEU,KAAD,IAAW,CAAC,GAAGA,KAAJ,EAAW,MAAMF,CAAN,GAAU,GAAV,GAAgBC,CAAhB,GAAoB,GAA/B,CAAZ,CAAb,CADwD,CACO;;AAC/Dd,QAAAA,OAAO,CAACa,CAAD,CAAP,CAAWC,CAAX,IAAgBZ,QAAQ,GAAG,UAAH,GAAgB,UAAxC;AAEAM,QAAAA,SAAS,CAACZ,WAAW,CAACI,OAAD,CAAZ,CAAT;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEV,UAAAA;AAAF,SAAZ;AAEA,YAAIA,MAAM,KAAK,UAAf,EAA2BE,aAAa,GAAG,UAAhB;AAC3B,YAAIF,MAAM,KAAK,UAAf,EAA2BE,aAAa,GAAG,iBAAhB;AAC3B,YAAIF,MAAM,KAAK,KAAf,EAAsBE,aAAa,GAAG,OAAhB;AACtB,YAAI,CAACF,MAAL,EAAaJ,WAAW,CAAC,CAACD,QAAF,CAAX;AACd;AACF;AACF,GAlBD;;AAoBA,WAASgB,YAAT,GAAwB;AACtBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACD;;AAED,sBACE;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA,gBACGrB,OAAO,CAACsB,GAAR,CAAY,CAACC,GAAD,EAAMZ,QAAN,kBACX;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBACGY,GAAG,CAACD,GAAJ,CAAQ,CAACE,KAAD,EAAQZ,WAAR,kBACP,QAAC,UAAD;AAEE,UAAA,KAAK,EAAEY,KAFT;AAGE,UAAA,QAAQ,EAAEb,QAHZ;AAIE,UAAA,WAAW,EAAEC,WAJf;AAKE,UAAA,WAAW,EAAEF;AALf,WACOE,WADP;AAAA;AAAA;AAAA;AAAA,gBADD;AADH,SAA0BD,QAA1B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAkBE;AAAM,MAAA,SAAS,EAAET,QAAQ,GAAG,QAAH,GAAc,QAAvC;AAAA,gBAAkDI;AAAlD;AAAA;AAAA;AAAA;AAAA,YAlBF,eAmBE;AAAA;AAAA;AAAA;AAAA,YAnBF,eAqBE;AAAA,gBAAOG;AAAP;AAAA;AAAA;AAAA;AAAA,YArBF,eAsBE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAES,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBF,eAuBE;AAAA;AAAA;AAAA;AAAA,YAvBF,eAwBE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAa,MAAA,SAAS,EAAC,4BAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBF,eA2BE;AAAA;AAAA;AAAA;AAAA,YA3BF,eA6BE;AAAA,gBAAId;AAAJ;AAAA;AAAA;AAAA;AAAA,YA7BF;AAAA,kBADF;AAiCD;;GA3EuBP,I;;KAAAA,I","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./Game.css\";\n\n// import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  // Create grid\n  // States and flag\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n  //   const [stepNumber, setStepNumber] = useState(0);\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\";\n  const [result, setResult] = useState(\"\");\n\n  let resultDisplay;\n  //   let result;\n\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n\n  const handleClick = (rowIndex, columnIndex) => {\n    if (!result) {\n      let r = rowIndex;\n      let c = columnIndex;\n\n      if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n        recordHuMoves((moves) => [...moves, \"(\" + r + \",\" + c + \")\"]); //For debug\n        newGrid[r][c] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n\n        setResult(checkResult(newGrid));\n        console.log({ result });\n\n        if (result === \"huPlayer\") resultDisplay = \"You win!\";\n        if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n        if (result === \"tie\") resultDisplay = \"Draw!\";\n        if (!result) setHuIsNext(!huIsNext);\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      <div id=\"grid\">\n        {newGrid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* Who's turn */}\n      <span className={huIsNext ? \"huTurn\" : \"aiTurn\"}>{turn}</span>\n      <br />\n\n      <span>{resultDisplay}</span>\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      <p>{huMoves}</p>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}