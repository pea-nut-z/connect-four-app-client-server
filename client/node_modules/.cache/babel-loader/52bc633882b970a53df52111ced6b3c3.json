{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult, placeAValidMove } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\nexport default function MultiPlayer() {\n  _s();\n\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [endThisTurn, triggerEndThisTurn] = useState(); // const [ready, toggleReady] = useState(false);\n\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n  let result = checkResult(grid);\n\n  const handleClick = (rowIndex, columnIndex) => {\n    if (!result && huPlayerIsNext) {\n      let newGrid = placeAValidMove(grid, huPlayer, rowIndex, columnIndex);\n      if (!newGrid) return result = \"Invalid Move!\";\n      setGrid(newGrid);\n      setHuPlayerIsNext(!huPlayerIsNext);\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"turn-display\",\n      children: result ? \"\" : ready ? \"your turn\" : \"waiting for the other player...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MultiPlayer, \"Z7MXZLxB8IELhrh9g7kfspKWnP4=\");\n\n_c = MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js"],"names":["React","useState","useEffect","Button","Link","SquareGrid","createGrid","checkResult","placeAValidMove","io","MultiPlayer","blankGrid","grid","setGrid","endThisTurn","triggerEndThisTurn","huPlayerIsNext","setHuPlayerIsNext","huPlayer","aiPlayer","result","handleClick","rowIndex","columnIndex","newGrid","handleReplay","window","location","reload","map","row","value","ready"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,eAAlC,QAAyD,QAAzD;AACA,OAAO,mBAAP;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAMC,SAAS,GAAGL,UAAU,CAAC,CAAD,EAAI,CAAJ,CAA5B;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAACU,SAAD,CAAhC;AACA,QAAM,CAACG,WAAD,EAAcC,kBAAd,IAAoCd,QAAQ,EAAlD,CAHoC,CAIpC;;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,IAAD,CAApD;AAEA,MAAIiB,QAAQ,GAAG,UAAf;AACA,MAAIC,QAAQ,GAAG,UAAf;AAEA,MAAIC,MAAM,GAAGb,WAAW,CAACK,IAAD,CAAxB;;AAEA,QAAMS,WAAW,GAAG,CAACC,QAAD,EAAWC,WAAX,KAA2B;AAC7C,QAAI,CAACH,MAAD,IAAWJ,cAAf,EAA+B;AAC7B,UAAIQ,OAAO,GAAGhB,eAAe,CAACI,IAAD,EAAOM,QAAP,EAAiBI,QAAjB,EAA2BC,WAA3B,CAA7B;AACA,UAAI,CAACC,OAAL,EAAc,OAAQJ,MAAM,GAAG,eAAjB;AACdP,MAAAA,OAAO,CAACW,OAAD,CAAP;AACAP,MAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACD;AACF,GAPD;;AASA,WAASS,YAAT,GAAwB;AACtBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACD;;AAED,sBACE;AAAA,4BAEE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA,gBACGhB,IAAI,CAACiB,GAAL,CAAS,CAACC,GAAD,EAAMR,QAAN,kBACR;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBACGQ,GAAG,CAACD,GAAJ,CAAQ,CAACE,KAAD,EAAQR,WAAR,kBACP,QAAC,UAAD;AAEE,UAAA,KAAK,EAAEQ,KAFT;AAGE,UAAA,QAAQ,EAAET,QAHZ;AAIE,UAAA,WAAW,EAAEC,WAJf;AAKE,UAAA,WAAW,EAAEF;AALf,WACOE,WADP;AAAA;AAAA;AAAA;AAAA,gBADD;AADH,SAA0BD,QAA1B;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAmBE;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA,gBACGF,MAAM,GAAG,EAAH,GAAQY,KAAK,GAAG,WAAH,GAAiB;AADvC;AAAA;AAAA;AAAA;AAAA,YAnBF,eAsBE;AAAA;AAAA;AAAA;AAAA,YAtBF,eAwBE;AAAA,gBAAOZ;AAAP;AAAA;AAAA;AAAA;AAAA,YAxBF,eAyBE;AAAA;AAAA;AAAA;AAAA,YAzBF,eA0BE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEK,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BF,eA2BE;AAAA;AAAA;AAAA;AAAA,YA3BF,eA4BE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAa,MAAA,SAAS,EAAC,4BAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BF,eA+BE;AAAA;AAAA;AAAA;AAAA,YA/BF;AAAA,kBADF;AAmCD;;GA5DuBf,W;;KAAAA,W","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult, placeAValidMove } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\n\nexport default function MultiPlayer() {\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [endThisTurn, triggerEndThisTurn] = useState();\n  // const [ready, toggleReady] = useState(false);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n\n  let result = checkResult(grid);\n\n  const handleClick = (rowIndex, columnIndex) => {\n    if (!result && huPlayerIsNext) {\n      let newGrid = placeAValidMove(grid, huPlayer, rowIndex, columnIndex);\n      if (!newGrid) return (result = \"Invalid Move!\");\n      setGrid(newGrid);\n      setHuPlayerIsNext(!huPlayerIsNext);\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\">\n        {grid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* WHO's TURN DISPLAY*/}\n      <span className=\"turn-display\">\n        {result ? \"\" : ready ? \"your turn\" : \"waiting for the other player...\"}\n      </span>\n      <br />\n      {/* WINNING RESULT*/}\n      <span>{result}</span>\n      <br />\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}