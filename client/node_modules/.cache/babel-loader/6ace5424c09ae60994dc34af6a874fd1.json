{"ast":null,"code":"export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\nexport function checkResult(grid) {\n  let x, y;\n  console.log(grid);\n\n  for (x in grid) {\n    x = parseInt(x);\n\n    for (y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n      if (value === \"base\") continue;\n\n      if ( //left and right\n      value && value === grid[x][y + 1] && value === grid[x][y + 2] && value === grid[x][y + 3] || //up and down\n      value && value === grid[x + 1][y] && value === grid[x + 2][y] && value === grid[x + 3][y] || //diagonal - left to right (\\)\n      value && value === grid[x + 1][y + 1] && value === grid[x + 2][y + 2] && value === grid[x + 3][y + 3] || //diagonal - right to left (/)\n      value && value === grid[x + 1][y - 1] && value === grid[x + 2][y - 2] && value === grid[x + 3][y - 3]) {\n        return value;\n      }\n\n      const tie = grid.every(row => !row.includes(null));\n      if (tie) return \"tie\";\n    }\n  }\n}","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/help.js"],"names":["createGrid","rows","columns","grid","i","push","Array","fill","checkResult","x","y","console","log","parseInt","value","tie","every","row","includes"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;AACxC,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGH,IAAX,EAAiB;AACfE,IAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoB,IAApB,CAAV;AACAH,IAAAA,CAAC;AACF;;AACDD,EAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoB,MAApB,CAAV;AACA,SAAOJ,IAAP;AACD;AAED,OAAO,SAASK,WAAT,CAAqBL,IAArB,EAA2B;AAChC,MAAIM,CAAJ,EAAOC,CAAP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;;AACA,OAAKM,CAAL,IAAUN,IAAV,EAAgB;AACdM,IAAAA,CAAC,GAAGI,QAAQ,CAACJ,CAAD,CAAZ;;AACA,SAAKC,CAAL,IAAUP,IAAI,CAACM,CAAD,CAAd,EAAmB;AACjBC,MAAAA,CAAC,GAAGG,QAAQ,CAACH,CAAD,CAAZ;AACA,UAAII,KAAK,GAAGX,IAAI,CAACM,CAAD,CAAJ,CAAQC,CAAR,CAAZ;AAEA,UAAII,KAAK,KAAK,MAAd,EAAsB;;AACtB,WACE;AACCA,MAAAA,KAAK,IACJA,KAAK,KAAKX,IAAI,CAACM,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,CADX,IAECI,KAAK,KAAKX,IAAI,CAACM,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,CAFX,IAGCI,KAAK,KAAKX,IAAI,CAACM,CAAD,CAAJ,CAAQC,CAAC,GAAG,CAAZ,CAHZ,IAIA;AACCI,MAAAA,KAAK,IACJA,KAAK,KAAKX,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,CADX,IAECI,KAAK,KAAKX,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,CAFX,IAGCI,KAAK,KAAKX,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAZ,CARZ,IASA;AACCI,MAAAA,KAAK,IACJA,KAAK,KAAKX,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CADX,IAECI,KAAK,KAAKX,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAFX,IAGCI,KAAK,KAAKX,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAbZ,IAcA;AACCI,MAAAA,KAAK,IACJA,KAAK,KAAKX,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CADX,IAECI,KAAK,KAAKX,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CAFX,IAGCI,KAAK,KAAKX,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYC,CAAC,GAAG,CAAhB,CApBd,EAqBE;AACA,eAAOI,KAAP;AACD;;AACD,YAAMC,GAAG,GAAGZ,IAAI,CAACa,KAAL,CAAYC,GAAD,IAAS,CAACA,GAAG,CAACC,QAAJ,CAAa,IAAb,CAArB,CAAZ;AACA,UAAIH,GAAJ,EAAS,OAAO,KAAP;AACV;AACF;AACF","sourcesContent":["export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\n\nexport function checkResult(grid) {\n  let x, y;\n  console.log(grid);\n  for (x in grid) {\n    x = parseInt(x);\n    for (y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n\n      if (value === \"base\") continue;\n      if (\n        //left and right\n        (value &&\n          value === grid[x][y + 1] &&\n          value === grid[x][y + 2] &&\n          value === grid[x][y + 3]) ||\n        //up and down\n        (value &&\n          value === grid[x + 1][y] &&\n          value === grid[x + 2][y] &&\n          value === grid[x + 3][y]) ||\n        //diagonal - left to right (\\)\n        (value &&\n          value === grid[x + 1][y + 1] &&\n          value === grid[x + 2][y + 2] &&\n          value === grid[x + 3][y + 3]) ||\n        //diagonal - right to left (/)\n        (value &&\n          value === grid[x + 1][y - 1] &&\n          value === grid[x + 2][y - 2] &&\n          value === grid[x + 3][y - 3])\n      ) {\n        return value;\n      }\n      const tie = grid.every((row) => !row.includes(null));\n      if (tie) return \"tie\";\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}