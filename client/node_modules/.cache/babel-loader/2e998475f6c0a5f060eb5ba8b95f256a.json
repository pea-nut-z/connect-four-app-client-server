{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\nexport default function MultiPlayer() {\n  _s();\n\n  const history = useHistory();\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n  let currentPlayer = 1;\n  useEffect(() => {\n    const client = io(\"http://localhost:3001\");\n    client.on(\"player1-connected\", () => {\n      toggleConnection1(!connected1);\n    });\n    client.on(\"player2-connected\", () => {\n      toggleConnection1(!connected1);\n      toggleConnection2(!connected2);\n      currentPlayer = 2;\n    });\n    client.on(\"server-full\", num => {\n      alert(\"Sorry, server is full!\");\n      history.push(\"/\");\n    });\n    client.on(\"inform-player1\", () => {\n      toggleConnection2(!connected2);\n    });\n    const lastMove = newGrid.slice();\n    client.emit(\"new-grid\", lastMove => {\n      console.log({\n        lastMove\n      });\n    }); // client.on(\"new-move\", (grid) => {\n    //   console.log(\"receieved from server\");\n    //   console.log(grid);\n    // });\n\n    client.on(\"player-disconnected\", num => {\n      if (num === 0) toggleConnection1(false);\n      if (num === 1) toggleConnection2(false);\n    });\n    return () => {\n      client.disconnect();\n    };\n  }, []);\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  let currentTurn = player1IsNext ? 1 : 2; // let resultDisplay\n  //   let result = checkResult(newGrid);\n  //   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  //   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  //   if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (currentPlayer === currentTurn) {\n    let r = rowIndex;\n    let c = columnIndex;\n\n    if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n      newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n      setPlayer1IsNext(!player1IsNext);\n    } // }\n\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: newGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p1\",\n      children: [\"Player 1\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected1 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p2\",\n      children: [\"Player 2\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `indicator ${connected2 ? \"green\" : \"red\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: player1IsNext ? \"player1Turn\" : \"player2Turn\",\n      children: player1IsNext ? \"Player1's turn\" : \"Player2's turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MultiPlayer, \"H14XM+O2e/fPCcv3CiMVtsoQ0Po=\", false, function () {\n  return [useHistory];\n});\n\n_c = MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js"],"names":["React","useState","useEffect","Button","Link","useHistory","SquareGrid","createGrid","checkResult","io","MultiPlayer","history","grid","newGrid","setGrid","connected1","toggleConnection1","connected2","toggleConnection2","currentPlayer","client","on","num","alert","push","lastMove","slice","emit","console","log","disconnect","player1IsNext","setPlayer1IsNext","currentTurn","handleClick","rowIndex","columnIndex","r","c","handleReplay","window","location","reload","map","row","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\n\nexport default function MultiPlayer() {\n  const history = useHistory();\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n  const [connected1, toggleConnection1] = useState(false);\n  const [connected2, toggleConnection2] = useState(false);\n  let currentPlayer = 1;\n\n  useEffect(() => {\n    const client = io(\"http://localhost:3001\");\n\n    client.on(\"player1-connected\", () => {\n      toggleConnection1(!connected1);\n    });\n\n    client.on(\"player2-connected\", () => {\n      toggleConnection1(!connected1);\n      toggleConnection2(!connected2);\n      currentPlayer = 2;\n    });\n\n    client.on(\"server-full\", (num) => {\n      alert(\"Sorry, server is full!\");\n      history.push(\"/\");\n    });\n\n    client.on(\"inform-player1\", () => {\n      toggleConnection2(!connected2);\n    });\n\n    const lastMove = newGrid.slice();\n    client.emit(\"new-grid\", (lastMove) => {\n      console.log({ lastMove });\n    });\n\n    // client.on(\"new-move\", (grid) => {\n    //   console.log(\"receieved from server\");\n    //   console.log(grid);\n    // });\n    client.on(\"player-disconnected\", (num) => {\n      if (num === 0) toggleConnection1(false);\n      if (num === 1) toggleConnection2(false);\n    });\n\n    return () => {\n      client.disconnect();\n    };\n  }, []);\n\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  let currentTurn = player1IsNext ? 1 : 2;\n\n  // let resultDisplay\n  //   let result = checkResult(newGrid);\n  //   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  //   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  //   if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (currentPlayer === currentTurn) {\n    let r = rowIndex;\n    let c = columnIndex;\n\n    if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n      newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n      setPlayer1IsNext(!player1IsNext);\n    }\n    // }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\">\n        {newGrid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* CONNECTION INDICATOR */}\n\n      <div className=\"player p1\">\n        Player 1\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected1 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      <div className=\"player p2\">\n        Player 2\n        <div className=\"connected\">\n          Connected\n          <span className={`indicator ${connected2 ? \"green\" : \"red\"}`} />\n        </div>\n      </div>\n\n      {/* WHO's TURN    result ? \"\" :     */}\n      <span className={player1IsNext ? \"player1Turn\" : \"player2Turn\"}>\n        {player1IsNext ? \"Player1's turn\" : \"Player2's turn\"}\n      </span>\n      <br />\n\n      {/* <span>{resultDisplay}</span> */}\n\n      <Button>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      {/* <p>{huMoves}</p> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}