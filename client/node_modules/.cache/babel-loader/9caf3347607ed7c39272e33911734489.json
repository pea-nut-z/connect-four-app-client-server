{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/src/components/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid } from \"./help\"; // import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  _s();\n\n  // Create grid\n  // States and flag\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid); //   const [stepNumber, setStepNumber] = useState(0);\n\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\"; //  Check for winners and tie\n  //   let result = checkResult(newGrid, winningArrays);\n  //   if (result === \"huPlayer\") result = \"You win!\";\n  //   if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  //   if (result === \"tie\") result = \"Draw!\";\n  //   if (result) turn = null;\n  // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    // const previousGrid = grid.slice();\n    // const currentGrid = grid[previousGrid.length - 1];\n    // console.log(x, y);\n    let r = rowIndex;\n    let c = columnIndex;\n    let test = newGrid.slice();\n\n    if (test[r + 1][c] !== \"null\" && test[r][c] === \"null\") {\n      recordHuMoves(moves => [...moves, [r, c]]); //For debug\n\n      test[r][c] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n      setGrid(test); //   setStepNumber(moves.length);\n\n      setHuIsNext(!huIsNext);\n    }\n  }; // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: newGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((status, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: status,\n          onClick: () => handleClick(rowIndex, columnIndex)\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: newGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: huIsNext ? \"huTurn\" : \"aiTurn\",\n      children: turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: huMoves\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Game, \"0VlI/Y5ocPOEnFHTaF2eiEklX9U=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/SinglePlayer.js"],"names":["React","useEffect","useState","Button","Alert","Link","SquareGrid","createGrid","Game","props","grid","newGrid","setGrid","huIsNext","setHuIsNext","huMoves","recordHuMoves","turn","handleClick","rowIndex","columnIndex","r","c","test","slice","moves","handleReplay","window","location","reload","map","row","status"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid } from \"./help\";\n// import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  // Create grid\n  // States and flag\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n  //   const [stepNumber, setStepNumber] = useState(0);\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\";\n\n  //  Check for winners and tie\n  //   let result = checkResult(newGrid, winningArrays);\n  //   if (result === \"huPlayer\") result = \"You win!\";\n  //   if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  //   if (result === \"tie\") result = \"Draw!\";\n  //   if (result) turn = null;\n\n  // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    // const previousGrid = grid.slice();\n    // const currentGrid = grid[previousGrid.length - 1];\n    // console.log(x, y);\n\n    let r = rowIndex;\n    let c = columnIndex;\n    let test = newGrid.slice();\n    if (test[r + 1][c] !== \"null\" && test[r][c] === \"null\") {\n      recordHuMoves((moves) => [...moves, [r, c]]); //For debug\n      test[r][c] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n      setGrid(test);\n      //   setStepNumber(moves.length);\n      setHuIsNext(!huIsNext);\n    }\n  };\n\n  // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      <div id=\"grid\">\n        {newGrid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((status, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={status}\n                onClick={() => handleClick(rowIndex, columnIndex)}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <div>{newGrid}</div>\n      {/* Who's turn */}\n      <span className={huIsNext ? \"huTurn\" : \"aiTurn\"}>{turn}</span>\n      <br />\n\n      {/* <span>{result}</span> */}\n      {/* <button onClick={() => undo(moves)}>Undo</button> */}\n\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      <p>{huMoves}</p>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}