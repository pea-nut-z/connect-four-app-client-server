{"ast":null,"code":"export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\nexport function checkResult(grid) {\n  if (!grid) return;\n  const tie = grid.every(row => !row.includes(null));\n  if (tie) return \"Draw!\";\n\n  for (let x in grid) {\n    x = parseInt(x);\n\n    for (let y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n      if (value === \"base\") continue;\n\n      if ( //left and right\n      value && value === grid[x][y + 1] && value === grid[x][y + 2] && value === grid[x][y + 3] || //up and down\n      value && value === grid[x + 1][y] && value === grid[x + 2][y] && value === grid[x + 3][y] || //diagonal - left to right (\\)\n      value && value === grid[x + 1][y + 1] && value === grid[x + 2][y + 2] && value === grid[x + 3][y + 3] || //diagonal - right to left (/)\n      value && value === grid[x + 1][y - 1] && value === grid[x + 2][y - 2] && value === grid[x + 3][y - 3]) {\n        return value + \" wins\";\n      }\n    }\n  }\n}\nexport function findAValidMove(grid, player, rowIndex, columnIndex) {\n  let r = rowIndex;\n  let c = columnIndex;\n\n  if (grid[r + 1][c] !== null && grid[r][c] === null) {\n    let newGrid = grid.slice();\n    newGrid[r][c] = player;\n    return newGrid;\n  }\n\n  return;\n}\nexport function findAiMove(grid, player) {\n  let bestMoveScore = 100;\n  let move;\n\n  for (let rowIndex in grid) {\n    rowIndex = parseInt(rowIndex);\n\n    for (let columnIndex in grid[rowIndex]) {\n      columnIndex = parseInt(columnIndex);\n      let newGrid = findAValidMove(grid, player, rowIndex, columnIndex);\n\n      if (newGrid) {\n        const moveScore = maxScore(newGrid, player);\n\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = [rowIndex, columnIndex];\n        }\n      }\n    }\n  }\n\n  return move;\n}\nexport function minScore(grid, player) {\n  let result = checkResult(grid);\n  if (result.includes(\"Player-1\")) return 10;\n  if (result.includes(\"Player-2\")) return -10;\n  if (result.includes(\"Draw\")) return 0;\n  let bestMoveScore = 100;\n  let move;\n\n  for (let rowIndex in grid) {\n    rowIndex = parseInt(rowIndex);\n\n    for (let columnIndex in grid[rowIndex]) {\n      columnIndex = parseInt(columnIndex);\n      let newGrid = findAValidMove(grid, player, rowIndex, columnIndex);\n\n      if (newGrid) {\n        const moveScore = maxScore(newGrid, player);\n\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = [rowIndex, columnIndex];\n        }\n      }\n    }\n  }\n\n  return bestMoveScore;\n}\nexport function maxScore(grid, player) {\n  let result = checkResult(grid);\n  console.log({\n    result\n  });\n\n  if (result) {\n    if (result.includes(\"Player-1\")) return 10;\n    if (result.includes(\"Player-2\")) return -10;\n    if (result.includes(\"Draw\")) return 0;\n  } else {\n    let bestMoveScore = -100;\n    let move;\n\n    for (let rowIndex in grid) {\n      rowIndex = parseInt(rowIndex);\n\n      for (let columnIndex in grid[rowIndex]) {\n        columnIndex = parseInt(columnIndex);\n        let newGrid = findAValidMove(grid, player, rowIndex, columnIndex);\n\n        if (newGrid) {\n          const moveScore = minScore(newGrid, player);\n\n          if (moveScore > bestMoveScore) {\n            bestMoveScore = moveScore;\n            move = [rowIndex, columnIndex];\n          }\n        }\n      }\n    }\n\n    return bestMoveScore;\n  }\n}","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/help.js"],"names":["createGrid","rows","columns","grid","i","push","Array","fill","checkResult","tie","every","row","includes","x","parseInt","y","value","findAValidMove","player","rowIndex","columnIndex","r","c","newGrid","slice","findAiMove","bestMoveScore","move","moveScore","maxScore","minScore","result","console","log"],"mappings":"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","sourcesContent":["export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\n\nexport function checkResult(grid) {\n  if (!grid) return;\n  const tie = grid.every((row) => !row.includes(null));\n  if (tie) return \"Draw!\";\n\n  for (let x in grid) {\n    x = parseInt(x);\n    for (let y in grid[x]) {\n      y = parseInt(y);\n      let value = grid[x][y];\n\n      if (value === \"base\") continue;\n      if (\n        //left and right\n        (value &&\n          value === grid[x][y + 1] &&\n          value === grid[x][y + 2] &&\n          value === grid[x][y + 3]) ||\n        //up and down\n        (value &&\n          value === grid[x + 1][y] &&\n          value === grid[x + 2][y] &&\n          value === grid[x + 3][y]) ||\n        //diagonal - left to right (\\)\n        (value &&\n          value === grid[x + 1][y + 1] &&\n          value === grid[x + 2][y + 2] &&\n          value === grid[x + 3][y + 3]) ||\n        //diagonal - right to left (/)\n        (value &&\n          value === grid[x + 1][y - 1] &&\n          value === grid[x + 2][y - 2] &&\n          value === grid[x + 3][y - 3])\n      ) {\n        return value + \" wins\";\n      }\n    }\n  }\n}\n\nexport function findAValidMove(grid, player, rowIndex, columnIndex) {\n  let r = rowIndex;\n  let c = columnIndex;\n  if (grid[r + 1][c] !== null && grid[r][c] === null) {\n    let newGrid = grid.slice();\n    newGrid[r][c] = player;\n    return newGrid;\n  }\n  return;\n}\n\nexport function findAiMove(grid, player) {\n  let bestMoveScore = 100;\n  let move;\n  for (let rowIndex in grid) {\n    rowIndex = parseInt(rowIndex);\n    for (let columnIndex in grid[rowIndex]) {\n      columnIndex = parseInt(columnIndex);\n      let newGrid = findAValidMove(grid, player, rowIndex, columnIndex);\n      if (newGrid) {\n        const moveScore = maxScore(newGrid, player);\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = [rowIndex, columnIndex];\n        }\n      }\n    }\n  }\n  return move;\n}\n\nexport function minScore(grid, player) {\n  let result = checkResult(grid);\n\n  if (result.includes(\"Player-1\")) return 10;\n  if (result.includes(\"Player-2\")) return -10;\n  if (result.includes(\"Draw\")) return 0;\n  let bestMoveScore = 100;\n  let move;\n  for (let rowIndex in grid) {\n    rowIndex = parseInt(rowIndex);\n    for (let columnIndex in grid[rowIndex]) {\n      columnIndex = parseInt(columnIndex);\n      let newGrid = findAValidMove(grid, player, rowIndex, columnIndex);\n      if (newGrid) {\n        const moveScore = maxScore(newGrid, player);\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = [rowIndex, columnIndex];\n        }\n      }\n    }\n  }\n  return bestMoveScore;\n}\n\nexport function maxScore(grid, player) {\n  let result = checkResult(grid);\n  console.log({ result });\n  if (result) {\n    if (result.includes(\"Player-1\")) return 10;\n    if (result.includes(\"Player-2\")) return -10;\n    if (result.includes(\"Draw\")) return 0;\n  } else {\n    let bestMoveScore = -100;\n    let move;\n    for (let rowIndex in grid) {\n      rowIndex = parseInt(rowIndex);\n      for (let columnIndex in grid[rowIndex]) {\n        columnIndex = parseInt(columnIndex);\n        let newGrid = findAValidMove(grid, player, rowIndex, columnIndex);\n        if (newGrid) {\n          const moveScore = minScore(newGrid, player);\n          if (moveScore > bestMoveScore) {\n            bestMoveScore = moveScore;\n            move = [rowIndex, columnIndex];\n          }\n        }\n      }\n    }\n    return bestMoveScore;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}