{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/src/components/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport SquareGrid from \"./SquareGrid\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\"; // import { winningArrays, checkResult } from \"./helper\";\n// import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  _s();\n\n  let rows = 6;\n  let columns = 7;\n  let grid = [];\n  let i = 0;\n\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  } // Create grid\n  // States and flag\n\n\n  const [moves, setMoves] = useState(grid);\n  console.log({\n    moves\n  });\n  const [stepNumber, setStepNumber] = useState(0);\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\"; //  Check for winners and tie\n  //   let result = checkResult(newGrid, winningArrays);\n  //   if (result === \"huPlayer\") result = \"You win!\";\n  //   if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  //   if (result === \"tie\") result = \"Draw!\";\n  //   if (result) turn = null;\n  // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n\n  const handleClick = i => {\n    // if (!result) {\n    const previousMove = moves.slice();\n    const current = moves[previousMove.length - 1];\n\n    if (current[i + 7] !== null && current[i] === null) {\n      recordHuMoves(moves => [...moves, i + \",\"]); //For debug\n\n      current[i] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n      setMoves([previousMove[previousMove.length - 1], current]);\n      setStepNumber(moves.length);\n      setHuIsNext(!huIsNext);\n      console.log({\n        moves\n      });\n    } // }\n\n  }; // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: moves[moves.length - 1].map((move, i) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n        value: move,\n        onClick: () => handleClick(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: huIsNext ? \"huTurn\" : \"aiTurn\",\n      children: turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: huMoves\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Game, \"q7piGD207uyXvzYR5/IiA4Me/3k=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/SinglePlayer.js"],"names":["React","useEffect","useState","SquareGrid","Button","Alert","Link","Game","props","rows","columns","grid","i","push","Array","fill","moves","setMoves","console","log","stepNumber","setStepNumber","huIsNext","setHuIsNext","huMoves","recordHuMoves","turn","handleClick","previousMove","slice","current","length","handleReplay","window","location","reload","map","move"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport SquareGrid from \"./SquareGrid\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n// import { winningArrays, checkResult } from \"./helper\";\n// import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  let rows = 6;\n  let columns = 7;\n  let grid = [];\n\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n\n  // Create grid\n  // States and flag\n  const [moves, setMoves] = useState(grid);\n  console.log({ moves });\n\n  const [stepNumber, setStepNumber] = useState(0);\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\";\n\n  //  Check for winners and tie\n  //   let result = checkResult(newGrid, winningArrays);\n  //   if (result === \"huPlayer\") result = \"You win!\";\n  //   if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  //   if (result === \"tie\") result = \"Draw!\";\n  //   if (result) turn = null;\n\n  // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n\n  // MINIMAX\n  // board, winningarrays, player\n\n  // Make a move\n  const handleClick = (i) => {\n    // if (!result) {\n    const previousMove = moves.slice();\n    const current = moves[previousMove.length - 1];\n    if (current[i + 7] !== null && current[i] === null) {\n      recordHuMoves((moves) => [...moves, i + \",\"]); //For debug\n      current[i] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n      setMoves([previousMove[previousMove.length - 1], current]);\n      setStepNumber(moves.length);\n      setHuIsNext(!huIsNext);\n      console.log({ moves });\n    }\n    // }\n  };\n\n  // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      <div id=\"grid\">\n        {moves[moves.length - 1].map((move, i) => (\n          <SquareGrid key={i} value={move} onClick={() => handleClick(i)} />\n        ))}\n      </div>\n      {/* Who's turn */}\n      <span className={huIsNext ? \"huTurn\" : \"aiTurn\"}>{turn}</span>\n      <br />\n      {/* <span>{result}</span> */}\n\n      {/* <button onClick={() => undo(moves)}>Undo</button> */}\n\n      {/* <Link to=\"/single-player\" className=\"btn btn-primary w-100 mt-3\">\n        Replay\n      </Link> */}\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      <p>{huMoves}</p>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}