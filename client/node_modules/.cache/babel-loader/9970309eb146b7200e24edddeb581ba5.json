{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult, findAValidMove, findAiMove, minScore, maxScore } from \"./help\";\nimport \"./multiPlayer.css\";\nexport default function SinglePlayer() {\n  _s();\n\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  const [warning, displayWarning] = useState(\"\");\n  const [result, displayResult] = useState(\"\");\n  const [ready, toggleReady] = useState(false);\n  const prevGridRef = useRef();\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\"; //   useEffect(() => {\n  // const grid =\n  //   }, [turn]);\n\n  const handleClick = (rowIndex, columnIndex) => {\n    prevGridRef.current = grid;\n    console.log(prevGridRef.current);\n    setGrid(prevGridRef.current);\n\n    if (!result && huPlayerIsNext) {\n      let newGrid = findAValidMove(grid, huPlayer, rowIndex, columnIndex);\n\n      if (!newGrid) {\n        displayWarning(\"Invalid Move!\");\n      } else {\n        displayWarning(\"\");\n        displayResult(checkResult(newGrid));\n\n        if (!result) {\n          // setHuPlayerIsNext(!huPlayerIsNext);\n          // const [aiMoveRowIndex, aiMoveColumnIndex] = findAiMove(\n          //   copy,\n          //   huPlayer,\n          //   aiPlayer\n          // );\n          setTurn(!turn);\n        }\n      } //     // console.log({  });\n      //     // console.log({ huPlayerIsNext });\n      //     // console.log({ newGrid });\n      //     // console.log({ test });\n      //     // setGrid(test);\n\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: ready && grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"turn-display\",\n      children: result ? \"\" : huPlayerIsNext ? \"Your turn\" : \"Peanutbot's turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: warning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SinglePlayer, \"igJvZGeExtbBEgS6efKjwCYHhTM=\");\n\n_c = SinglePlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js"],"names":["React","useState","useEffect","useRef","Button","Link","SquareGrid","createGrid","checkResult","findAValidMove","findAiMove","minScore","maxScore","SinglePlayer","blankGrid","grid","setGrid","huPlayerIsNext","setHuPlayerIsNext","warning","displayWarning","result","displayResult","ready","toggleReady","prevGridRef","huPlayer","aiPlayer","handleClick","rowIndex","columnIndex","current","console","log","newGrid","setTurn","turn","handleReplay","window","location","reload","map","row","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport {\n  createGrid,\n  checkResult,\n  findAValidMove,\n  findAiMove,\n  minScore,\n  maxScore,\n} from \"./help\";\nimport \"./multiPlayer.css\";\n\nexport default function SinglePlayer() {\n  const blankGrid = createGrid(6, 7);\n  const [grid, setGrid] = useState(blankGrid);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  const [warning, displayWarning] = useState(\"\");\n  const [result, displayResult] = useState(\"\");\n  const [ready, toggleReady] = useState(false);\n  const prevGridRef = useRef();\n\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n\n  //   useEffect(() => {\n  // const grid =\n  //   }, [turn]);\n\n  const handleClick = (rowIndex, columnIndex) => {\n    prevGridRef.current = grid;\n    console.log(prevGridRef.current);\n    setGrid(prevGridRef.current);\n    if (!result && huPlayerIsNext) {\n      let newGrid = findAValidMove(grid, huPlayer, rowIndex, columnIndex);\n      if (!newGrid) {\n        displayWarning(\"Invalid Move!\");\n      } else {\n        displayWarning(\"\");\n        displayResult(checkResult(newGrid));\n\n        if (!result) {\n          // setHuPlayerIsNext(!huPlayerIsNext);\n          // const [aiMoveRowIndex, aiMoveColumnIndex] = findAiMove(\n          //   copy,\n          //   huPlayer,\n          //   aiPlayer\n          // );\n          setTurn(!turn);\n        }\n      }\n      //     // console.log({  });\n      //     // console.log({ huPlayerIsNext });\n      //     // console.log({ newGrid });\n      //     // console.log({ test });\n      //     // setGrid(test);\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\">\n        {ready &&\n          grid.map((row, rowIndex) => (\n            <div className=\"row\" key={rowIndex}>\n              {row.map((value, columnIndex) => (\n                <SquareGrid\n                  key={columnIndex}\n                  value={value}\n                  rowIndex={rowIndex}\n                  columnIndex={columnIndex}\n                  handleClick={handleClick}\n                />\n              ))}\n            </div>\n          ))}\n      </div>\n\n      {/* WHO's TURN DISPLAY*/}\n      <span className=\"turn-display\">\n        {result ? \"\" : huPlayerIsNext ? \"Your turn\" : \"Peanutbot's turn\"}\n      </span>\n      <br />\n      {/* WARNING MSG*/}\n      <span>{warning}</span>\n      <br />\n      {/* WINNING RESULT*/}\n      <span>{result}</span>\n      <br />\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}