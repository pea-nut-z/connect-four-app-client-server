{"ast":null,"code":"import _slicedToArray from\"/Users/paulinez/connect-four/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// NOTE\n// r = row index\n// c = column index\nexport function createGrid(r,c){var grid=[];var i=0;while(i<r){grid.push(Array(c).fill(null));i++;}return grid;}export function checkResult(grid){var tie=grid.every(function(row){return!row.includes(null);});if(tie)return\"Draw!\";for(var r=0;r<grid.length;r++){for(var c=0;c<grid[r].length;c++){var value=grid[r][c];if(//left and right\nvalue&&value===grid[r][c+1]&&value===grid[r][c+2]&&value===grid[r][c+3]){return value+\" wins\";}if(r<grid.length-3){if(//up and down\nvalue&&value===grid[r+1][c]&&value===grid[r+2][c]&&value===grid[r+3][c]||//diagonal \" \\ \"\nvalue&&value===grid[r+1][c+1]&&value===grid[r+2][c+2]&&value===grid[r+3][c+3]||//diagonal \" / \"\nvalue&&value===grid[r+1][c-1]&&value===grid[r+2][c-2]&&value===grid[r+3][c-3]){return value+\" wins\";}}}}return null;}export function findAValidMove(grid,c){for(var r=grid.length-1;r>=0;r--){if(grid[r][c]===null){var move=[r,c];return move;}}}export function findAiMove(grid,columns,huPlayer,aiPlayer){var MAX_DEPTH=3;var bestMoveScore=100;var move=[];var columnIndexes=columns-1;for(var c=columnIndexes;c>=0;c--){var newMove=findAValidMove(grid,c);if(newMove){var _newMove=_slicedToArray(newMove,2),row=_newMove[0],col=_newMove[1];grid[row][col]=aiPlayer;var moveScore=maxScore(grid,columnIndexes,MAX_DEPTH,huPlayer,aiPlayer);grid[row][col]=null;if(moveScore<bestMoveScore){bestMoveScore=moveScore;move=[row,col];}}}return move;}function minScore(grid,columnIndexes,depth,huPlayer,aiPlayer){var result=checkResult(grid);if(result){if(result===\"Player-1 wins\")return 10;if(result===\"Player-2 wins\")return-10;if(result===\"Draw\")return 0;}if(depth===0)return 0;var bestMoveScore=100;for(var c=columnIndexes;c>=0;c--){var newMove=findAValidMove(grid,c);if(newMove){var _newMove2=_slicedToArray(newMove,2),row=_newMove2[0],col=_newMove2[1];grid[row][col]=huPlayer;var moveScore=maxScore(grid,columnIndexes,depth-1,huPlayer,aiPlayer);grid[row][col]=null;if(moveScore<bestMoveScore){bestMoveScore=moveScore;}}}return bestMoveScore;}function maxScore(grid,columnIndexes,depth,huPlayer,aiPlayer){var result=checkResult(grid);if(result){if(result===\"Player-1 wins\")return 10;if(result===\"Player-2 wins\")return-10;if(result===\"Draw\")return 0;}if(depth===0)return 0;var bestMoveScore=-100;for(var c=columnIndexes;c>=0;c--){var newMove=findAValidMove(grid,c);if(newMove){var _newMove3=_slicedToArray(newMove,2),row=_newMove3[0],col=_newMove3[1];grid[row][col]=huPlayer;var moveScore=minScore(grid,columnIndexes,depth-1,huPlayer,aiPlayer);grid[row][col]=null;if(moveScore>bestMoveScore){bestMoveScore=moveScore;}}}return bestMoveScore;}","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/help.js"],"names":["createGrid","r","c","grid","i","push","Array","fill","checkResult","tie","every","row","includes","length","value","findAValidMove","move","findAiMove","columns","huPlayer","aiPlayer","MAX_DEPTH","bestMoveScore","columnIndexes","newMove","col","moveScore","maxScore","minScore","depth","result"],"mappings":"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","sourcesContent":["// NOTE\n// r = row index\n// c = column index\n\nexport function createGrid(r, c) {\n  let grid = [];\n  let i = 0;\n  while (i < r) {\n    grid.push(Array(c).fill(null));\n    i++;\n  }\n  return grid;\n}\n\nexport function checkResult(grid) {\n  const tie = grid.every((row) => !row.includes(null));\n  if (tie) return \"Draw!\";\n\n  for (let r = 0; r < grid.length; r++) {\n    for (let c = 0; c < grid[r].length; c++) {\n      let value = grid[r][c];\n\n      if (\n        //left and right\n        value &&\n        value === grid[r][c + 1] &&\n        value === grid[r][c + 2] &&\n        value === grid[r][c + 3]\n      ) {\n        return value + \" wins\";\n      }\n\n      if (r < grid.length - 3) {\n        if (\n          //up and down\n          (value &&\n            value === grid[r + 1][c] &&\n            value === grid[r + 2][c] &&\n            value === grid[r + 3][c]) ||\n          //diagonal \" \\ \"\n          (value &&\n            value === grid[r + 1][c + 1] &&\n            value === grid[r + 2][c + 2] &&\n            value === grid[r + 3][c + 3]) ||\n          //diagonal \" / \"\n          (value &&\n            value === grid[r + 1][c - 1] &&\n            value === grid[r + 2][c - 2] &&\n            value === grid[r + 3][c - 3])\n        ) {\n          return value + \" wins\";\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport function findAValidMove(grid, c) {\n  for (let r = grid.length - 1; r >= 0; r--) {\n    if (grid[r][c] === null) {\n      let move = [r, c];\n      return move;\n    }\n  }\n}\n\nexport function findAiMove(grid, columns, huPlayer, aiPlayer) {\n  let MAX_DEPTH = 3;\n  let bestMoveScore = 100;\n  let move = [];\n  let columnIndexes = columns - 1;\n\n  for (let c = columnIndexes; c >= 0; c--) {\n    let newMove = findAValidMove(grid, c);\n    if (newMove) {\n      const [row, col] = newMove;\n      grid[row][col] = aiPlayer;\n      const moveScore = maxScore(\n        grid,\n        columnIndexes,\n        MAX_DEPTH,\n        huPlayer,\n        aiPlayer\n      );\n      grid[row][col] = null;\n      if (moveScore < bestMoveScore) {\n        bestMoveScore = moveScore;\n        move = [row, col];\n      }\n    }\n  }\n  return move;\n}\n\nfunction minScore(grid, columnIndexes, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n  if (result) {\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n  if (depth === 0) return 0;\n\n  let bestMoveScore = 100;\n  for (let c = columnIndexes; c >= 0; c--) {\n    const newMove = findAValidMove(grid, c);\n    if (newMove) {\n      const [row, col] = newMove;\n      grid[row][col] = huPlayer;\n      const moveScore = maxScore(\n        grid,\n        columnIndexes,\n        depth - 1,\n        huPlayer,\n        aiPlayer\n      );\n      grid[row][col] = null;\n      if (moveScore < bestMoveScore) {\n        bestMoveScore = moveScore;\n      }\n    }\n  }\n\n  return bestMoveScore;\n}\n\nfunction maxScore(grid, columnIndexes, depth, huPlayer, aiPlayer) {\n  let result = checkResult(grid);\n  if (result) {\n    if (result === \"Player-1 wins\") return 10;\n    if (result === \"Player-2 wins\") return -10;\n    if (result === \"Draw\") return 0;\n  }\n  if (depth === 0) return 0;\n\n  let bestMoveScore = -100;\n  for (let c = columnIndexes; c >= 0; c--) {\n    let newMove = findAValidMove(grid, c);\n    if (newMove) {\n      const [row, col] = newMove;\n      grid[row][col] = huPlayer;\n      const moveScore = minScore(\n        grid,\n        columnIndexes,\n        depth - 1,\n        huPlayer,\n        aiPlayer\n      );\n      grid[row][col] = null;\n      if (moveScore > bestMoveScore) {\n        bestMoveScore = moveScore;\n      }\n    }\n  }\n\n  return bestMoveScore;\n}\n"]},"metadata":{},"sourceType":"module"}