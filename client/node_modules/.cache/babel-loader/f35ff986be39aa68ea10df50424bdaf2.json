{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/src/components/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid } from \"./help\";\nimport \"./Game.css\"; // import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  _s();\n\n  // Create grid\n  // States and flag\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid); //   const [stepNumber, setStepNumber] = useState(0);\n\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\"; //  Check for winners and tie\n  //   let result = checkResult(newGrid, winningArrays);\n  //   if (result === \"huPlayer\") result = \"You win!\";\n  //   if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  //   if (result === \"tie\") result = \"Draw!\";\n  //   if (result) turn = null;\n  // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    // const previousGrid = grid.slice();\n    // const currentGrid = grid[previousGrid.length - 1];\n    // console.log(x, y);\n    // let r = rowIndex;\n    // let c = columnIndex;\n    // // let test = newGrid.slice();\n    // if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n    //   recordHuMoves((moves) => [...moves, [r, c]]); //For debug\n    //   newGrid[r][c] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n    //   //   setGrid();\n    //   //   //   setStepNumber(moves.length);\n    //   //   setHuIsNext(!huIsNext);\n    // }\n    // console.log({ newGrid });\n    console.log({\n      rowIndex\n    });\n    console.log({\n      columnIndex\n    });\n  }; // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: newGrid.map((row, rowIndex) => row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n        value: value,\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        onClick: () => handleClick(rowIndex, columnIndex)\n      }, rowIndex + columnIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: newGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: huIsNext ? \"huTurn\" : \"aiTurn\",\n      children: turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: huMoves\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Game, \"0VlI/Y5ocPOEnFHTaF2eiEklX9U=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/SinglePlayer.js"],"names":["React","useEffect","useState","Button","Alert","Link","SquareGrid","createGrid","Game","props","grid","newGrid","setGrid","huIsNext","setHuIsNext","huMoves","recordHuMoves","turn","handleClick","rowIndex","columnIndex","console","log","handleReplay","window","location","reload","map","row","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,iBAA9B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAO,YAAP,C,CAEA;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAClC;AACA;AACA,QAAMC,IAAI,GAAGH,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAvB;AACA,QAAM,CAACI,OAAD,EAAUC,OAAV,IAAqBV,QAAQ,CAACQ,IAAD,CAAnC,CAJkC,CAKlC;;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACa,OAAD,EAAUC,aAAV,IAA2Bd,QAAQ,CAAC,EAAD,CAAzC,CAPkC,CAOa;;AAC/C,MAAIe,IAAI,GAAGJ,QAAQ,GAAG,WAAH,GAAiB,kBAApC,CARkC,CAUlC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AACA,QAAMK,WAAW,GAAG,CAACC,QAAD,EAAWC,WAAX,KAA2B;AAC7C;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,MAAAA;AAAF,KAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,MAAAA;AAAF,KAAZ;AACD,GAnBD,CAvBkC,CA4ClC;AACA;AACA;AACA;AACA;;;AAEA,WAASG,YAAT,GAAwB;AACtBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACD;;AAED,sBACE;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA,gBACGf,OAAO,CAACgB,GAAR,CAAY,CAACC,GAAD,EAAMT,QAAN,KACXS,GAAG,CAACD,GAAJ,CAAQ,CAACE,KAAD,EAAQT,WAAR,kBACN,QAAC,UAAD;AAEE,QAAA,KAAK,EAAES,KAFT;AAGE,QAAA,QAAQ,EAAEV,QAHZ;AAIE,QAAA,WAAW,EAAEC,WAJf;AAKE,QAAA,OAAO,EAAE,MAAMF,WAAW,CAACC,QAAD,EAAWC,WAAX;AAL5B,SACOD,QAAQ,GAAGC,WADlB;AAAA;AAAA;AAAA;AAAA,cADF,CADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAmCE;AAAA,gBAAMT;AAAN;AAAA;AAAA;AAAA;AAAA,YAnCF,eAqCE;AAAM,MAAA,SAAS,EAAEE,QAAQ,GAAG,QAAH,GAAc,QAAvC;AAAA,gBAAkDI;AAAlD;AAAA;AAAA;AAAA;AAAA,YArCF,eAsCE;AAAA;AAAA;AAAA;AAAA,YAtCF,eA2CE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEM,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA3CF,eA4CE;AAAA;AAAA;AAAA;AAAA,YA5CF,eA6CE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAa,MAAA,SAAS,EAAC,4BAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7CF,eAgDE;AAAA;AAAA;AAAA;AAAA,YAhDF,eAkDE;AAAA,gBAAIR;AAAJ;AAAA;AAAA;AAAA;AAAA,YAlDF;AAAA,kBADF;AAsDD;;GA5GuBP,I;;KAAAA,I","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid } from \"./help\";\nimport \"./Game.css\";\n\n// import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  // Create grid\n  // States and flag\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n  //   const [stepNumber, setStepNumber] = useState(0);\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\";\n\n  //  Check for winners and tie\n  //   let result = checkResult(newGrid, winningArrays);\n  //   if (result === \"huPlayer\") result = \"You win!\";\n  //   if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  //   if (result === \"tie\") result = \"Draw!\";\n  //   if (result) turn = null;\n\n  // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    // const previousGrid = grid.slice();\n    // const currentGrid = grid[previousGrid.length - 1];\n    // console.log(x, y);\n\n    // let r = rowIndex;\n    // let c = columnIndex;\n    // // let test = newGrid.slice();\n    // if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n    //   recordHuMoves((moves) => [...moves, [r, c]]); //For debug\n    //   newGrid[r][c] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n    //   //   setGrid();\n    //   //   //   setStepNumber(moves.length);\n    //   //   setHuIsNext(!huIsNext);\n    // }\n    // console.log({ newGrid });\n    console.log({ rowIndex });\n    console.log({ columnIndex });\n  };\n\n  // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      <div id=\"grid\">\n        {newGrid.map((row, rowIndex) =>\n          row.map((value, columnIndex) => (\n            <SquareGrid\n              key={rowIndex + columnIndex}\n              value={value}\n              rowIndex={rowIndex}\n              columnIndex={columnIndex}\n              onClick={() => handleClick(rowIndex, columnIndex)}\n            />\n          ))\n        )}\n        {/* {newGrid.map((row, rowIndex) => (\n          <div\n            className=\"row\"\n            key={rowIndex}\n            // onClick={() => handleClick(rowIndex)}\n            onClick={handleClick}\n          >\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                onClick={(rowIndex, columnIndex) =>\n                  handleClick(rowIndex, columnIndex)\n                }\n              />\n            ))}\n          </div>\n        ))} */}\n      </div>\n\n      <div>{newGrid}</div>\n      {/* Who's turn */}\n      <span className={huIsNext ? \"huTurn\" : \"aiTurn\"}>{turn}</span>\n      <br />\n\n      {/* <span>{result}</span> */}\n      {/* <button onClick={() => undo(moves)}>Undo</button> */}\n\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      <p>{huMoves}</p>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}