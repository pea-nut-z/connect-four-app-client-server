{"ast":null,"code":"export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\nexport function checkResult(grid) {\n  for (let x in grid) {\n    for (let y in grid[x]) {\n      let value = grid[x][y];\n      if (value === \"base\") continue;\n\n      if (value && value === grid[x][parseInt(y) + 1] && value === grid[x][parseInt(y) + 2] && value === grid[x][parseInt(y) + 3]) {\n        // console.log(typeof y);\n        console.log(\"win\");\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/help.js"],"names":["createGrid","rows","columns","grid","i","push","Array","fill","checkResult","x","y","value","parseInt","console","log"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;AACxC,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGH,IAAX,EAAiB;AACfE,IAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoB,IAApB,CAAV;AACAH,IAAAA,CAAC;AACF;;AACDD,EAAAA,IAAI,CAACE,IAAL,CAAUC,KAAK,CAACJ,OAAD,CAAL,CAAeK,IAAf,CAAoB,MAApB,CAAV;AACA,SAAOJ,IAAP;AACD;AAED,OAAO,SAASK,WAAT,CAAqBL,IAArB,EAA2B;AAChC,OAAK,IAAIM,CAAT,IAAcN,IAAd,EAAoB;AAClB,SAAK,IAAIO,CAAT,IAAcP,IAAI,CAACM,CAAD,CAAlB,EAAuB;AACrB,UAAIE,KAAK,GAAGR,IAAI,CAACM,CAAD,CAAJ,CAAQC,CAAR,CAAZ;AAEA,UAAIC,KAAK,KAAK,MAAd,EAAsB;;AACtB,UACEA,KAAK,IACLA,KAAK,KAAKR,IAAI,CAACM,CAAD,CAAJ,CAAQG,QAAQ,CAACF,CAAD,CAAR,GAAc,CAAtB,CADV,IAEAC,KAAK,KAAKR,IAAI,CAACM,CAAD,CAAJ,CAAQG,QAAQ,CAACF,CAAD,CAAR,GAAc,CAAtB,CAFV,IAGAC,KAAK,KAAKR,IAAI,CAACM,CAAD,CAAJ,CAAQG,QAAQ,CAACF,CAAD,CAAR,GAAc,CAAtB,CAJZ,EAKE;AACA;AAEAG,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD;AACF;AACF;AACF","sourcesContent":["export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\n\nexport function checkResult(grid) {\n  for (let x in grid) {\n    for (let y in grid[x]) {\n      let value = grid[x][y];\n\n      if (value === \"base\") continue;\n      if (\n        value &&\n        value === grid[x][parseInt(y) + 1] &&\n        value === grid[x][parseInt(y) + 2] &&\n        value === grid[x][parseInt(y) + 3]\n      ) {\n        // console.log(typeof y);\n\n        console.log(\"win\");\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}