{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/src/components/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid } from \"./help\"; // import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  _s();\n\n  // Create grid\n  // States and flag\n  const [grid, setGrid] = useState(createGrid(6, 7));\n  const [stepNumber, setStepNumber] = useState(0);\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\"; //  Check for winners and tie\n  //   let result = checkResult(newGrid, winningArrays);\n  //   if (result === \"huPlayer\") result = \"You win!\";\n  //   if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  //   if (result === \"tie\") result = \"Draw!\";\n  //   if (result) turn = null;\n  // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n\n  const handleClick = i => {\n    // if (!result) {\n    const previousGrid = grid.slice();\n    const currentGrid = grid[previousGrid.length - 1]; // if (current[i + 7] !== null && current[i] === null) {\n    //   recordHuMoves((moves) => [...moves, i + \",\"]); //For debug\n    //   current[i] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n    //   setMoves([previousMove[previousMove.length - 1], current]);\n    //   setStepNumber(moves.length);\n    //   setHuIsNext(!huIsNext);\n    //   console.log({ moves });\n    // }\n    // }\n  }; // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: grid[grid.length - 1].forEach(row => row.map(column => /*#__PURE__*/_jsxDEV(SquareGrid, {\n        value: move,\n        onClick: () => handleClick(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: huIsNext ? \"huTurn\" : \"aiTurn\",\n      children: turn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: huMoves\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Game, \"9eIICxsJoK/PXhR1Z4+3nRJbPC4=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/SinglePlayer.js"],"names":["React","useEffect","useState","Button","Alert","Link","SquareGrid","createGrid","Game","props","grid","setGrid","stepNumber","setStepNumber","huIsNext","setHuIsNext","huMoves","recordHuMoves","turn","handleClick","i","previousGrid","slice","currentGrid","length","handleReplay","window","location","reload","forEach","row","map","column","move"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,iBAA9B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B,C,CACA;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAClC;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAACK,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAX,CAAhC;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACc,OAAD,EAAUC,aAAV,IAA2Bf,QAAQ,CAAC,EAAD,CAAzC,CANkC,CAMa;;AAC/C,MAAIgB,IAAI,GAAGJ,QAAQ,GAAG,WAAH,GAAiB,kBAApC,CAPkC,CASlC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AACA,QAAMK,WAAW,GAAIC,CAAD,IAAO;AACzB;AACA,UAAMC,YAAY,GAAGX,IAAI,CAACY,KAAL,EAArB;AAEA,UAAMC,WAAW,GAAGb,IAAI,CAACW,YAAY,CAACG,MAAb,GAAsB,CAAvB,CAAxB,CAJyB,CAKzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAdD,CAtBkC,CAsClC;AACA;AACA;AACA;AACA;;;AAEA,WAASC,YAAT,GAAwB;AACtBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACD;;AAED,sBACE;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA,gBAIGlB,IAAI,CAACA,IAAI,CAACc,MAAL,GAAc,CAAf,CAAJ,CAAsBK,OAAtB,CAA+BC,GAAD,IAC7BA,GAAG,CAACC,GAAJ,CAASC,MAAD,iBACN,QAAC,UAAD;AAAoB,QAAA,KAAK,EAAEC,IAA3B;AAAiC,QAAA,OAAO,EAAE,MAAMd,WAAW,CAACC,CAAD;AAA3D,SAAiBA,CAAjB;AAAA;AAAA;AAAA;AAAA,cADF,CADD;AAJH;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAM,MAAA,SAAS,EAAEN,QAAQ,GAAG,QAAH,GAAc,QAAvC;AAAA,gBAAkDI;AAAlD;AAAA;AAAA;AAAA;AAAA,YAZF,eAaE;AAAA;AAAA;AAAA;AAAA,YAbF,eAqBE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEO,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBF,eAsBE;AAAA;AAAA;AAAA;AAAA,YAtBF,eAuBE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAa,MAAA,SAAS,EAAC,4BAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBF,eA0BE;AAAA;AAAA;AAAA;AAAA,YA1BF,eA4BE;AAAA,gBAAIT;AAAJ;AAAA;AAAA;AAAA;AAAA,YA5BF;AAAA,kBADF;AAgCD;;GAhFuBR,I;;KAAAA,I","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid } from \"./help\";\n// import { emptyIndexies, winning, minimax } from \"./minimax\";\n\nexport default function Game(props) {\n  // Create grid\n  // States and flag\n  const [grid, setGrid] = useState(createGrid(6, 7));\n  const [stepNumber, setStepNumber] = useState(0);\n  const [huIsNext, setHuIsNext] = useState(true);\n  const [huMoves, recordHuMoves] = useState([]); //For debug\n  let turn = huIsNext ? \"Your turn\" : \"Peanutbot's turn\";\n\n  //  Check for winners and tie\n  //   let result = checkResult(newGrid, winningArrays);\n  //   if (result === \"huPlayer\") result = \"You win!\";\n  //   if (result === \"aiPlayer\") result = \"Peanutbot wins!\";\n  //   if (result === \"tie\") result = \"Draw!\";\n  //   if (result) turn = null;\n\n  // const aiMove = minimax(winningArrays, newGrid, \"aiPlayer\");\n  // console.log({ aiMove });\n\n  // MINIMAX\n  // board, winningarrays, player\n  // Make a move\n  const handleClick = (i) => {\n    // if (!result) {\n    const previousGrid = grid.slice();\n\n    const currentGrid = grid[previousGrid.length - 1];\n    // if (current[i + 7] !== null && current[i] === null) {\n    //   recordHuMoves((moves) => [...moves, i + \",\"]); //For debug\n    //   current[i] = huIsNext ? \"huPlayer\" : \"aiPlayer\";\n    //   setMoves([previousMove[previousMove.length - 1], current]);\n    //   setStepNumber(moves.length);\n    //   setHuIsNext(!huIsNext);\n    //   console.log({ moves });\n    // }\n    // }\n  };\n\n  // function undo(moves) {\n  // setStepNumber(stepNumber - 1);\n  // setHuIsNext(stepNumber % 2 === 0);\n  // setMoves(moves[stepNumber]);\n  // }\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      <div id=\"grid\">\n        {/* {moves[moves.length - 1].map((move, i) => (\n          <SquareGrid key={i} value={move} onClick={() => handleClick(i)} />\n        ))} */}\n        {grid[grid.length - 1].forEach((row) =>\n          row.map((column) => (\n            <SquareGrid key={i} value={move} onClick={() => handleClick(i)} />\n          ))\n        )}\n      </div>\n      {/* Who's turn */}\n      <span className={huIsNext ? \"huTurn\" : \"aiTurn\"}>{turn}</span>\n      <br />\n      {/* <span>{result}</span> */}\n\n      {/* <button onClick={() => undo(moves)}>Undo</button> */}\n\n      {/* <Link to=\"/single-player\" className=\"btn btn-primary w-100 mt-3\">\n        Replay\n      </Link> */}\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      <p>{huMoves}</p>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}