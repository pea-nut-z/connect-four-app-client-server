{"ast":null,"code":"export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\nexport function checkResult(grid) {\n  for (let x in grid) {\n    console.log(grid);\n\n    for (let y in grid[x]) {\n      let value = grid[x][y];\n      if (value === \"base\") continue; //   if (!value) continue;\n\n      if ( //left and right\n      value && value === grid[x][parseInt(y) + 1] && value === grid[x][parseInt(y) + 2] && value === grid[x][parseInt(y) + 3] || //up and down\n      value && value === grid[parseInt(x) - 1][y] && value === grid[parseInt(x) - 2][y] && value === grid[parseInt(x) - 3][y] || //diagonal - left to right (\\)\n      value && value === grid[parseInt(x) + 1][parseInt(y) + 1] && value === grid[parseInt(x) + 2][parseInt(y) + 2] && value === grid[parseInt(x) + 3][parseInt(y) + 3] || //diagonal - right to left (/)\n      value && value === grid[parseInt(x) + 1][parseInt(y) - 1] && value === grid[parseInt(x) + 2][parseInt(y) - 2] && value === grid[parseInt(x) + 3][parseInt(y) - 3]) {\n        return value;\n      }\n\n      const tie = grid.every(row => !row.includes(null));\n      if (tie) return \"tie\";\n    }\n  }\n}","map":{"version":3,"sources":["/Users/paulinez/connect-four/src/components/help.js"],"names":["createGrid","rows","columns","grid","i","push","Array","fill","checkResult","x","console","log","y","value","parseInt","tie","every","row","includes"],"mappings":"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","sourcesContent":["export function createGrid(rows, columns) {\n  let grid = [];\n  let i = 0;\n  while (i < rows) {\n    grid.push(Array(columns).fill(null));\n    i++;\n  }\n  grid.push(Array(columns).fill(\"base\"));\n  return grid;\n}\n\nexport function checkResult(grid) {\n  for (let x in grid) {\n    console.log(grid);\n    for (let y in grid[x]) {\n      let value = grid[x][y];\n\n      if (value === \"base\") continue;\n      //   if (!value) continue;\n\n      if (\n        //left and right\n        (value &&\n          value === grid[x][parseInt(y) + 1] &&\n          value === grid[x][parseInt(y) + 2] &&\n          value === grid[x][parseInt(y) + 3]) ||\n        //up and down\n        (value &&\n          value === grid[parseInt(x) - 1][y] &&\n          value === grid[parseInt(x) - 2][y] &&\n          value === grid[parseInt(x) - 3][y]) ||\n        //diagonal - left to right (\\)\n        (value &&\n          value === grid[parseInt(x) + 1][parseInt(y) + 1] &&\n          value === grid[parseInt(x) + 2][parseInt(y) + 2] &&\n          value === grid[parseInt(x) + 3][parseInt(y) + 3]) ||\n        //diagonal - right to left (/)\n        (value &&\n          value === grid[parseInt(x) + 1][parseInt(y) - 1] &&\n          value === grid[parseInt(x) + 2][parseInt(y) - 2] &&\n          value === grid[parseInt(x) + 3][parseInt(y) - 3])\n      ) {\n        return value;\n      }\n      const tie = grid.every((row) => !row.includes(null));\n      if (tie) return \"tie\";\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}