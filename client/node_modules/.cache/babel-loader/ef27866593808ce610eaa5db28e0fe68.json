{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\"; // const socket = io({\n//   path: \"/multi-player\",\n// });\n\nexport default function MultiPlayer(props) {\n  _s();\n\n  let playerNum = 0;\n  const history = useHistory();\n  const [currentPlayerIs2, setCurrentPlayer] = useState(false);\n  useEffect(() => {\n    const socket = io.connect(\"http://localhost:3001\"); // const handleJoin = (num) => {\n    //   if (num === -1) {\n    //     console.log(\"Sorry, the server is full\");\n    //     history.push(\"/\");\n    //   } else {\n    //     playerNum = parseInt(num);\n    //     if (playerNum === 1) {\n    //       console.log(\"hello player 2, player 1 is waiting\");\n    //       setCurrentPlayer(!currentPlayerIs2);\n    //     }\n    //     console.log({ playerNum });\n    //   }\n    // };\n\n    socket.on(\"player-number\", num => {\n      if (num === -1) {\n        console.log(\"Sorry, the server is full\");\n        history.push(\"/\");\n      } else {\n        playerNum = parseInt(num);\n\n        if (playerNum === 1) {\n          console.log(\"hello player 2, player 1 is waiting\");\n          setCurrentPlayer(!currentPlayerIs2);\n        }\n\n        console.log({\n          playerNum\n        });\n      }\n    });\n    return () => {\n      socket.off(\"player-number\");\n    }; // Get other player status\n    // socket.emit(\"check-players\");\n    // Another player has connected or disconnected\n    // socket.on(\"player-connection\", (num) => {\n    //   console.log(`Player number ${num} has connected or disconnected`);\n    //   // playerConnectedOrDisconnected(num)\n    // });\n  }, []);\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid); //   const [stepNumber, setStepNumber] = useState(0);\n\n  const [player1IsNext, setPlayer1IsNext] = useState(true); //   const [huMoves, recordHuMoves] = useState([]); //For debug\n\n  let turn = player1IsNext ? \"Player1's turn\" : \"Player2's turn\"; // let resultDisplay\n  //   let result = checkResult(newGrid);\n  //   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  //   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  //   if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    let r = rowIndex;\n    let c = columnIndex;\n\n    if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n      // recordHuMoves((moves) => [...moves, \"(\" + r + \",\" + c + \")\"]); //For debug\n      newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n      setPlayer1IsNext(!player1IsNext);\n    } // }\n\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      children: newGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p1\",\n      children: [\"Player 1\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"indicator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player p2\",\n      children: [\"Player 2\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected\",\n        children: [\"Connected \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"indicator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: player1IsNext ? \"player1Turn\" : \"player2Turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentPlayerIs2 ? \"player 1 & 2 are ready\" : \"player 1 is ready\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-primary w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MultiPlayer, \"DQ5+1NkvNVUdD36k0Qpo/eXTtyo=\", false, function () {\n  return [useHistory];\n});\n\n_c = MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/MultiPlayer.js"],"names":["React","useState","useEffect","Button","Link","useHistory","SquareGrid","createGrid","checkResult","io","MultiPlayer","props","playerNum","history","currentPlayerIs2","setCurrentPlayer","socket","connect","on","num","console","log","push","parseInt","off","grid","newGrid","setGrid","player1IsNext","setPlayer1IsNext","turn","handleClick","rowIndex","columnIndex","r","c","handleReplay","window","location","reload","map","row","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult } from \"./help\";\nimport \"./multiPlayer.css\";\nimport io from \"socket.io-client\";\n\n// const socket = io({\n//   path: \"/multi-player\",\n// });\n\nexport default function MultiPlayer(props) {\n  let playerNum = 0;\n  const history = useHistory();\n  const [currentPlayerIs2, setCurrentPlayer] = useState(false);\n\n  useEffect(() => {\n    const socket = io.connect(\"http://localhost:3001\");\n    // const handleJoin = (num) => {\n    //   if (num === -1) {\n    //     console.log(\"Sorry, the server is full\");\n    //     history.push(\"/\");\n    //   } else {\n    //     playerNum = parseInt(num);\n    //     if (playerNum === 1) {\n    //       console.log(\"hello player 2, player 1 is waiting\");\n    //       setCurrentPlayer(!currentPlayerIs2);\n    //     }\n    //     console.log({ playerNum });\n    //   }\n    // };\n    socket.on(\"player-number\", (num) => {\n      if (num === -1) {\n        console.log(\"Sorry, the server is full\");\n        history.push(\"/\");\n      } else {\n        playerNum = parseInt(num);\n        if (playerNum === 1) {\n          console.log(\"hello player 2, player 1 is waiting\");\n          setCurrentPlayer(!currentPlayerIs2);\n        }\n        console.log({ playerNum });\n      }\n    });\n    return () => {\n      socket.off(\"player-number\");\n    };\n\n    // Get other player status\n    // socket.emit(\"check-players\");\n\n    // Another player has connected or disconnected\n    // socket.on(\"player-connection\", (num) => {\n    //   console.log(`Player number ${num} has connected or disconnected`);\n    //   // playerConnectedOrDisconnected(num)\n    // });\n  }, []);\n\n  const grid = createGrid(6, 7);\n  const [newGrid, setGrid] = useState(grid);\n  //   const [stepNumber, setStepNumber] = useState(0);\n  const [player1IsNext, setPlayer1IsNext] = useState(true);\n  //   const [huMoves, recordHuMoves] = useState([]); //For debug\n  let turn = player1IsNext ? \"Player1's turn\" : \"Player2's turn\";\n\n  // let resultDisplay\n  //   let result = checkResult(newGrid);\n  //   if (result === \"huPlayer\") resultDisplay = \"You win!\";\n  //   if (result === \"aiPlayer\") resultDisplay = \"Peanutbot wins!\";\n  //   if (result === \"tie\") resultDisplay = \"Draw!\";\n\n  const handleClick = (rowIndex, columnIndex) => {\n    // if (!result) {\n    let r = rowIndex;\n    let c = columnIndex;\n\n    if (newGrid[r + 1][c] !== null && newGrid[r][c] === null) {\n      // recordHuMoves((moves) => [...moves, \"(\" + r + \",\" + c + \")\"]); //For debug\n      newGrid[r][c] = player1IsNext ? \"player1\" : \"player2\";\n      setPlayer1IsNext(!player1IsNext);\n    }\n    // }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\">\n        {newGrid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* CONNECTION INDICATOR */}\n      <div className=\"player p1\">\n        Player 1\n        <div className=\"connected\">\n          Connected <span className=\"indicator\"></span>\n        </div>\n      </div>\n\n      <div className=\"player p2\">\n        Player 2\n        <div className=\"connected\">\n          Connected <span className=\"indicator\"></span>\n        </div>\n      </div>\n\n      {/* WHO's TURN */}\n      <span className={player1IsNext ? \"player1Turn\" : \"player2Turn\"}>\n        {/* {result ? \"\" : turn} */}\n      </span>\n      <br />\n\n      {/* <span>{resultDisplay}</span> */}\n\n      <div>\n        {currentPlayerIs2 ? \"player 1 & 2 are ready\" : \"player 1 is ready\"}\n      </div>\n\n      <Button onClick={handleReplay}>Replay</Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-primary w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n      {/* Record moves */}\n      {/* <p>{huMoves}</p> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}