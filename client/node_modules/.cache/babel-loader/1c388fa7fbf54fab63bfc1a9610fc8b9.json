{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult, findAValidMove, findAiMove } from \"./help\";\nimport \"./singlePlayer.css\";\nexport default function SinglePlayer() {\n  _s();\n\n  const rows = 6;\n  const columns = 7;\n  const initialGrid = createGrid(rows, columns);\n  const [grid, setGrid] = useState(initialGrid);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  const [warning, displayWarning] = useState(\"\");\n  const [result, displayResult] = useState(\"\");\n  const [turn, switchTurn] = useState(true);\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n  useEffect(() => {\n    if (!huPlayerIsNext) {\n      let copyGrid = grid.slice();\n      const [aiMoveRowIndex, aiMoveColumnIndex] = findAiMove(copyGrid, columns, huPlayer, aiPlayer);\n      copyGrid[aiMoveRowIndex][aiMoveColumnIndex] = aiPlayer;\n      setGrid(copyGrid);\n      let result = checkResult(copyGrid);\n      displayResult(result);\n\n      if (!result) {\n        setHuPlayerIsNext(true);\n      }\n    }\n  }, [turn]);\n\n  const handleClick = columnIndex => {\n    if (!result && huPlayerIsNext) {\n      let copyGrid = grid.slice();\n      const [huMoveRowIndex, huMoveColumnIndex] = findAValidMove(copyGrid, columnIndex);\n      copyGrid[huMoveRowIndex][huMoveColumnIndex] = huPlayer;\n      setGrid(copyGrid);\n      let result = checkResult(copyGrid);\n      displayResult(result);\n\n      if (!result) {\n        setHuPlayerIsNext(!huPlayerIsNext);\n        switchTurn(!turn);\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid\",\n      className: \"w-100 bg-blue\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((value, columnIndex) => /*#__PURE__*/_jsxDEV(SquareGrid, {\n          value: value,\n          columnIndex: columnIndex,\n          handleClick: handleClick\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"turn-display\",\n      children: result ? \"\" : huPlayerIsNext ? \"Your turn\" : \"Peanutbot's turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: warning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"btn-warning w-100\",\n      onClick: handleReplay,\n      children: \"Replay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-warning w-100 mt-3\",\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SinglePlayer, \"WEluZm3J7Eh+JO/OSqci4/eWbJk=\");\n\n_c = SinglePlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePlayer\");","map":{"version":3,"sources":["/Users/paulinez/connect-four/client/src/components/Game/SinglePlayer.js"],"names":["React","useState","useEffect","Button","Link","SquareGrid","createGrid","checkResult","findAValidMove","findAiMove","SinglePlayer","rows","columns","initialGrid","grid","setGrid","huPlayerIsNext","setHuPlayerIsNext","warning","displayWarning","result","displayResult","turn","switchTurn","huPlayer","aiPlayer","copyGrid","slice","aiMoveRowIndex","aiMoveColumnIndex","handleClick","columnIndex","huMoveRowIndex","huMoveColumnIndex","handleReplay","window","location","reload","map","row","rowIndex","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport SquareGrid from \"./SquareGrid\";\nimport { createGrid, checkResult, findAValidMove, findAiMove } from \"./help\";\nimport \"./singlePlayer.css\";\n\nexport default function SinglePlayer() {\n  const rows = 6;\n  const columns = 7;\n  const initialGrid = createGrid(rows, columns);\n\n  const [grid, setGrid] = useState(initialGrid);\n  const [huPlayerIsNext, setHuPlayerIsNext] = useState(true);\n  const [warning, displayWarning] = useState(\"\");\n  const [result, displayResult] = useState(\"\");\n  const [turn, switchTurn] = useState(true);\n  let huPlayer = \"Player-1\";\n  let aiPlayer = \"Player-2\";\n\n  useEffect(() => {\n    if (!huPlayerIsNext) {\n      let copyGrid = grid.slice();\n      const [aiMoveRowIndex, aiMoveColumnIndex] = findAiMove(\n        copyGrid,\n        columns,\n        huPlayer,\n        aiPlayer\n      );\n      copyGrid[aiMoveRowIndex][aiMoveColumnIndex] = aiPlayer;\n      setGrid(copyGrid);\n      let result = checkResult(copyGrid);\n      displayResult(result);\n      if (!result) {\n        setHuPlayerIsNext(true);\n      }\n    }\n  }, [turn]);\n\n  const handleClick = (columnIndex) => {\n    if (!result && huPlayerIsNext) {\n      let copyGrid = grid.slice();\n      const [huMoveRowIndex, huMoveColumnIndex] = findAValidMove(\n        copyGrid,\n        columnIndex\n      );\n      copyGrid[huMoveRowIndex][huMoveColumnIndex] = huPlayer;\n      setGrid(copyGrid);\n      let result = checkResult(copyGrid);\n      displayResult(result);\n      if (!result) {\n        setHuPlayerIsNext(!huPlayerIsNext);\n        switchTurn(!turn);\n      }\n    }\n  };\n\n  function handleReplay() {\n    window.location.reload(false);\n  }\n\n  return (\n    <>\n      {/* GRID */}\n      <div id=\"grid\" className=\"w-100 bg-blue\">\n        {grid.map((row, rowIndex) => (\n          <div className=\"row\" key={rowIndex}>\n            {row.map((value, columnIndex) => (\n              <SquareGrid\n                key={columnIndex}\n                value={value}\n                columnIndex={columnIndex}\n                handleClick={handleClick}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      {/* WHO's TURN DISPLAY*/}\n      <span className=\"turn-display\">\n        {result ? \"\" : huPlayerIsNext ? \"Your turn\" : \"Peanutbot's turn\"}\n      </span>\n      <br />\n      {/* WARNING MSG*/}\n      <span>{warning}</span>\n      <br />\n      {/* WINNING RESULT*/}\n      <span>{result}</span>\n      <br />\n      <Button className=\"btn-warning w-100\" onClick={handleReplay}>\n        Replay\n      </Button>\n      <br />\n      <Link to=\"/\" className=\"btn btn-warning w-100 mt-3\">\n        Quit\n      </Link>\n      <br />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}